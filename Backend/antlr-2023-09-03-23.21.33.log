2023-09-03 23:21:32:464 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACT (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NULO (BLOCK (ALT 'nil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGO (BLOCK (ALT '...'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNCION (BLOCK (ALT 'func'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE CADENA (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (RULE ID_VALIDO (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CHARACTER (BLOCK (ALT '\'' (BLOCK (ALT ESCAPE) (ALT (~ (SET ['\\\r\n])))) '\''))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [\\'tnr]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IG (BLOCK (ALT '='))) (RULE DOS_PUNTOS (BLOCK (ALT ':'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE CIERRE_INTE (BLOCK (ALT '?'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE SUMA (BLOCK (ALT '+='))) (RULE RESTA (BLOCK (ALT '-='))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE RETORNO (BLOCK (ALT '->'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-03 23:21:32:479 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACT (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NULO (BLOCK (ALT 'nil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGO (BLOCK (ALT '...'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNCION (BLOCK (ALT 'func'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE CADENA (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (RULE ID_VALIDO (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CHARACTER (BLOCK (ALT '\'' (BLOCK (ALT ESCAPE) (ALT (~ (SET ['\\\r\n])))) '\''))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [\\'tnr]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IG (BLOCK (ALT '='))) (RULE DOS_PUNTOS (BLOCK (ALT ':'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE CIERRE_INTE (BLOCK (ALT '?'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE SUMA (BLOCK (ALT '+='))) (RULE RESTA (BLOCK (ALT '-='))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE RETORNO (BLOCK (ALT '->'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-03 23:21:32:808 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $matrizcontrol.matct}) (ALT structcontrol { $inst = $structcontrol.struck}) (ALT funciondeclaracioncontrol { $inst = $funciondeclaracioncontrol.fdc}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr {$decvbl = instructions.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = instructions.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = instructions.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = instructions.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = instructions.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = instructions.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = instructions.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = instructions.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}) (ALT stringembebida { $e = $stringembebida.stremb}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = instructions.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = instructions.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = instructions.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = instructions.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = instructions.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=instructions.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = instructions.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = instructions.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = instructions.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = instructions.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN {
    $rect = instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}) (ALT RETURN (= op expr) {
    $rect = instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = instructions.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = instructions.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = instructions.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = instructions.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = instructions.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = instructions.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = instructions.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = instructions.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = instructions.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = instructions.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = instructions.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs { $vepposct = instructions.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER { $vepposct = instructions.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) }) (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = instructions.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE matrizcontrol (returns interfaces.Instruction matct) (BLOCK (ALT VAR ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS tipomatriz))) IG defmatriz {
    if ($DOS_PUNTOS != nil) {
        $matct = instructions.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        $matct = instructions.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }
}))) (RULE tipomatriz (returns interfaces.Expression tipomat) (BLOCK (ALT CORCHIZQ tipomatriz CORCHDER { 
    $tipomat = instructions.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)
}) (ALT CORCHIZQ tipodato CORCHDER { 
    $tipomat = instructions.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)
}))) (RULE defmatriz (returns interfaces.Instruction defmat) (BLOCK (ALT listavaloresmat { $defmat = $listavaloresmat.listvlamat}))) (RULE listavaloresmat (returns interfaces.Instruction listvlamat) (BLOCK (ALT CORCHIZQ listavaloresmat2 CORCHDER { $listvlamat = $listavaloresmat2.mylisttmatt}) (ALT simplematriz { $listvlamat = $simplematriz.simmat}))) (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (= op listavaloresmat2) COMA listavaloresmat { $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}) (ALT listavaloresmat { $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT listaexpresions { $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)}))) (RULE listaexpresions (returns []interface{} blkparf) (@ init {
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= funpar listaexpresion)))) {
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }
}))) (RULE listaexpresion (returns interfaces.Expression funpar) (BLOCK (ALT COMA expr {
    $funpar = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $funpar = instructions.NewArregloParametro($expr.e)
}))) (RULE simplematriz (returns interfaces.Instruction simmat) (BLOCK (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS (= op simplematriz) COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}) (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS expr COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}))) (RULE listamatrizaddsubs (returns []interface{} blklimatas) (@ init {
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= lmas listamatrizaddsub)))) {
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }
}))) (RULE listamatrizaddsub (returns interfaces.Expression lmas) (BLOCK (ALT CORCHIZQ expr CORCHDER {
    $lmas = instructions.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)
}))) (RULE structcontrol (returns interfaces.Instruction struck) (BLOCK (ALT STRUCT ID_VALIDO LLAVEIZQ listaatributos LLAVEDER {
    $struck = instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt);
}))) (RULE listaatributos (returns []interface{} blkstlt) (@ init {
    $blkstlt = []interface{}{}
    var listInt []IListaatributoContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= listatstr listaatributo)))) {
    listInt = localctx.(*ListaatributosContext).GetListatstr()
    for _, e := range listInt {
        $blkstlt = append($blkstlt, e.GetListatstr())
    }
}))) (RULE listaatributo (returns interfaces.Instruction listatstr) (BLOCK (ALT (= tip1 (BLOCK (ALT LET) (ALT VAR))) (= tip4 ID_VALIDO) DOS_PUNTOS (BLOCK (ALT (= tip2 tipodato)) (ALT (= tip3 ID_VALIDO))) (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        if $tip3.text != "" {
            $listatstr = instructions.NewStructAtributosConTE2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text, $expr.e)
        }else{                        
            $listatstr = instructions.NewStructAtributosConTE($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo, $expr.e)
        }        
    }else{ 
        if $tip3.text != "" {                        
            $listatstr = instructions.NewStructAtributosConT2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text) 
        }else{            
            $listatstr = instructions.NewStructAtributosConT($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo) 
        }
    }
}) (ALT (= tipo (BLOCK (ALT LET) (ALT VAR))) ID_VALIDO (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        $listatstr = instructions.NewStructAtributosConE($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text, $expr.e)
    }else{
        $listatstr = instructions.NewStructAtributos($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text)
    }
}) (ALT (? (BLOCK (ALT MUTATING))) funciondeclaracioncontrol {
    if $MUTATING != nil{
        //$listatstr = instructions.NewStruckMutatingFunction($funciondeclaracioncontrol.fdc)
    } else {
        //$listatstr = instructions.NewStruckFunction($funciondeclaracioncontrol.fdc)
    }
}))) (RULE structexpr (BLOCK (ALT (BLOCK (ALT VAR) (ALT LET)) ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS ID_VALIDO))) IG ID_VALIDO (? (BLOCK (ALT l_dupla))) {}) (ALT (BLOCK (ALT VAR) (ALT LET)) ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS ID_VALIDO))) IG (? (BLOCK (ALT ID_VALIDO))) {}) (ALT (BLOCK (ALT VAR) (ALT LET)) ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS ID_VALIDO))) IG expr {}))) (RULE l_dupla (BLOCK (ALT (+ (BLOCK (ALT ID_VALIDO DOS_PUNTOS expr))) {}))) (RULE llamadastruct (BLOCK (ALT ID_VALIDO PUNTO ID_VALIDO {}))) (RULE asignacionparametrostruct (BLOCK (ALT ID_VALIDO PUNTO ID_VALIDO IG expr {}))) (RULE llamadafuncionstruct (BLOCK (ALT ID_VALIDO PUNTO ID_VALIDO PARIZQ PARDER {}))) (RULE funciondeclaracioncontrol (returns interfaces.Instruction fdc) (BLOCK (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionRP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER LLAVEIZQ blockinterno LLAVEDER {
   $fdc = instructions.NewFuncionesDeclaracionP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracion($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $blockinterno.blkint)
}))) (RULE listaparametro (returns interfaces.Instruction listparfun) (BLOCK (ALT (? (BLOCK (ALT (= op (BLOCK (ALT ID_VALIDO) (ALT GUIONBAJO)))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato COMA (= op3 listaparametro) {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true, true, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true, $op3.listparfun )
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false,$op3.listparfun )
        } 
    }      
}) (ALT (? (BLOCK (ALT (= op (BLOCK (ALT ID_VALIDO) (ALT GUIONBAJO)))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true , true)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true)
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false)
    } 
    }
    
}))) (RULE funcionllamadacontrol (BLOCK (ALT ID_VALIDO PARIZQ (? (BLOCK (ALT listaparametrosllamada))) PARIZQ {}))) (RULE listaparametrosllamada (BLOCK (ALT COMA (? (BLOCK (ALT ID_VALIDO DOS_PUNTOS))) (? (BLOCK (ALT '&'))) expr listaparametrosllamada {}) (ALT (? (BLOCK (ALT ID_VALIDO DOS_PUNTOS))) (? (BLOCK (ALT '&'))) expr {}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = instructions.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = instructions.NewFuncionFloatEmbebida($expr.e)}))) (RULE stringembebida (returns interfaces.Expression stremb) (BLOCK (ALT STRING PARIZQ expr PARDER { $stremb = instructions.NewFuncionStringEmbebida($expr.e)})))))
2023-09-03 23:21:32:824 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $matrizcontrol.matct}) (ALT structcontrol { $inst = $structcontrol.struck}) (ALT funciondeclaracioncontrol { $inst = $funciondeclaracioncontrol.fdc}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr {$decvbl = instructions.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = instructions.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = instructions.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = instructions.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = instructions.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = instructions.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = instructions.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = instructions.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}) (ALT stringembebida { $e = $stringembebida.stremb}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = instructions.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = instructions.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = instructions.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = instructions.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = instructions.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=instructions.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = instructions.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = instructions.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = instructions.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = instructions.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN {
    $rect = instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}) (ALT RETURN (= op expr) {
    $rect = instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = instructions.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = instructions.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = instructions.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = instructions.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = instructions.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = instructions.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = instructions.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = instructions.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = instructions.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = instructions.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = instructions.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs { $vepposct = instructions.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER { $vepposct = instructions.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) }) (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = instructions.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE matrizcontrol (returns interfaces.Instruction matct) (BLOCK (ALT VAR ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS tipomatriz))) IG defmatriz {
    if ($DOS_PUNTOS != nil) {
        $matct = instructions.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        $matct = instructions.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }
}))) (RULE tipomatriz (returns interfaces.Expression tipomat) (BLOCK (ALT CORCHIZQ tipomatriz CORCHDER { 
    $tipomat = instructions.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)
}) (ALT CORCHIZQ tipodato CORCHDER { 
    $tipomat = instructions.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)
}))) (RULE defmatriz (returns interfaces.Instruction defmat) (BLOCK (ALT listavaloresmat { $defmat = $listavaloresmat.listvlamat}))) (RULE listavaloresmat (returns interfaces.Instruction listvlamat) (BLOCK (ALT CORCHIZQ listavaloresmat2 CORCHDER { $listvlamat = $listavaloresmat2.mylisttmatt}) (ALT simplematriz { $listvlamat = $simplematriz.simmat}))) (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (= op listavaloresmat2) COMA listavaloresmat { $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}) (ALT listavaloresmat { $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT listaexpresions { $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)}))) (RULE listaexpresions (returns []interface{} blkparf) (@ init {
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= funpar listaexpresion)))) {
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }
}))) (RULE listaexpresion (returns interfaces.Expression funpar) (BLOCK (ALT COMA expr {
    $funpar = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $funpar = instructions.NewArregloParametro($expr.e)
}))) (RULE simplematriz (returns interfaces.Instruction simmat) (BLOCK (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS (= op simplematriz) COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}) (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS expr COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}))) (RULE listamatrizaddsubs (returns []interface{} blklimatas) (@ init {
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= lmas listamatrizaddsub)))) {
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }
}))) (RULE listamatrizaddsub (returns interfaces.Expression lmas) (BLOCK (ALT CORCHIZQ expr CORCHDER {
    $lmas = instructions.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)
}))) (RULE structcontrol (returns interfaces.Instruction struck) (BLOCK (ALT STRUCT ID_VALIDO LLAVEIZQ listaatributos LLAVEDER {
    $struck = instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt);
}))) (RULE listaatributos (returns []interface{} blkstlt) (@ init {
    $blkstlt = []interface{}{}
    var listInt []IListaatributoContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= listatstr listaatributo)))) {
    listInt = localctx.(*ListaatributosContext).GetListatstr()
    for _, e := range listInt {
        $blkstlt = append($blkstlt, e.GetListatstr())
    }
}))) (RULE listaatributo (returns interfaces.Instruction listatstr) (BLOCK (ALT (= tip1 (SET LET VAR)) (= tip4 ID_VALIDO) DOS_PUNTOS (BLOCK (ALT (= tip2 tipodato)) (ALT (= tip3 ID_VALIDO))) (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        if $tip3.text != "" {
            $listatstr = instructions.NewStructAtributosConTE2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text, $expr.e)
        }else{                        
            $listatstr = instructions.NewStructAtributosConTE($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo, $expr.e)
        }        
    }else{ 
        if $tip3.text != "" {                        
            $listatstr = instructions.NewStructAtributosConT2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text) 
        }else{            
            $listatstr = instructions.NewStructAtributosConT($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo) 
        }
    }
}) (ALT (= tipo (SET LET VAR)) ID_VALIDO (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        $listatstr = instructions.NewStructAtributosConE($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text, $expr.e)
    }else{
        $listatstr = instructions.NewStructAtributos($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text)
    }
}) (ALT (? (BLOCK (ALT MUTATING))) funciondeclaracioncontrol {
    if $MUTATING != nil{
        //$listatstr = instructions.NewStruckMutatingFunction($funciondeclaracioncontrol.fdc)
    } else {
        //$listatstr = instructions.NewStruckFunction($funciondeclaracioncontrol.fdc)
    }
}))) (RULE structexpr (BLOCK (ALT (SET VAR LET) ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS ID_VALIDO))) IG ID_VALIDO (? (BLOCK (ALT l_dupla))) {}) (ALT (SET VAR LET) ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS ID_VALIDO))) IG (? (BLOCK (ALT ID_VALIDO))) {}) (ALT (SET VAR LET) ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS ID_VALIDO))) IG expr {}))) (RULE l_dupla (BLOCK (ALT (+ (BLOCK (ALT ID_VALIDO DOS_PUNTOS expr))) {}))) (RULE llamadastruct (BLOCK (ALT ID_VALIDO PUNTO ID_VALIDO {}))) (RULE asignacionparametrostruct (BLOCK (ALT ID_VALIDO PUNTO ID_VALIDO IG expr {}))) (RULE llamadafuncionstruct (BLOCK (ALT ID_VALIDO PUNTO ID_VALIDO PARIZQ PARDER {}))) (RULE funciondeclaracioncontrol (returns interfaces.Instruction fdc) (BLOCK (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionRP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER LLAVEIZQ blockinterno LLAVEDER {
   $fdc = instructions.NewFuncionesDeclaracionP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracion($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $blockinterno.blkint)
}))) (RULE listaparametro (returns interfaces.Instruction listparfun) (BLOCK (ALT (? (BLOCK (ALT (= op (SET ID_VALIDO GUIONBAJO))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato COMA (= op3 listaparametro) {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true, true, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true, $op3.listparfun )
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false,$op3.listparfun )
        } 
    }      
}) (ALT (? (BLOCK (ALT (= op (SET ID_VALIDO GUIONBAJO))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true , true)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true)
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false)
    } 
    }
    
}))) (RULE funcionllamadacontrol (BLOCK (ALT ID_VALIDO PARIZQ (? (BLOCK (ALT listaparametrosllamada))) PARIZQ {}))) (RULE listaparametrosllamada (BLOCK (ALT COMA (? (BLOCK (ALT ID_VALIDO DOS_PUNTOS))) (? (BLOCK (ALT '&'))) expr listaparametrosllamada {}) (ALT (? (BLOCK (ALT ID_VALIDO DOS_PUNTOS))) (? (BLOCK (ALT '&'))) expr {}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = instructions.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = instructions.NewFuncionFloatEmbebida($expr.e)}))) (RULE stringembebida (returns interfaces.Expression stremb) (BLOCK (ALT STRING PARIZQ expr PARDER { $stremb = instructions.NewFuncionStringEmbebida($expr.e)})))))
2023-09-03 23:21:32:828 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $matrizcontrol.matct}) (ALT structcontrol { $inst = $structcontrol.struck}) (ALT funciondeclaracioncontrol { $inst = $funciondeclaracioncontrol.fdc}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr {$decvbl = instructions.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = instructions.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = instructions.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = instructions.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = instructions.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = instructions.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = instructions.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = instructions.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}) (ALT stringembebida { $e = $stringembebida.stremb}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = instructions.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = instructions.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = instructions.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = instructions.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = instructions.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=instructions.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = instructions.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = instructions.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = instructions.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = instructions.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN {
    $rect = instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}) (ALT RETURN (= op expr) {
    $rect = instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = instructions.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = instructions.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = instructions.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = instructions.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = instructions.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = instructions.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = instructions.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = instructions.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = instructions.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = instructions.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = instructions.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs { $vepposct = instructions.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER { $vepposct = instructions.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) }) (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = instructions.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE matrizcontrol (returns interfaces.Instruction matct) (BLOCK (ALT VAR ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS tipomatriz))) IG defmatriz {
    if ($DOS_PUNTOS != nil) {
        $matct = instructions.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        $matct = instructions.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }
}))) (RULE tipomatriz (returns interfaces.Expression tipomat) (BLOCK (ALT CORCHIZQ tipomatriz CORCHDER { 
    $tipomat = instructions.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)
}) (ALT CORCHIZQ tipodato CORCHDER { 
    $tipomat = instructions.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)
}))) (RULE defmatriz (returns interfaces.Instruction defmat) (BLOCK (ALT listavaloresmat { $defmat = $listavaloresmat.listvlamat}))) (RULE listavaloresmat (returns interfaces.Instruction listvlamat) (BLOCK (ALT CORCHIZQ listavaloresmat2 CORCHDER { $listvlamat = $listavaloresmat2.mylisttmatt}) (ALT simplematriz { $listvlamat = $simplematriz.simmat}))) (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (= op listavaloresmat2) COMA listavaloresmat { $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}) (ALT listavaloresmat { $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT listaexpresions { $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)}))) (RULE listaexpresions (returns []interface{} blkparf) (@ init {
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= funpar listaexpresion)))) {
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }
}))) (RULE listaexpresion (returns interfaces.Expression funpar) (BLOCK (ALT COMA expr {
    $funpar = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $funpar = instructions.NewArregloParametro($expr.e)
}))) (RULE simplematriz (returns interfaces.Instruction simmat) (BLOCK (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS (= op simplematriz) COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}) (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS expr COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}))) (RULE listamatrizaddsubs (returns []interface{} blklimatas) (@ init {
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= lmas listamatrizaddsub)))) {
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }
}))) (RULE listamatrizaddsub (returns interfaces.Expression lmas) (BLOCK (ALT CORCHIZQ expr CORCHDER {
    $lmas = instructions.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)
}))) (RULE structcontrol (returns interfaces.Instruction struck) (BLOCK (ALT STRUCT ID_VALIDO LLAVEIZQ listaatributos LLAVEDER {
    $struck = instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt);
}))) (RULE listaatributos (returns []interface{} blkstlt) (@ init {
    $blkstlt = []interface{}{}
    var listInt []IListaatributoContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= listatstr listaatributo)))) {
    listInt = localctx.(*ListaatributosContext).GetListatstr()
    for _, e := range listInt {
        $blkstlt = append($blkstlt, e.GetListatstr())
    }
}))) (RULE listaatributo (returns interfaces.Instruction listatstr) (BLOCK (ALT (= tip1 (SET LET VAR)) (= tip4 ID_VALIDO) DOS_PUNTOS (BLOCK (ALT (= tip2 tipodato)) (ALT (= tip3 ID_VALIDO))) (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        if $tip3.text != "" {
            $listatstr = instructions.NewStructAtributosConTE2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text, $expr.e)
        }else{                        
            $listatstr = instructions.NewStructAtributosConTE($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo, $expr.e)
        }        
    }else{ 
        if $tip3.text != "" {                        
            $listatstr = instructions.NewStructAtributosConT2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text) 
        }else{            
            $listatstr = instructions.NewStructAtributosConT($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo) 
        }
    }
}) (ALT (= tipo (SET LET VAR)) ID_VALIDO (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        $listatstr = instructions.NewStructAtributosConE($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text, $expr.e)
    }else{
        $listatstr = instructions.NewStructAtributos($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text)
    }
}) (ALT (? (BLOCK (ALT MUTATING))) funciondeclaracioncontrol {
    if $MUTATING != nil{
        //$listatstr = instructions.NewStruckMutatingFunction($funciondeclaracioncontrol.fdc)
    } else {
        //$listatstr = instructions.NewStruckFunction($funciondeclaracioncontrol.fdc)
    }
}))) (RULE structexpr (BLOCK (ALT (SET VAR LET) ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS ID_VALIDO))) IG ID_VALIDO (? (BLOCK (ALT l_dupla))) {}) (ALT (SET VAR LET) ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS ID_VALIDO))) IG (? (BLOCK (ALT ID_VALIDO))) {}) (ALT (SET VAR LET) ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS ID_VALIDO))) IG expr {}))) (RULE l_dupla (BLOCK (ALT (+ (BLOCK (ALT ID_VALIDO DOS_PUNTOS expr))) {}))) (RULE llamadastruct (BLOCK (ALT ID_VALIDO PUNTO ID_VALIDO {}))) (RULE asignacionparametrostruct (BLOCK (ALT ID_VALIDO PUNTO ID_VALIDO IG expr {}))) (RULE llamadafuncionstruct (BLOCK (ALT ID_VALIDO PUNTO ID_VALIDO PARIZQ PARDER {}))) (RULE funciondeclaracioncontrol (returns interfaces.Instruction fdc) (BLOCK (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionRP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER LLAVEIZQ blockinterno LLAVEDER {
   $fdc = instructions.NewFuncionesDeclaracionP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracion($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $blockinterno.blkint)
}))) (RULE listaparametro (returns interfaces.Instruction listparfun) (BLOCK (ALT (? (BLOCK (ALT (= op (SET ID_VALIDO GUIONBAJO))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato COMA (= op3 listaparametro) {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true, true, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true, $op3.listparfun )
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false,$op3.listparfun )
        } 
    }      
}) (ALT (? (BLOCK (ALT (= op (SET ID_VALIDO GUIONBAJO))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true , true)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true)
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false)
    } 
    }
    
}))) (RULE funcionllamadacontrol (BLOCK (ALT ID_VALIDO PARIZQ (? (BLOCK (ALT listaparametrosllamada))) PARIZQ {}))) (RULE listaparametrosllamada (BLOCK (ALT COMA (? (BLOCK (ALT ID_VALIDO DOS_PUNTOS))) (? (BLOCK (ALT '&'))) expr listaparametrosllamada {}) (ALT (? (BLOCK (ALT ID_VALIDO DOS_PUNTOS))) (? (BLOCK (ALT '&'))) expr {}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = instructions.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = instructions.NewFuncionFloatEmbebida($expr.e)}))) (RULE stringembebida (returns interfaces.Expression stremb) (BLOCK (ALT STRING PARIZQ expr PARDER { $stremb = instructions.NewFuncionStringEmbebida($expr.e)})))))
2023-09-03 23:21:32:828 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE T__0 (BLOCK (ALT '&')))))
2023-09-03 23:21:32:843 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-09-03 23:21:32:939 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op=NOT<tokenIndex=548> right=expr<tokenIndex=552,p=24> { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) } 
        | PARIZQ<tokenIndex=706> expr<tokenIndex=708> PARDER<tokenIndex=710> { $e = $expr.e } 
        | SUB<tokenIndex=716> NUMBER<tokenIndex=718>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    } 
        | NUMBER<tokenIndex=724>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | CADENA<tokenIndex=730>
    {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=736> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=742> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | CHARACTER<tokenIndex=748> 
    { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    } 
        | ID_VALIDO<tokenIndex=753>
    {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    } 
        | NULO<tokenIndex=758> {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)} 
        | vectorvacio<tokenIndex=764> { $e = $vectorvacio.veemct} 
        | vectorcount<tokenIndex=770> { $e = $vectorcount.vecnct} 
        | vectoraccess<tokenIndex=776> { $e = $vectoraccess.vepposct} 
        | intembebida<tokenIndex=782> { $e = $intembebida.intemb} 
        | floatembebida<tokenIndex=788> { $e = $floatembebida.floemb} 
        | stringembebida<tokenIndex=794> { $e = $stringembebida.stremb} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 23)}?<p=23> op=MODULO<tokenIndex=564> right=expr<tokenIndex=568,p=24> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 22)}?<p=22> op=(MUL<tokenIndex=581>|DIV<tokenIndex=583>) right=expr<tokenIndex=588,p=23> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=(ADD<tokenIndex=601>|SUB<tokenIndex=603>) right=expr<tokenIndex=608,p=22> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=(MAY_IG<tokenIndex=621>|MAYOR<tokenIndex=623>) right=expr<tokenIndex=628,p=21> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MEN_IG<tokenIndex=641>|MENOR<tokenIndex=643>) right=expr<tokenIndex=648,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(IG_IG<tokenIndex=661>|DIF<tokenIndex=663>) right=expr<tokenIndex=668,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=AND<tokenIndex=680> right=expr<tokenIndex=684,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=OR<tokenIndex=696> right=expr<tokenIndex=700,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-03 23:21:32:955 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 548)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 552) (= p 24)))) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 706))) (expr (ELEMENT_OPTIONS (= tokenIndex 708))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 710))) { $e = $expr.e }) (ALT (SUB (ELEMENT_OPTIONS (= tokenIndex 716))) (NUMBER (ELEMENT_OPTIONS (= tokenIndex 718))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 724))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (CADENA (ELEMENT_OPTIONS (= tokenIndex 730))) {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 736))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 742))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (CHARACTER (ELEMENT_OPTIONS (= tokenIndex 748))) { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT (ID_VALIDO (ELEMENT_OPTIONS (= tokenIndex 753))) {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT (NULO (ELEMENT_OPTIONS (= tokenIndex 758))) {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT (vectorvacio (ELEMENT_OPTIONS (= tokenIndex 764))) { $e = $vectorvacio.veemct}) (ALT (vectorcount (ELEMENT_OPTIONS (= tokenIndex 770))) { $e = $vectorcount.vecnct}) (ALT (vectoraccess (ELEMENT_OPTIONS (= tokenIndex 776))) { $e = $vectoraccess.vepposct}) (ALT (intembebida (ELEMENT_OPTIONS (= tokenIndex 782))) { $e = $intembebida.intemb}) (ALT (floatembebida (ELEMENT_OPTIONS (= tokenIndex 788))) { $e = $floatembebida.floemb}) (ALT (stringembebida (ELEMENT_OPTIONS (= tokenIndex 794))) { $e = $stringembebida.stremb})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 23)}? (ELEMENT_OPTIONS (= p 23))) (= op (MODULO (ELEMENT_OPTIONS (= tokenIndex 564)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 568) (= p 24)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 22)}? (ELEMENT_OPTIONS (= p 22))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 581))) (DIV (ELEMENT_OPTIONS (= tokenIndex 583))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 588) (= p 23)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 601))) (SUB (ELEMENT_OPTIONS (= tokenIndex 603))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 608) (= p 22)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 621))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 623))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 628) (= p 21)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 641))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 643))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 648) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 661))) (DIF (ELEMENT_OPTIONS (= tokenIndex 663))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 668) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 680)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 684) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 696)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 700) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-03 23:21:32:956 left-recursion LogManager.java:25 listavaloresmat2 returns [interfaces.Instruction mylisttmatt]
    :   ( {} listavaloresmat<tokenIndex=1599> { $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)} 
        | listaexpresions<tokenIndex=1605> { $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1591> listavaloresmat<tokenIndex=1593> { $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}
        )*
    ;
2023-09-03 23:21:32:958 grammar LogManager.java:25 added: (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (BLOCK (ALT {} (listavaloresmat (ELEMENT_OPTIONS (= tokenIndex 1599))) { $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT (listaexpresions (ELEMENT_OPTIONS (= tokenIndex 1605))) { $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1591))) (listavaloresmat (ELEMENT_OPTIONS (= tokenIndex 1593))) { $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}))))))
2023-09-03 23:21:32:974 grammar LogManager.java:25 import INT=1
2023-09-03 23:21:32:975 grammar LogManager.java:25 import FLOAT=2
2023-09-03 23:21:32:975 grammar LogManager.java:25 import STRING=3
2023-09-03 23:21:32:976 grammar LogManager.java:25 import BOOL=4
2023-09-03 23:21:32:976 grammar LogManager.java:25 import CHARACT=5
2023-09-03 23:21:32:976 grammar LogManager.java:25 import TRU=6
2023-09-03 23:21:32:976 grammar LogManager.java:25 import FAL=7
2023-09-03 23:21:32:977 grammar LogManager.java:25 import VAR=8
2023-09-03 23:21:32:977 grammar LogManager.java:25 import LET=9
2023-09-03 23:21:32:977 grammar LogManager.java:25 import NULO=10
2023-09-03 23:21:32:977 grammar LogManager.java:25 import IF=11
2023-09-03 23:21:32:977 grammar LogManager.java:25 import ELSE=12
2023-09-03 23:21:32:977 grammar LogManager.java:25 import SWITCH=13
2023-09-03 23:21:32:977 grammar LogManager.java:25 import CASE=14
2023-09-03 23:21:32:977 grammar LogManager.java:25 import DEFAULT=15
2023-09-03 23:21:32:977 grammar LogManager.java:25 import BREAK=16
2023-09-03 23:21:32:978 grammar LogManager.java:25 import CONTINUE=17
2023-09-03 23:21:32:978 grammar LogManager.java:25 import FOR=18
2023-09-03 23:21:32:978 grammar LogManager.java:25 import IN=19
2023-09-03 23:21:32:978 grammar LogManager.java:25 import RANGO=20
2023-09-03 23:21:32:978 grammar LogManager.java:25 import WHILE=21
2023-09-03 23:21:32:978 grammar LogManager.java:25 import GUARD=22
2023-09-03 23:21:32:978 grammar LogManager.java:25 import RETURN=23
2023-09-03 23:21:32:978 grammar LogManager.java:25 import FUNCION=24
2023-09-03 23:21:32:979 grammar LogManager.java:25 import PRINT=25
2023-09-03 23:21:32:979 grammar LogManager.java:25 import INOUT=26
2023-09-03 23:21:32:979 grammar LogManager.java:25 import APPEND=27
2023-09-03 23:21:32:979 grammar LogManager.java:25 import REMOVE=28
2023-09-03 23:21:32:979 grammar LogManager.java:25 import REMOVELAST=29
2023-09-03 23:21:32:979 grammar LogManager.java:25 import COUNT=30
2023-09-03 23:21:32:979 grammar LogManager.java:25 import ISEMPTY=31
2023-09-03 23:21:32:979 grammar LogManager.java:25 import AT=32
2023-09-03 23:21:32:980 grammar LogManager.java:25 import REPEATING=33
2023-09-03 23:21:32:980 grammar LogManager.java:25 import STRUCT=34
2023-09-03 23:21:32:980 grammar LogManager.java:25 import MUTATING=35
2023-09-03 23:21:32:980 grammar LogManager.java:25 import SELF=36
2023-09-03 23:21:32:980 grammar LogManager.java:25 import NUMBER=37
2023-09-03 23:21:32:980 grammar LogManager.java:25 import CADENA=38
2023-09-03 23:21:32:981 grammar LogManager.java:25 import ID_VALIDO=39
2023-09-03 23:21:32:981 grammar LogManager.java:25 import CHARACTER=40
2023-09-03 23:21:32:981 grammar LogManager.java:25 import WS=41
2023-09-03 23:21:32:981 grammar LogManager.java:25 import IG=42
2023-09-03 23:21:32:981 grammar LogManager.java:25 import DOS_PUNTOS=43
2023-09-03 23:21:32:981 grammar LogManager.java:25 import PUNTOCOMA=44
2023-09-03 23:21:32:981 grammar LogManager.java:25 import CIERRE_INTE=45
2023-09-03 23:21:32:981 grammar LogManager.java:25 import PARIZQ=46
2023-09-03 23:21:32:981 grammar LogManager.java:25 import PARDER=47
2023-09-03 23:21:32:981 grammar LogManager.java:25 import DIF=48
2023-09-03 23:21:32:981 grammar LogManager.java:25 import IG_IG=49
2023-09-03 23:21:32:982 grammar LogManager.java:25 import NOT=50
2023-09-03 23:21:32:982 grammar LogManager.java:25 import OR=51
2023-09-03 23:21:32:982 grammar LogManager.java:25 import AND=52
2023-09-03 23:21:32:982 grammar LogManager.java:25 import MAY_IG=53
2023-09-03 23:21:32:982 grammar LogManager.java:25 import MEN_IG=54
2023-09-03 23:21:32:982 grammar LogManager.java:25 import MAYOR=55
2023-09-03 23:21:32:982 grammar LogManager.java:25 import MENOR=56
2023-09-03 23:21:32:982 grammar LogManager.java:25 import MODULO=57
2023-09-03 23:21:32:982 grammar LogManager.java:25 import MUL=58
2023-09-03 23:21:32:982 grammar LogManager.java:25 import DIV=59
2023-09-03 23:21:32:982 grammar LogManager.java:25 import ADD=60
2023-09-03 23:21:32:982 grammar LogManager.java:25 import SUB=61
2023-09-03 23:21:32:982 grammar LogManager.java:25 import SUMA=62
2023-09-03 23:21:32:982 grammar LogManager.java:25 import RESTA=63
2023-09-03 23:21:32:982 grammar LogManager.java:25 import LLAVEIZQ=64
2023-09-03 23:21:32:982 grammar LogManager.java:25 import LLAVEDER=65
2023-09-03 23:21:32:982 grammar LogManager.java:25 import RETORNO=66
2023-09-03 23:21:32:982 grammar LogManager.java:25 import COMA=67
2023-09-03 23:21:32:982 grammar LogManager.java:25 import PUNTO=68
2023-09-03 23:21:32:982 grammar LogManager.java:25 import GUIONBAJO=69
2023-09-03 23:21:32:982 grammar LogManager.java:25 import CORCHIZQ=70
2023-09-03 23:21:32:982 grammar LogManager.java:25 import CORCHDER=71
2023-09-03 23:21:32:982 grammar LogManager.java:25 import WHITESPACE=72
2023-09-03 23:21:32:982 grammar LogManager.java:25 import COMMENT=73
2023-09-03 23:21:32:982 grammar LogManager.java:25 import LINE_COMMENT=74
2023-09-03 23:21:32:982 grammar LogManager.java:25 import 'Int'=1
2023-09-03 23:21:32:982 grammar LogManager.java:25 import 'Float'=2
2023-09-03 23:21:32:983 grammar LogManager.java:25 import 'String'=3
2023-09-03 23:21:32:983 grammar LogManager.java:25 import 'Bool'=4
2023-09-03 23:21:32:983 grammar LogManager.java:25 import 'Character'=5
2023-09-03 23:21:32:983 grammar LogManager.java:25 import 'true'=6
2023-09-03 23:21:32:983 grammar LogManager.java:25 import 'false'=7
2023-09-03 23:21:32:983 grammar LogManager.java:25 import 'var'=8
2023-09-03 23:21:32:983 grammar LogManager.java:25 import 'let'=9
2023-09-03 23:21:32:983 grammar LogManager.java:25 import 'nil'=10
2023-09-03 23:21:32:983 grammar LogManager.java:25 import 'if'=11
2023-09-03 23:21:32:983 grammar LogManager.java:25 import 'else'=12
2023-09-03 23:21:32:984 grammar LogManager.java:25 import 'switch'=13
2023-09-03 23:21:32:984 grammar LogManager.java:25 import 'case'=14
2023-09-03 23:21:32:984 grammar LogManager.java:25 import 'default'=15
2023-09-03 23:21:32:984 grammar LogManager.java:25 import 'break'=16
2023-09-03 23:21:32:984 grammar LogManager.java:25 import 'continue'=17
2023-09-03 23:21:32:984 grammar LogManager.java:25 import 'for'=18
2023-09-03 23:21:32:984 grammar LogManager.java:25 import 'in'=19
2023-09-03 23:21:32:984 grammar LogManager.java:25 import '...'=20
2023-09-03 23:21:32:984 grammar LogManager.java:25 import 'while'=21
2023-09-03 23:21:32:984 grammar LogManager.java:25 import 'guard'=22
2023-09-03 23:21:32:984 grammar LogManager.java:25 import 'return'=23
2023-09-03 23:21:32:984 grammar LogManager.java:25 import 'func'=24
2023-09-03 23:21:32:984 grammar LogManager.java:25 import 'print'=25
2023-09-03 23:21:32:984 grammar LogManager.java:25 import 'inout'=26
2023-09-03 23:21:32:984 grammar LogManager.java:25 import 'append'=27
2023-09-03 23:21:32:985 grammar LogManager.java:25 import 'remove'=28
2023-09-03 23:21:32:985 grammar LogManager.java:25 import 'removeLast'=29
2023-09-03 23:21:32:985 grammar LogManager.java:25 import 'count'=30
2023-09-03 23:21:32:985 grammar LogManager.java:25 import 'isEmpty'=31
2023-09-03 23:21:32:985 grammar LogManager.java:25 import 'at'=32
2023-09-03 23:21:32:985 grammar LogManager.java:25 import 'repeating'=33
2023-09-03 23:21:32:985 grammar LogManager.java:25 import 'struct'=34
2023-09-03 23:21:32:985 grammar LogManager.java:25 import 'mutating'=35
2023-09-03 23:21:32:985 grammar LogManager.java:25 import 'self'=36
2023-09-03 23:21:32:985 grammar LogManager.java:25 import '='=42
2023-09-03 23:21:32:986 grammar LogManager.java:25 import ':'=43
2023-09-03 23:21:32:986 grammar LogManager.java:25 import ';'=44
2023-09-03 23:21:32:986 grammar LogManager.java:25 import '?'=45
2023-09-03 23:21:32:986 grammar LogManager.java:25 import '('=46
2023-09-03 23:21:32:986 grammar LogManager.java:25 import ')'=47
2023-09-03 23:21:32:986 grammar LogManager.java:25 import '!='=48
2023-09-03 23:21:32:987 grammar LogManager.java:25 import '=='=49
2023-09-03 23:21:32:987 grammar LogManager.java:25 import '!'=50
2023-09-03 23:21:32:987 grammar LogManager.java:25 import '||'=51
2023-09-03 23:21:32:987 grammar LogManager.java:25 import '&&'=52
2023-09-03 23:21:32:987 grammar LogManager.java:25 import '>='=53
2023-09-03 23:21:32:987 grammar LogManager.java:25 import '<='=54
2023-09-03 23:21:32:988 grammar LogManager.java:25 import '>'=55
2023-09-03 23:21:32:988 grammar LogManager.java:25 import '<'=56
2023-09-03 23:21:32:988 grammar LogManager.java:25 import '%'=57
2023-09-03 23:21:32:988 grammar LogManager.java:25 import '*'=58
2023-09-03 23:21:32:988 grammar LogManager.java:25 import '/'=59
2023-09-03 23:21:32:989 grammar LogManager.java:25 import '+'=60
2023-09-03 23:21:32:989 grammar LogManager.java:25 import '-'=61
2023-09-03 23:21:32:989 grammar LogManager.java:25 import '+='=62
2023-09-03 23:21:32:989 grammar LogManager.java:25 import '-='=63
2023-09-03 23:21:32:989 grammar LogManager.java:25 import '{'=64
2023-09-03 23:21:32:990 grammar LogManager.java:25 import '}'=65
2023-09-03 23:21:32:990 grammar LogManager.java:25 import '->'=66
2023-09-03 23:21:32:990 grammar LogManager.java:25 import ','=67
2023-09-03 23:21:32:990 grammar LogManager.java:25 import '.'=68
2023-09-03 23:21:32:990 grammar LogManager.java:25 import '_'=69
2023-09-03 23:21:32:990 grammar LogManager.java:25 import '['=70
2023-09-03 23:21:32:990 grammar LogManager.java:25 import ']'=71
2023-09-03 23:21:32:991 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, STRING=3, BOOL=4, CHARACT=5, TRU=6, FAL=7, VAR=8, LET=9, NULO=10, IF=11, ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, BREAK=16, CONTINUE=17, FOR=18, IN=19, RANGO=20, WHILE=21, GUARD=22, RETURN=23, FUNCION=24, PRINT=25, INOUT=26, APPEND=27, REMOVE=28, REMOVELAST=29, COUNT=30, ISEMPTY=31, AT=32, REPEATING=33, STRUCT=34, MUTATING=35, SELF=36, NUMBER=37, CADENA=38, ID_VALIDO=39, CHARACTER=40, WS=41, IG=42, DOS_PUNTOS=43, PUNTOCOMA=44, CIERRE_INTE=45, PARIZQ=46, PARDER=47, DIF=48, IG_IG=49, NOT=50, OR=51, AND=52, MAY_IG=53, MEN_IG=54, MAYOR=55, MENOR=56, MODULO=57, MUL=58, DIV=59, ADD=60, SUB=61, SUMA=62, RESTA=63, LLAVEIZQ=64, LLAVEDER=65, RETORNO=66, COMA=67, PUNTO=68, GUIONBAJO=69, CORCHIZQ=70, CORCHDER=71, WHITESPACE=72, COMMENT=73, LINE_COMMENT=74, 'Int'=1, 'Float'=2, 'String'=3, 'Bool'=4, 'Character'=5, 'true'=6, 'false'=7, 'var'=8, 'let'=9, 'nil'=10, 'if'=11, 'else'=12, 'switch'=13, 'case'=14, 'default'=15, 'break'=16, 'continue'=17, 'for'=18, 'in'=19, '...'=20, 'while'=21, 'guard'=22, 'return'=23, 'func'=24, 'print'=25, 'inout'=26, 'append'=27, 'remove'=28, 'removeLast'=29, 'count'=30, 'isEmpty'=31, 'at'=32, 'repeating'=33, 'struct'=34, 'mutating'=35, 'self'=36, '='=42, ':'=43, ';'=44, '?'=45, '('=46, ')'=47, '!='=48, '=='=49, '!'=50, '||'=51, '&&'=52, '>='=53, '<='=54, '>'=55, '<'=56, '%'=57, '*'=58, '/'=59, '+'=60, '-'=61, '+='=62, '-='=63, '{'=64, '}'=65, '->'=66, ','=67, '.'=68, '_'=69, '['=70, ']'=71}
2023-09-03 23:21:32:992 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, INT=1, FLOAT=2, STRING=3, BOOL=4, CHARACT=5, TRU=6, FAL=7, VAR=8, LET=9, NULO=10, IF=11, ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, BREAK=16, CONTINUE=17, FOR=18, IN=19, RANGO=20, WHILE=21, GUARD=22, RETURN=23, FUNCION=24, PRINT=25, INOUT=26, APPEND=27, REMOVE=28, REMOVELAST=29, COUNT=30, ISEMPTY=31, AT=32, REPEATING=33, STRUCT=34, MUTATING=35, SELF=36, NUMBER=37, CADENA=38, ID_VALIDO=39, CHARACTER=40, WS=41, IG=42, DOS_PUNTOS=43, PUNTOCOMA=44, CIERRE_INTE=45, PARIZQ=46, PARDER=47, DIF=48, IG_IG=49, NOT=50, OR=51, AND=52, MAY_IG=53, MEN_IG=54, MAYOR=55, MENOR=56, MODULO=57, MUL=58, DIV=59, ADD=60, SUB=61, SUMA=62, RESTA=63, LLAVEIZQ=64, LLAVEDER=65, RETORNO=66, COMA=67, PUNTO=68, GUIONBAJO=69, CORCHIZQ=70, CORCHDER=71, WHITESPACE=72, COMMENT=73, LINE_COMMENT=74}
2023-09-03 23:21:32:992 semantics LogManager.java:25 strings={'&'=1, 'Int'=1, 'Float'=2, 'String'=3, 'Bool'=4, 'Character'=5, 'true'=6, 'false'=7, 'var'=8, 'let'=9, 'nil'=10, 'if'=11, 'else'=12, 'switch'=13, 'case'=14, 'default'=15, 'break'=16, 'continue'=17, 'for'=18, 'in'=19, '...'=20, 'while'=21, 'guard'=22, 'return'=23, 'func'=24, 'print'=25, 'inout'=26, 'append'=27, 'remove'=28, 'removeLast'=29, 'count'=30, 'isEmpty'=31, 'at'=32, 'repeating'=33, 'struct'=34, 'mutating'=35, 'self'=36, '='=42, ':'=43, ';'=44, '?'=45, '('=46, ')'=47, '!='=48, '=='=49, '!'=50, '||'=51, '&&'=52, '>='=53, '<='=54, '>'=55, '<'=56, '%'=57, '*'=58, '/'=59, '+'=60, '-'=61, '+='=62, '-='=63, '{'=64, '}'=65, '->'=66, ','=67, '.'=68, '_'=69, '['=70, ']'=71}
2023-09-03 23:21:33:050 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-03 23:21:33:051 LL1 LogManager.java:25 look=[{8..9, 11, 13, 18, 21..22, 24..25, 34, 39}, <EOF>]
2023-09-03 23:21:33:051 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:051 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-03 23:21:33:052 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-03 23:21:33:052 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:053 LL1 LogManager.java:25 
DECISION 2 in rule instruction
2023-09-03 23:21:33:053 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-03 23:21:33:053 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:053 LL1 LogManager.java:25 
DECISION 3 in rule instruction
2023-09-03 23:21:33:053 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-03 23:21:33:053 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:054 LL1 LogManager.java:25 
DECISION 4 in rule instruction
2023-09-03 23:21:33:054 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-03 23:21:33:054 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:054 LL1 LogManager.java:25 
DECISION 5 in rule instruction
2023-09-03 23:21:33:054 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-03 23:21:33:054 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:054 LL1 LogManager.java:25 
DECISION 6 in rule instruction
2023-09-03 23:21:33:054 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-03 23:21:33:054 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:054 LL1 LogManager.java:25 
DECISION 7 in rule instruction
2023-09-03 23:21:33:055 LL1 LogManager.java:25 look=[8, 9, 39, 11, 13, 21, 18, 22, 8, 39, 39, 25, 8, 34, 24]
2023-09-03 23:21:33:055 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:055 LL1 LogManager.java:25 
DECISION 8 in rule blockinterno
2023-09-03 23:21:33:056 LL1 LogManager.java:25 look=[{8..9, 11, 13, 16..18, 21..23, 25, 39}, {14..15, 65}]
2023-09-03 23:21:33:056 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:056 LL1 LogManager.java:25 
DECISION 9 in rule instructionint
2023-09-03 23:21:33:056 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-03 23:21:33:056 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:056 LL1 LogManager.java:25 
DECISION 10 in rule instructionint
2023-09-03 23:21:33:056 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-03 23:21:33:056 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:056 LL1 LogManager.java:25 
DECISION 11 in rule instructionint
2023-09-03 23:21:33:057 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-03 23:21:33:057 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:057 LL1 LogManager.java:25 
DECISION 12 in rule instructionint
2023-09-03 23:21:33:057 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-03 23:21:33:057 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:058 LL1 LogManager.java:25 
DECISION 13 in rule instructionint
2023-09-03 23:21:33:058 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-03 23:21:33:058 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:058 LL1 LogManager.java:25 
DECISION 14 in rule instructionint
2023-09-03 23:21:33:058 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-03 23:21:33:058 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:058 LL1 LogManager.java:25 
DECISION 15 in rule instructionint
2023-09-03 23:21:33:059 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-03 23:21:33:059 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:059 LL1 LogManager.java:25 
DECISION 16 in rule instructionint
2023-09-03 23:21:33:059 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-03 23:21:33:059 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:060 LL1 LogManager.java:25 
DECISION 17 in rule instructionint
2023-09-03 23:21:33:060 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-03 23:21:33:060 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:060 LL1 LogManager.java:25 
DECISION 18 in rule instructionint
2023-09-03 23:21:33:060 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-03 23:21:33:060 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:061 LL1 LogManager.java:25 
DECISION 19 in rule instructionint
2023-09-03 23:21:33:061 LL1 LogManager.java:25 look=[8, 9, 39, 11, 13, 21, 18, 22, 17, 16, 23, 8, 39, 39, 25]
2023-09-03 23:21:33:061 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:061 LL1 LogManager.java:25 
DECISION 20 in rule declavarible
2023-09-03 23:21:33:061 LL1 LogManager.java:25 look=[8, 8, 8]
2023-09-03 23:21:33:061 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:061 LL1 LogManager.java:25 
DECISION 21 in rule declaconstante
2023-09-03 23:21:33:061 LL1 LogManager.java:25 look=[9, 9]
2023-09-03 23:21:33:062 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:062 LL1 LogManager.java:25 
DECISION 22 in rule asignacionvariable
2023-09-03 23:21:33:062 LL1 LogManager.java:25 look=[39, 39, 39]
2023-09-03 23:21:33:062 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:062 LL1 LogManager.java:25 
DECISION 23 in rule tipodato
2023-09-03 23:21:33:062 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5]
2023-09-03 23:21:33:062 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:062 LL1 LogManager.java:25 
DECISION 24 in rule expr
2023-09-03 23:21:33:062 LL1 LogManager.java:25 look=[50, 46, 61, 37, 38, 6, 7, 40, 39, 10, 39, 39, 39, 1, 2, 3]
2023-09-03 23:21:33:062 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:062 LL1 LogManager.java:25 
DECISION 25 in rule expr
2023-09-03 23:21:33:063 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null]
2023-09-03 23:21:33:063 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:063 LL1 LogManager.java:25 
DECISION 26 in rule expr
2023-09-03 23:21:33:063 LL1 LogManager.java:25 look=[null, null]
2023-09-03 23:21:33:063 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:063 LL1 LogManager.java:25 
DECISION 27 in rule sentenciaifelse
2023-09-03 23:21:33:063 LL1 LogManager.java:25 look=[11, 11, 11]
2023-09-03 23:21:33:063 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:063 LL1 LogManager.java:25 
DECISION 28 in rule switchcontrol
2023-09-03 23:21:33:064 LL1 LogManager.java:25 look=[15, 65]
2023-09-03 23:21:33:064 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:064 LL1 LogManager.java:25 
DECISION 29 in rule blockcase
2023-09-03 23:21:33:064 LL1 LogManager.java:25 look=[14, {15, 65}]
2023-09-03 23:21:33:064 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:064 LL1 LogManager.java:25 
DECISION 30 in rule forcontrol
2023-09-03 23:21:33:064 LL1 LogManager.java:25 look=[18, 18]
2023-09-03 23:21:33:064 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:064 LL1 LogManager.java:25 
DECISION 31 in rule retornos
2023-09-03 23:21:33:064 LL1 LogManager.java:25 look=[23, 23]
2023-09-03 23:21:33:064 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:064 LL1 LogManager.java:25 
DECISION 32 in rule vectorcontrol
2023-09-03 23:21:33:064 LL1 LogManager.java:25 look=[8, 8, 8]
2023-09-03 23:21:33:064 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:064 LL1 LogManager.java:25 
DECISION 33 in rule blockparams
2023-09-03 23:21:33:064 LL1 LogManager.java:25 look=[{1..3, 6..7, 10, 37..40, 46, 50, 61, 67}, 71]
2023-09-03 23:21:33:064 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:065 LL1 LogManager.java:25 
DECISION 34 in rule bloqueparams
2023-09-03 23:21:33:065 LL1 LogManager.java:25 look=[67, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-03 23:21:33:065 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:065 LL1 LogManager.java:25 
DECISION 35 in rule vectoragregar
2023-09-03 23:21:33:066 LL1 LogManager.java:25 look=[39, 39, 39, 39, 39]
2023-09-03 23:21:33:066 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:066 LL1 LogManager.java:25 
DECISION 36 in rule vectorremover
2023-09-03 23:21:33:066 LL1 LogManager.java:25 look=[39, 39]
2023-09-03 23:21:33:066 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:066 LL1 LogManager.java:25 
DECISION 37 in rule vectoraccess
2023-09-03 23:21:33:066 LL1 LogManager.java:25 look=[39, 39, 39]
2023-09-03 23:21:33:066 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:067 LL1 LogManager.java:25 
DECISION 38 in rule matrizcontrol
2023-09-03 23:21:33:067 LL1 LogManager.java:25 look=[43, 42]
2023-09-03 23:21:33:067 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:067 LL1 LogManager.java:25 
DECISION 39 in rule tipomatriz
2023-09-03 23:21:33:067 LL1 LogManager.java:25 look=[70, 70]
2023-09-03 23:21:33:067 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:067 LL1 LogManager.java:25 
DECISION 40 in rule listavaloresmat
2023-09-03 23:21:33:067 LL1 LogManager.java:25 look=[70, 70]
2023-09-03 23:21:33:067 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:067 LL1 LogManager.java:25 
DECISION 41 in rule listavaloresmat2
2023-09-03 23:21:33:067 LL1 LogManager.java:25 look=[70, {1..3, 6..7, 10, 37..40, 46, 50, 61, 67}]
2023-09-03 23:21:33:067 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:067 LL1 LogManager.java:25 
DECISION 42 in rule listavaloresmat2
2023-09-03 23:21:33:067 LL1 LogManager.java:25 look=[null, 71]
2023-09-03 23:21:33:067 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:067 LL1 LogManager.java:25 
DECISION 43 in rule listaexpresions
2023-09-03 23:21:33:068 LL1 LogManager.java:25 look=[{1..3, 6..7, 10, 37..40, 46, 50, 61, 67}, null]
2023-09-03 23:21:33:068 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:068 LL1 LogManager.java:25 
DECISION 44 in rule listaexpresion
2023-09-03 23:21:33:068 LL1 LogManager.java:25 look=[67, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-03 23:21:33:068 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:068 LL1 LogManager.java:25 
DECISION 45 in rule simplematriz
2023-09-03 23:21:33:068 LL1 LogManager.java:25 look=[70, 70]
2023-09-03 23:21:33:068 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:068 LL1 LogManager.java:25 
DECISION 46 in rule listamatrizaddsubs
2023-09-03 23:21:33:068 LL1 LogManager.java:25 look=[70, null]
2023-09-03 23:21:33:068 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:069 LL1 LogManager.java:25 
DECISION 47 in rule listaatributos
2023-09-03 23:21:33:069 LL1 LogManager.java:25 look=[{8..9, 24, 35}, 65]
2023-09-03 23:21:33:069 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:069 LL1 LogManager.java:25 
DECISION 48 in rule listaatributo
2023-09-03 23:21:33:069 LL1 LogManager.java:25 look=[{1..5}, 39]
2023-09-03 23:21:33:069 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:069 LL1 LogManager.java:25 
DECISION 49 in rule listaatributo
2023-09-03 23:21:33:069 LL1 LogManager.java:25 look=[42, {8..9, 24, 35, 44, 65}]
2023-09-03 23:21:33:069 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:069 LL1 LogManager.java:25 
DECISION 50 in rule listaatributo
2023-09-03 23:21:33:069 LL1 LogManager.java:25 look=[44, {8..9, 24, 35, 65}]
2023-09-03 23:21:33:069 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:069 LL1 LogManager.java:25 
DECISION 51 in rule listaatributo
2023-09-03 23:21:33:069 LL1 LogManager.java:25 look=[42, {8..9, 24, 35, 44, 65}]
2023-09-03 23:21:33:069 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:069 LL1 LogManager.java:25 
DECISION 52 in rule listaatributo
2023-09-03 23:21:33:069 LL1 LogManager.java:25 look=[44, {8..9, 24, 35, 65}]
2023-09-03 23:21:33:070 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:070 LL1 LogManager.java:25 
DECISION 53 in rule listaatributo
2023-09-03 23:21:33:070 LL1 LogManager.java:25 look=[35, 24]
2023-09-03 23:21:33:070 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:070 LL1 LogManager.java:25 
DECISION 54 in rule listaatributo
2023-09-03 23:21:33:070 LL1 LogManager.java:25 look=[{8..9}, {8..9}, {24, 35}]
2023-09-03 23:21:33:070 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:070 LL1 LogManager.java:25 
DECISION 55 in rule structexpr
2023-09-03 23:21:33:070 LL1 LogManager.java:25 look=[43, 42]
2023-09-03 23:21:33:070 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:070 LL1 LogManager.java:25 
DECISION 56 in rule structexpr
2023-09-03 23:21:33:070 LL1 LogManager.java:25 look=[39, <EOF>]
2023-09-03 23:21:33:070 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:070 LL1 LogManager.java:25 
DECISION 57 in rule structexpr
2023-09-03 23:21:33:071 LL1 LogManager.java:25 look=[43, 42]
2023-09-03 23:21:33:071 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:071 LL1 LogManager.java:25 
DECISION 58 in rule structexpr
2023-09-03 23:21:33:071 LL1 LogManager.java:25 look=[39, <EOF>]
2023-09-03 23:21:33:071 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:071 LL1 LogManager.java:25 
DECISION 59 in rule structexpr
2023-09-03 23:21:33:071 LL1 LogManager.java:25 look=[43, 42]
2023-09-03 23:21:33:071 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:071 LL1 LogManager.java:25 
DECISION 60 in rule structexpr
2023-09-03 23:21:33:071 LL1 LogManager.java:25 look=[{8..9}, {8..9}, {8..9}]
2023-09-03 23:21:33:071 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:071 LL1 LogManager.java:25 
DECISION 61 in rule l_dupla
2023-09-03 23:21:33:071 LL1 LogManager.java:25 look=[39, <EOF>]
2023-09-03 23:21:33:071 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:071 LL1 LogManager.java:25 
DECISION 62 in rule funciondeclaracioncontrol
2023-09-03 23:21:33:071 LL1 LogManager.java:25 look=[24, 24, 24, 24]
2023-09-03 23:21:33:071 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:071 LL1 LogManager.java:25 
DECISION 63 in rule listaparametro
2023-09-03 23:21:33:071 LL1 LogManager.java:25 look=[{39, 69}, 39]
2023-09-03 23:21:33:071 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:071 LL1 LogManager.java:25 
DECISION 64 in rule listaparametro
2023-09-03 23:21:33:071 LL1 LogManager.java:25 look=[26, {1..5}]
2023-09-03 23:21:33:071 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:071 LL1 LogManager.java:25 
DECISION 65 in rule listaparametro
2023-09-03 23:21:33:071 LL1 LogManager.java:25 look=[{39, 69}, 39]
2023-09-03 23:21:33:071 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:071 LL1 LogManager.java:25 
DECISION 66 in rule listaparametro
2023-09-03 23:21:33:071 LL1 LogManager.java:25 look=[26, {1..5}]
2023-09-03 23:21:33:071 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:071 LL1 LogManager.java:25 
DECISION 67 in rule listaparametro
2023-09-03 23:21:33:071 LL1 LogManager.java:25 look=[{39, 69}, {39, 69}]
2023-09-03 23:21:33:071 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:071 LL1 LogManager.java:25 
DECISION 68 in rule funcionllamadacontrol
2023-09-03 23:21:33:071 LL1 LogManager.java:25 look=[{1..3, 6..7, 10, 37..40, 46, 50, 61, 67}, 46]
2023-09-03 23:21:33:071 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:071 LL1 LogManager.java:25 
DECISION 69 in rule listaparametrosllamada
2023-09-03 23:21:33:071 LL1 LogManager.java:25 look=[39, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-03 23:21:33:071 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:071 LL1 LogManager.java:25 
DECISION 70 in rule listaparametrosllamada
2023-09-03 23:21:33:071 LL1 LogManager.java:25 look=[1, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-03 23:21:33:071 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:072 LL1 LogManager.java:25 
DECISION 71 in rule listaparametrosllamada
2023-09-03 23:21:33:072 LL1 LogManager.java:25 look=[39, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-03 23:21:33:072 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:072 LL1 LogManager.java:25 
DECISION 72 in rule listaparametrosllamada
2023-09-03 23:21:33:072 LL1 LogManager.java:25 look=[1, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-03 23:21:33:072 LL1 LogManager.java:25 LL(1)? false
2023-09-03 23:21:33:072 LL1 LogManager.java:25 
DECISION 73 in rule listaparametrosllamada
2023-09-03 23:21:33:072 LL1 LogManager.java:25 look=[67, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-03 23:21:33:072 LL1 LogManager.java:25 LL(1)? true
2023-09-03 23:21:33:072 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-09-03 23:21:33:086 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-09-03 23:21:33:086 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,18:9]
2023-09-03 23:21:33:087 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,18:17].[@-1,28:30='blk',<0>,18:23]
2023-09-03 23:21:33:088 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-03 23:21:33:088 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,24:5]
2023-09-03 23:21:33:089 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-09-03 23:21:33:089 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,31:13]
2023-09-03 23:21:33:089 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,31:27]
2023-09-03 23:21:33:091 action-translator LogManager.java:25 translate  $inst = $declavarible.decvbl
2023-09-03 23:21:33:091 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,38:30]
2023-09-03 23:21:33:091 action-translator LogManager.java:25 qattr [@-1,10:21='declavarible',<0>,38:38].[@-1,23:28='decvbl',<0>,38:51]
2023-09-03 23:21:33:091 action-translator LogManager.java:25 translate  $inst = $declaconstante.deccon
2023-09-03 23:21:33:091 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:32]
2023-09-03 23:21:33:091 action-translator LogManager.java:25 qattr [@-1,10:23='declaconstante',<0>,39:40].[@-1,25:30='deccon',<0>,39:55]
2023-09-03 23:21:33:092 action-translator LogManager.java:25 translate  $inst = $asignacionvariable.asgvbl
2023-09-03 23:21:33:092 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:36]
2023-09-03 23:21:33:092 action-translator LogManager.java:25 qattr [@-1,10:27='asignacionvariable',<0>,40:44].[@-1,29:34='asgvbl',<0>,40:63]
2023-09-03 23:21:33:092 action-translator LogManager.java:25 translate  $inst = $sentenciaifelse.myIfElse
2023-09-03 23:21:33:092 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-09-03 23:21:33:092 action-translator LogManager.java:25 qattr [@-1,10:24='sentenciaifelse',<0>,41:28].[@-1,26:33='myIfElse',<0>,41:44]
2023-09-03 23:21:33:093 action-translator LogManager.java:25 translate  $inst = $switchcontrol.mySwitch
2023-09-03 23:21:33:093 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:18]
2023-09-03 23:21:33:093 action-translator LogManager.java:25 qattr [@-1,10:22='switchcontrol',<0>,42:26].[@-1,24:31='mySwitch',<0>,42:40]
2023-09-03 23:21:33:093 action-translator LogManager.java:25 translate  $inst = $whilecontrol.whict
2023-09-03 23:21:33:093 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:17]
2023-09-03 23:21:33:093 action-translator LogManager.java:25 qattr [@-1,10:21='whilecontrol',<0>,43:25].[@-1,23:27='whict',<0>,43:38]
2023-09-03 23:21:33:093 action-translator LogManager.java:25 translate  $inst = $forcontrol.forct
2023-09-03 23:21:33:093 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:15]
2023-09-03 23:21:33:093 action-translator LogManager.java:25 qattr [@-1,10:19='forcontrol',<0>,44:23].[@-1,21:25='forct',<0>,44:34]
2023-09-03 23:21:33:093 action-translator LogManager.java:25 translate  $inst = $guardcontrol.guct
2023-09-03 23:21:33:093 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:17]
2023-09-03 23:21:33:093 action-translator LogManager.java:25 qattr [@-1,10:21='guardcontrol',<0>,45:25].[@-1,23:26='guct',<0>,45:38]
2023-09-03 23:21:33:093 action-translator LogManager.java:25 translate  $inst = $vectorcontrol.vect 
2023-09-03 23:21:33:093 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:31]
2023-09-03 23:21:33:094 action-translator LogManager.java:25 qattr [@-1,10:22='vectorcontrol',<0>,46:39].[@-1,24:27='vect',<0>,46:53]
2023-09-03 23:21:33:094 action-translator LogManager.java:25 translate  $inst = $vectoragregar.veadct 
2023-09-03 23:21:33:094 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:19]
2023-09-03 23:21:33:094 action-translator LogManager.java:25 qattr [@-1,10:22='vectoragregar',<0>,47:27].[@-1,24:29='veadct',<0>,47:41]
2023-09-03 23:21:33:094 action-translator LogManager.java:25 translate  $inst = $vectorremover.vermct 
2023-09-03 23:21:33:094 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:19]
2023-09-03 23:21:33:094 action-translator LogManager.java:25 qattr [@-1,10:22='vectorremover',<0>,48:27].[@-1,24:29='vermct',<0>,48:41]
2023-09-03 23:21:33:094 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-03 23:21:33:094 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:27]
2023-09-03 23:21:33:094 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,49:35].[@-1,20:23='prnt',<0>,49:45]
2023-09-03 23:21:33:094 action-translator LogManager.java:25 translate  $inst = $matrizcontrol.matct
2023-09-03 23:21:33:094 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,50:31]
2023-09-03 23:21:33:094 action-translator LogManager.java:25 qattr [@-1,10:22='matrizcontrol',<0>,50:39].[@-1,24:28='matct',<0>,50:53]
2023-09-03 23:21:33:096 action-translator LogManager.java:25 translate  $inst = $structcontrol.struck
2023-09-03 23:21:33:096 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,51:18]
2023-09-03 23:21:33:096 action-translator LogManager.java:25 qattr [@-1,10:22='structcontrol',<0>,51:26].[@-1,24:29='struck',<0>,51:40]
2023-09-03 23:21:33:096 action-translator LogManager.java:25 translate  $inst = $funciondeclaracioncontrol.fdc
2023-09-03 23:21:33:096 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,52:30]
2023-09-03 23:21:33:096 action-translator LogManager.java:25 qattr [@-1,10:34='funciondeclaracioncontrol',<0>,52:38].[@-1,36:38='fdc',<0>,52:64]
2023-09-03 23:21:33:097 action-translator LogManager.java:25 translate 
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  
2023-09-03 23:21:33:097 action-translator LogManager.java:25 attr [@-1,7:12='blkint',<0>,58:5]
2023-09-03 23:21:33:097 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    
2023-09-03 23:21:33:097 action-translator LogManager.java:25 attr [@-1,115:120='blkint',<0>,65:13]
2023-09-03 23:21:33:097 action-translator LogManager.java:25 attr [@-1,132:137='blkint',<0>,65:30]
2023-09-03 23:21:33:100 action-translator LogManager.java:25 translate  $insint = $declavarible.decvbl
2023-09-03 23:21:33:100 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,73:30]
2023-09-03 23:21:33:100 action-translator LogManager.java:25 qattr [@-1,12:23='declavarible',<0>,73:40].[@-1,25:30='decvbl',<0>,73:53]
2023-09-03 23:21:33:100 action-translator LogManager.java:25 translate  $insint = $declaconstante.deccon
2023-09-03 23:21:33:100 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,74:32]
2023-09-03 23:21:33:100 action-translator LogManager.java:25 qattr [@-1,12:25='declaconstante',<0>,74:42].[@-1,27:32='deccon',<0>,74:57]
2023-09-03 23:21:33:100 action-translator LogManager.java:25 translate  $insint = $asignacionvariable.asgvbl
2023-09-03 23:21:33:100 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,75:36]
2023-09-03 23:21:33:100 action-translator LogManager.java:25 qattr [@-1,12:29='asignacionvariable',<0>,75:46].[@-1,31:36='asgvbl',<0>,75:65]
2023-09-03 23:21:33:100 action-translator LogManager.java:25 translate  $insint = $sentenciaifelse.myIfElse
2023-09-03 23:21:33:100 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,76:20]
2023-09-03 23:21:33:100 action-translator LogManager.java:25 qattr [@-1,12:26='sentenciaifelse',<0>,76:30].[@-1,28:35='myIfElse',<0>,76:46]
2023-09-03 23:21:33:100 action-translator LogManager.java:25 translate  $insint = $switchcontrol.mySwitch
2023-09-03 23:21:33:101 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,77:18]
2023-09-03 23:21:33:101 action-translator LogManager.java:25 qattr [@-1,12:24='switchcontrol',<0>,77:28].[@-1,26:33='mySwitch',<0>,77:42]
2023-09-03 23:21:33:101 action-translator LogManager.java:25 translate  $insint = $whilecontrol.whict
2023-09-03 23:21:33:101 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,78:17]
2023-09-03 23:21:33:101 action-translator LogManager.java:25 qattr [@-1,12:23='whilecontrol',<0>,78:27].[@-1,25:29='whict',<0>,78:40]
2023-09-03 23:21:33:101 action-translator LogManager.java:25 translate  $insint = $forcontrol.forct
2023-09-03 23:21:33:101 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,79:15]
2023-09-03 23:21:33:101 action-translator LogManager.java:25 qattr [@-1,12:21='forcontrol',<0>,79:25].[@-1,23:27='forct',<0>,79:36]
2023-09-03 23:21:33:101 action-translator LogManager.java:25 translate  $insint = $guardcontrol.guct
2023-09-03 23:21:33:101 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,80:17]
2023-09-03 23:21:33:101 action-translator LogManager.java:25 qattr [@-1,12:23='guardcontrol',<0>,80:27].[@-1,25:28='guct',<0>,80:40]
2023-09-03 23:21:33:102 action-translator LogManager.java:25 translate  $insint = $continuee.coct
2023-09-03 23:21:33:102 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,81:27]
2023-09-03 23:21:33:102 action-translator LogManager.java:25 qattr [@-1,12:20='continuee',<0>,81:37].[@-1,22:25='coct',<0>,81:47]
2023-09-03 23:21:33:102 action-translator LogManager.java:25 translate  $insint = $breakk.brkct
2023-09-03 23:21:33:103 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,82:24]
2023-09-03 23:21:33:103 action-translator LogManager.java:25 qattr [@-1,12:17='breakk',<0>,82:34].[@-1,19:23='brkct',<0>,82:41]
2023-09-03 23:21:33:103 action-translator LogManager.java:25 translate  $insint = $retornos.rect 
2023-09-03 23:21:33:103 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,83:26]
2023-09-03 23:21:33:103 action-translator LogManager.java:25 qattr [@-1,12:19='retornos',<0>,83:36].[@-1,21:24='rect',<0>,83:45]
2023-09-03 23:21:33:103 action-translator LogManager.java:25 translate  $insint = $vectorcontrol.vect 
2023-09-03 23:21:33:103 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,84:31]
2023-09-03 23:21:33:103 action-translator LogManager.java:25 qattr [@-1,12:24='vectorcontrol',<0>,84:41].[@-1,26:29='vect',<0>,84:55]
2023-09-03 23:21:33:104 action-translator LogManager.java:25 translate  $insint = $vectoragregar.veadct 
2023-09-03 23:21:33:104 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,85:32]
2023-09-03 23:21:33:104 action-translator LogManager.java:25 qattr [@-1,12:24='vectoragregar',<0>,85:42].[@-1,26:31='veadct',<0>,85:56]
2023-09-03 23:21:33:104 action-translator LogManager.java:25 translate  $insint = $vectorremover.vermct 
2023-09-03 23:21:33:104 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,86:31]
2023-09-03 23:21:33:104 action-translator LogManager.java:25 qattr [@-1,12:24='vectorremover',<0>,86:41].[@-1,26:31='vermct',<0>,86:55]
2023-09-03 23:21:33:104 action-translator LogManager.java:25 translate  $insint = $printstmt.prnt
2023-09-03 23:21:33:104 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,87:27]
2023-09-03 23:21:33:104 action-translator LogManager.java:25 qattr [@-1,12:20='printstmt',<0>,87:37].[@-1,22:25='prnt',<0>,87:47]
2023-09-03 23:21:33:105 action-translator LogManager.java:25 translate $decvbl = instructions.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)
2023-09-03 23:21:33:105 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,98:44]
2023-09-03 23:21:33:105 action-translator LogManager.java:25 qattr [@-1,47:49='VAR',<0>,98:90].[@-1,51:54='line',<0>,98:94]
2023-09-03 23:21:33:106 action-translator LogManager.java:25 qattr [@-1,58:60='VAR',<0>,98:101].[@-1,62:64='pos',<0>,98:105]
2023-09-03 23:21:33:107 action-translator LogManager.java:25 qattr [@-1,68:76='ID_VALIDO',<0>,98:111].[@-1,78:81='text',<0>,98:121]
2023-09-03 23:21:33:107 action-translator LogManager.java:25 qattr [@-1,85:92='tipodato',<0>,98:128].[@-1,94:97='tipo',<0>,98:137]
2023-09-03 23:21:33:107 action-translator LogManager.java:25 qattr [@-1,101:104='expr',<0>,98:144].[@-1,106:106='e',<0>,98:149]
2023-09-03 23:21:33:107 action-translator LogManager.java:25 translate $decvbl = instructions.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)
2023-09-03 23:21:33:107 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,99:25]
2023-09-03 23:21:33:107 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,99:78].[@-1,58:61='line',<0>,99:82]
2023-09-03 23:21:33:107 action-translator LogManager.java:25 qattr [@-1,65:67='VAR',<0>,99:89].[@-1,69:71='pos',<0>,99:93]
2023-09-03 23:21:33:107 action-translator LogManager.java:25 qattr [@-1,75:83='ID_VALIDO',<0>,99:99].[@-1,85:88='text',<0>,99:109]
2023-09-03 23:21:33:107 action-translator LogManager.java:25 qattr [@-1,92:95='expr',<0>,99:116].[@-1,97:97='e',<0>,99:121]
2023-09-03 23:21:33:107 action-translator LogManager.java:25 translate $decvbl = instructions.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)
2023-09-03 23:21:33:107 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,100:49]
2023-09-03 23:21:33:107 action-translator LogManager.java:25 qattr [@-1,53:55='VAR',<0>,100:101].[@-1,57:60='line',<0>,100:105]
2023-09-03 23:21:33:107 action-translator LogManager.java:25 qattr [@-1,64:66='VAR',<0>,100:112].[@-1,68:70='pos',<0>,100:116]
2023-09-03 23:21:33:108 action-translator LogManager.java:25 qattr [@-1,74:82='ID_VALIDO',<0>,100:122].[@-1,84:87='text',<0>,100:132]
2023-09-03 23:21:33:108 action-translator LogManager.java:25 qattr [@-1,91:98='tipodato',<0>,100:139].[@-1,100:103='tipo',<0>,100:148]
2023-09-03 23:21:33:108 action-translator LogManager.java:25 translate $deccon = instructions.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)
2023-09-03 23:21:33:108 action-translator LogManager.java:25 attr [@-1,1:6='deccon',<0>,104:45]
2023-09-03 23:21:33:108 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,104:92].[@-1,52:55='line',<0>,104:96]
2023-09-03 23:21:33:108 action-translator LogManager.java:25 qattr [@-1,59:61='LET',<0>,104:103].[@-1,63:65='pos',<0>,104:107]
2023-09-03 23:21:33:108 action-translator LogManager.java:25 qattr [@-1,69:77='ID_VALIDO',<0>,104:113].[@-1,79:82='text',<0>,104:123]
2023-09-03 23:21:33:109 action-translator LogManager.java:25 qattr [@-1,86:93='tipodato',<0>,104:130].[@-1,95:98='tipo',<0>,104:139]
2023-09-03 23:21:33:109 action-translator LogManager.java:25 qattr [@-1,102:105='expr',<0>,104:146].[@-1,107:107='e',<0>,104:151]
2023-09-03 23:21:33:109 action-translator LogManager.java:25 translate $deccon = instructions.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)
2023-09-03 23:21:33:109 action-translator LogManager.java:25 attr [@-1,1:6='deccon',<0>,105:25]
2023-09-03 23:21:33:109 action-translator LogManager.java:25 qattr [@-1,55:57='LET',<0>,105:79].[@-1,59:62='line',<0>,105:83]
2023-09-03 23:21:33:109 action-translator LogManager.java:25 qattr [@-1,66:68='LET',<0>,105:90].[@-1,70:72='pos',<0>,105:94]
2023-09-03 23:21:33:109 action-translator LogManager.java:25 qattr [@-1,76:84='ID_VALIDO',<0>,105:100].[@-1,86:89='text',<0>,105:110]
2023-09-03 23:21:33:109 action-translator LogManager.java:25 qattr [@-1,93:96='expr',<0>,105:117].[@-1,98:98='e',<0>,105:122]
2023-09-03 23:21:33:109 action-translator LogManager.java:25 translate  $asgvbl = instructions.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-09-03 23:21:33:109 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,109:22]
2023-09-03 23:21:33:109 action-translator LogManager.java:25 qattr [@-1,47:55='ID_VALIDO',<0>,109:67].[@-1,57:60='line',<0>,109:77]
2023-09-03 23:21:33:109 action-translator LogManager.java:25 qattr [@-1,64:72='ID_VALIDO',<0>,109:84].[@-1,74:76='pos',<0>,109:94]
2023-09-03 23:21:33:109 action-translator LogManager.java:25 qattr [@-1,80:88='ID_VALIDO',<0>,109:100].[@-1,90:93='text',<0>,109:110]
2023-09-03 23:21:33:110 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,109:117].[@-1,102:102='e',<0>,109:122]
2023-09-03 23:21:33:110 action-translator LogManager.java:25 translate  $asgvbl = instructions.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-09-03 23:21:33:110 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,110:24]
2023-09-03 23:21:33:110 action-translator LogManager.java:25 qattr [@-1,43:51='ID_VALIDO',<0>,110:65].[@-1,53:56='line',<0>,110:75]
2023-09-03 23:21:33:110 action-translator LogManager.java:25 qattr [@-1,60:68='ID_VALIDO',<0>,110:82].[@-1,70:72='pos',<0>,110:92]
2023-09-03 23:21:33:110 action-translator LogManager.java:25 qattr [@-1,76:84='ID_VALIDO',<0>,110:98].[@-1,86:89='text',<0>,110:108]
2023-09-03 23:21:33:111 action-translator LogManager.java:25 qattr [@-1,93:96='expr',<0>,110:115].[@-1,98:98='e',<0>,110:120]
2023-09-03 23:21:33:111 action-translator LogManager.java:25 translate  $asgvbl = instructions.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-09-03 23:21:33:111 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,111:25]
2023-09-03 23:21:33:111 action-translator LogManager.java:25 qattr [@-1,44:52='ID_VALIDO',<0>,111:67].[@-1,54:57='line',<0>,111:77]
2023-09-03 23:21:33:111 action-translator LogManager.java:25 qattr [@-1,61:69='ID_VALIDO',<0>,111:84].[@-1,71:73='pos',<0>,111:94]
2023-09-03 23:21:33:111 action-translator LogManager.java:25 qattr [@-1,77:85='ID_VALIDO',<0>,111:100].[@-1,87:90='text',<0>,111:110]
2023-09-03 23:21:33:111 action-translator LogManager.java:25 qattr [@-1,94:97='expr',<0>,111:117].[@-1,99:99='e',<0>,111:122]
2023-09-03 23:21:33:112 action-translator LogManager.java:25 translate  $tipo = environment.INTEGER 
2023-09-03 23:21:33:112 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,115:8]
2023-09-03 23:21:33:112 action-translator LogManager.java:25 translate  $tipo = environment.FLOAT 
2023-09-03 23:21:33:112 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,116:10]
2023-09-03 23:21:33:112 action-translator LogManager.java:25 translate  $tipo = environment.STRING 
2023-09-03 23:21:33:112 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,117:11]
2023-09-03 23:21:33:112 action-translator LogManager.java:25 translate  $tipo = environment.BOOLEAN 
2023-09-03 23:21:33:112 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,118:9]
2023-09-03 23:21:33:112 action-translator LogManager.java:25 translate  $tipo = environment.CHARACTER 
2023-09-03 23:21:33:112 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,119:12]
2023-09-03 23:21:33:113 action-translator LogManager.java:25 translate 
2023-09-03 23:21:33:114 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) 
2023-09-03 23:21:33:114 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:70]
2023-09-03 23:21:33:114 action-translator LogManager.java:25 qattr [@-1,32:36='right',<0>,2:100].[@-1,38:42='start',<0>,2:106]
2023-09-03 23:21:33:115 action-translator LogManager.java:25 qattr [@-1,56:60='right',<0>,2:124].[@-1,62:66='start',<0>,2:130]
2023-09-03 23:21:33:115 action-translator LogManager.java:25 qattr [@-1,82:86='right',<0>,2:150].[@-1,88:88='e',<0>,2:156]
2023-09-03 23:21:33:115 action-translator LogManager.java:25 qattr [@-1,92:93='op',<0>,2:160].[@-1,95:98='text',<0>,2:163]
2023-09-03 23:21:33:115 action-translator LogManager.java:25 qattr [@-1,102:106='right',<0>,2:170].[@-1,108:108='e',<0>,2:176]
2023-09-03 23:21:33:116 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-03 23:21:33:116 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:79]
2023-09-03 23:21:33:116 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,3:84].[@-1,12:12='e',<0>,3:89]
2023-09-03 23:21:33:116 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    
2023-09-03 23:21:33:116 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,6:30].[@-1,39:42='text',<0>,6:37]
2023-09-03 23:21:33:116 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,7:43].[@-1,102:105='text',<0>,7:50]
2023-09-03 23:21:33:116 action-translator LogManager.java:25 attr [@-1,377:377='e',<0>,16:13]
2023-09-03 23:21:33:116 action-translator LogManager.java:25 qattr [@-1,407:412='NUMBER',<0>,16:43].[@-1,414:417='line',<0>,16:50]
2023-09-03 23:21:33:116 action-translator LogManager.java:25 qattr [@-1,420:425='NUMBER',<0>,16:56].[@-1,427:429='pos',<0>,16:63]
2023-09-03 23:21:33:116 action-translator LogManager.java:25 qattr [@-1,510:515='NUMBER',<0>,18:37].[@-1,517:520='text',<0>,18:44]
2023-09-03 23:21:33:116 action-translator LogManager.java:25 attr [@-1,613:613='e',<0>,22:13]
2023-09-03 23:21:33:116 action-translator LogManager.java:25 qattr [@-1,643:648='NUMBER',<0>,22:43].[@-1,650:653='line',<0>,22:50]
2023-09-03 23:21:33:116 action-translator LogManager.java:25 qattr [@-1,656:661='NUMBER',<0>,22:56].[@-1,663:665='pos',<0>,22:63]
2023-09-03 23:21:33:116 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-03 23:21:33:116 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,27:30].[@-1,39:42='text',<0>,27:37]
2023-09-03 23:21:33:116 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,28:43].[@-1,102:105='text',<0>,28:50]
2023-09-03 23:21:33:116 action-translator LogManager.java:25 attr [@-1,374:374='e',<0>,37:10]
2023-09-03 23:21:33:116 action-translator LogManager.java:25 qattr [@-1,404:409='NUMBER',<0>,37:40].[@-1,411:414='line',<0>,37:47]
2023-09-03 23:21:33:118 action-translator LogManager.java:25 qattr [@-1,417:422='NUMBER',<0>,37:53].[@-1,424:426='pos',<0>,37:60]
2023-09-03 23:21:33:118 action-translator LogManager.java:25 qattr [@-1,506:511='NUMBER',<0>,39:37].[@-1,513:516='text',<0>,39:44]
2023-09-03 23:21:33:118 action-translator LogManager.java:25 attr [@-1,621:621='e',<0>,43:13]
2023-09-03 23:21:33:118 action-translator LogManager.java:25 qattr [@-1,651:656='NUMBER',<0>,43:43].[@-1,658:661='line',<0>,43:50]
2023-09-03 23:21:33:118 action-translator LogManager.java:25 qattr [@-1,664:669='NUMBER',<0>,43:56].[@-1,671:673='pos',<0>,43:63]
2023-09-03 23:21:33:118 action-translator LogManager.java:25 translate 
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-03 23:21:33:118 action-translator LogManager.java:25 qattr [@-1,18:23='CADENA',<0>,48:16].[@-1,25:28='text',<0>,48:23]
2023-09-03 23:21:33:118 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,49:9]
2023-09-03 23:21:33:118 action-translator LogManager.java:25 qattr [@-1,70:75='CADENA',<0>,49:39].[@-1,77:80='line',<0>,49:46]
2023-09-03 23:21:33:118 action-translator LogManager.java:25 qattr [@-1,84:89='CADENA',<0>,49:53].[@-1,91:93='pos',<0>,49:60]
2023-09-03 23:21:33:118 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-09-03 23:21:33:118 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,51:32]
2023-09-03 23:21:33:119 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,51:62].[@-1,36:39='line',<0>,51:66]
2023-09-03 23:21:33:119 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,51:73].[@-1,47:49='pos',<0>,51:77]
2023-09-03 23:21:33:119 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-09-03 23:21:33:119 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,52:32]
2023-09-03 23:21:33:119 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,52:62].[@-1,36:39='line',<0>,52:66]
2023-09-03 23:21:33:119 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,52:73].[@-1,47:49='pos',<0>,52:77]
2023-09-03 23:21:33:119 action-translator LogManager.java:25 translate  
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    
2023-09-03 23:21:33:119 action-translator LogManager.java:25 qattr [@-1,19:27='CHARACTER',<0>,55:16].[@-1,29:32='text',<0>,55:26]
2023-09-03 23:21:33:119 action-translator LogManager.java:25 attr [@-1,44:44='e',<0>,56:9]
2023-09-03 23:21:33:119 action-translator LogManager.java:25 qattr [@-1,74:82='CHARACTER',<0>,56:39].[@-1,84:87='line',<0>,56:49]
2023-09-03 23:21:33:119 action-translator LogManager.java:25 qattr [@-1,91:99='CHARACTER',<0>,56:56].[@-1,101:103='pos',<0>,56:66]
2023-09-03 23:21:33:119 action-translator LogManager.java:25 translate 
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    
2023-09-03 23:21:33:119 action-translator LogManager.java:25 qattr [@-1,17:25='ID_VALIDO',<0>,60:15].[@-1,27:30='text',<0>,60:25]
2023-09-03 23:21:33:120 action-translator LogManager.java:25 attr [@-1,42:42='e',<0>,61:9]
2023-09-03 23:21:33:120 action-translator LogManager.java:25 qattr [@-1,70:78='ID_VALIDO',<0>,61:37].[@-1,80:83='line',<0>,61:47]
2023-09-03 23:21:33:120 action-translator LogManager.java:25 qattr [@-1,86:94='ID_VALIDO',<0>,61:53].[@-1,96:98='pos',<0>,61:63]
2023-09-03 23:21:33:120 action-translator LogManager.java:25 translate $e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)
2023-09-03 23:21:33:120 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,63:32]
2023-09-03 23:21:33:120 action-translator LogManager.java:25 qattr [@-1,31:34='NULO',<0>,63:62].[@-1,36:39='line',<0>,63:67]
2023-09-03 23:21:33:120 action-translator LogManager.java:25 qattr [@-1,43:46='NULO',<0>,63:74].[@-1,48:50='pos',<0>,63:79]
2023-09-03 23:21:33:120 action-translator LogManager.java:25 qattr [@-1,54:57='NULO',<0>,63:85].[@-1,59:62='text',<0>,63:90]
2023-09-03 23:21:33:121 action-translator LogManager.java:25 translate  $e = $vectorvacio.veemct
2023-09-03 23:21:33:121 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,64:40]
2023-09-03 23:21:33:121 action-translator LogManager.java:25 qattr [@-1,7:17='vectorvacio',<0>,64:45].[@-1,19:24='veemct',<0>,64:57]
2023-09-03 23:21:33:121 action-translator LogManager.java:25 translate  $e = $vectorcount.vecnct
2023-09-03 23:21:33:122 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,65:40]
2023-09-03 23:21:33:122 action-translator LogManager.java:25 qattr [@-1,7:17='vectorcount',<0>,65:45].[@-1,19:24='vecnct',<0>,65:57]
2023-09-03 23:21:33:122 action-translator LogManager.java:25 translate  $e = $vectoraccess.vepposct
2023-09-03 23:21:33:122 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,66:41]
2023-09-03 23:21:33:122 action-translator LogManager.java:25 qattr [@-1,7:18='vectoraccess',<0>,66:46].[@-1,20:27='vepposct',<0>,66:59]
2023-09-03 23:21:33:122 action-translator LogManager.java:25 translate  $e = $intembebida.intemb
2023-09-03 23:21:33:122 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,67:40]
2023-09-03 23:21:33:122 action-translator LogManager.java:25 qattr [@-1,7:17='intembebida',<0>,67:45].[@-1,19:24='intemb',<0>,67:57]
2023-09-03 23:21:33:122 action-translator LogManager.java:25 translate  $e = $floatembebida.floemb
2023-09-03 23:21:33:122 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,68:42]
2023-09-03 23:21:33:122 action-translator LogManager.java:25 qattr [@-1,7:19='floatembebida',<0>,68:47].[@-1,21:26='floemb',<0>,68:61]
2023-09-03 23:21:33:122 action-translator LogManager.java:25 translate  $e = $stringembebida.stremb
2023-09-03 23:21:33:122 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,69:43]
2023-09-03 23:21:33:122 action-translator LogManager.java:25 qattr [@-1,7:20='stringembebida',<0>,69:48].[@-1,22:27='stremb',<0>,69:63]
2023-09-03 23:21:33:123 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-09-03 23:21:33:123 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-03 23:21:33:123 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,72:120]
2023-09-03 23:21:33:123 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,72:150].[@-1,37:41='start',<0>,72:155]
2023-09-03 23:21:33:123 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,72:173].[@-1,60:64='start',<0>,72:178]
2023-09-03 23:21:33:123 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,72:198].[@-1,85:85='e',<0>,72:203]
2023-09-03 23:21:33:123 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,72:207].[@-1,92:95='text',<0>,72:210]
2023-09-03 23:21:33:123 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,72:217].[@-1,105:105='e',<0>,72:223]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-03 23:21:33:124 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-03 23:21:33:124 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,73:149]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,73:179].[@-1,37:41='start',<0>,73:184]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,73:202].[@-1,60:64='start',<0>,73:207]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,73:227].[@-1,85:85='e',<0>,73:232]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,73:236].[@-1,92:95='text',<0>,73:239]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,73:246].[@-1,105:105='e',<0>,73:252]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-03 23:21:33:124 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-03 23:21:33:124 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,74:149]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,74:179].[@-1,37:41='start',<0>,74:184]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,74:202].[@-1,60:64='start',<0>,74:207]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,74:227].[@-1,85:85='e',<0>,74:232]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,74:236].[@-1,92:95='text',<0>,74:239]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,74:246].[@-1,105:105='e',<0>,74:252]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-03 23:21:33:124 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-03 23:21:33:124 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,75:154]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,75:184].[@-1,37:41='start',<0>,75:189]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,75:207].[@-1,60:64='start',<0>,75:212]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,75:232].[@-1,85:85='e',<0>,75:237]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,75:241].[@-1,92:95='text',<0>,75:244]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,75:251].[@-1,105:105='e',<0>,75:257]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-03 23:21:33:124 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-03 23:21:33:124 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,76:154]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,76:184].[@-1,37:41='start',<0>,76:189]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,76:207].[@-1,60:64='start',<0>,76:212]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,76:232].[@-1,85:85='e',<0>,76:237]
2023-09-03 23:21:33:124 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,76:241].[@-1,92:95='text',<0>,76:244]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,76:251].[@-1,105:105='e',<0>,76:257]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-03 23:21:33:125 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-03 23:21:33:125 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,77:151]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,77:181].[@-1,37:41='start',<0>,77:186]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,77:204].[@-1,60:64='start',<0>,77:209]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,77:229].[@-1,85:85='e',<0>,77:234]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,77:238].[@-1,92:95='text',<0>,77:241]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,77:248].[@-1,105:105='e',<0>,77:254]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-03 23:21:33:125 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-03 23:21:33:125 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,78:127]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,78:157].[@-1,37:41='start',<0>,78:162]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,78:180].[@-1,60:64='start',<0>,78:185]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,78:205].[@-1,85:85='e',<0>,78:210]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,78:214].[@-1,92:95='text',<0>,78:217]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,78:224].[@-1,105:105='e',<0>,78:230]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-03 23:21:33:125 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-03 23:21:33:125 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,79:126]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,79:156].[@-1,37:41='start',<0>,79:161]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,79:179].[@-1,60:64='start',<0>,79:184]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,79:204].[@-1,85:85='e',<0>,79:209]
2023-09-03 23:21:33:125 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,79:213].[@-1,92:95='text',<0>,79:216]
2023-09-03 23:21:33:126 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,79:223].[@-1,105:105='e',<0>,79:229]
2023-09-03 23:21:33:127 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-09-03 23:21:33:127 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-03 23:21:33:127 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-03 23:21:33:127 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-03 23:21:33:127 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-03 23:21:33:127 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-03 23:21:33:127 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-03 23:21:33:127 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-03 23:21:33:128 action-translator LogManager.java:25 translate  $myIfElse = instructions.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)
2023-09-03 23:21:33:128 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,203:43]
2023-09-03 23:21:33:128 action-translator LogManager.java:25 qattr [@-1,42:43='IF',<0>,203:83].[@-1,45:48='line',<0>,203:86]
2023-09-03 23:21:33:128 action-translator LogManager.java:25 qattr [@-1,52:53='IF',<0>,203:93].[@-1,55:57='pos',<0>,203:96]
2023-09-03 23:21:33:128 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,203:102].[@-1,66:66='e',<0>,203:107]
2023-09-03 23:21:33:128 action-translator LogManager.java:25 qattr [@-1,70:81='blockinterno',<0>,203:111].[@-1,83:88='blkint',<0>,203:124]
2023-09-03 23:21:33:129 action-translator LogManager.java:25 translate  $myIfElse = instructions.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)
2023-09-03 23:21:33:129 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,204:91]
2023-09-03 23:21:33:129 action-translator LogManager.java:25 qattr [@-1,46:47='IF',<0>,204:135].[@-1,49:52='line',<0>,204:138]
2023-09-03 23:21:33:129 action-translator LogManager.java:25 qattr [@-1,56:57='IF',<0>,204:145].[@-1,59:61='pos',<0>,204:148]
2023-09-03 23:21:33:129 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,204:154].[@-1,70:70='e',<0>,204:159]
2023-09-03 23:21:33:129 action-translator LogManager.java:25 qattr [@-1,74:77='ifop',<0>,204:163].[@-1,79:84='blkint',<0>,204:168]
2023-09-03 23:21:33:129 action-translator LogManager.java:25 qattr [@-1,89:94='elseop',<0>,204:178].[@-1,96:101='blkint',<0>,204:185]
2023-09-03 23:21:33:129 action-translator LogManager.java:25 translate  $myIfElse = instructions.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)
2023-09-03 23:21:33:129 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,205:64]
2023-09-03 23:21:33:129 action-translator LogManager.java:25 qattr [@-1,48:49='IF',<0>,205:110].[@-1,51:54='line',<0>,205:113]
2023-09-03 23:21:33:129 action-translator LogManager.java:25 qattr [@-1,58:59='IF',<0>,205:120].[@-1,61:63='pos',<0>,205:123]
2023-09-03 23:21:33:129 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,205:129].[@-1,72:72='e',<0>,205:134]
2023-09-03 23:21:33:129 action-translator LogManager.java:25 qattr [@-1,76:87='blockinterno',<0>,205:138].[@-1,89:94='blkint',<0>,205:151]
2023-09-03 23:21:33:129 action-translator LogManager.java:25 qattr [@-1,98:112='sentenciaifelse',<0>,205:160].[@-1,114:121='myIfElse',<0>,205:176]
2023-09-03 23:21:33:130 action-translator LogManager.java:25 translate 
    if ($DEFAULT != nil) {
        $mySwitch = instructions.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = instructions.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }

2023-09-03 23:21:33:130 action-translator LogManager.java:25 attr [@-1,11:17='DEFAULT',<0>,211:9]
2023-09-03 23:21:33:131 action-translator LogManager.java:25 attr [@-1,39:46='mySwitch',<0>,212:9]
2023-09-03 23:21:33:131 action-translator LogManager.java:25 qattr [@-1,90:95='SWITCH',<0>,212:60].[@-1,97:100='line',<0>,212:67]
2023-09-03 23:21:33:131 action-translator LogManager.java:25 qattr [@-1,104:109='SWITCH',<0>,212:74].[@-1,111:113='pos',<0>,212:81]
2023-09-03 23:21:33:131 action-translator LogManager.java:25 qattr [@-1,117:120='expr',<0>,212:87].[@-1,122:122='e',<0>,212:92]
2023-09-03 23:21:33:131 action-translator LogManager.java:25 qattr [@-1,126:134='blockcase',<0>,212:96].[@-1,136:142='blkcase',<0>,212:106]
2023-09-03 23:21:33:131 action-translator LogManager.java:25 qattr [@-1,146:157='blockinterno',<0>,212:116].[@-1,159:164='blkint',<0>,212:129]
2023-09-03 23:21:33:131 action-translator LogManager.java:25 attr [@-1,191:198='mySwitch',<0>,214:9]
2023-09-03 23:21:33:131 action-translator LogManager.java:25 qattr [@-1,235:240='SWITCH',<0>,214:53].[@-1,242:245='line',<0>,214:60]
2023-09-03 23:21:33:131 action-translator LogManager.java:25 qattr [@-1,249:254='SWITCH',<0>,214:67].[@-1,256:258='pos',<0>,214:74]
2023-09-03 23:21:33:131 action-translator LogManager.java:25 qattr [@-1,262:265='expr',<0>,214:80].[@-1,267:267='e',<0>,214:85]
2023-09-03 23:21:33:132 action-translator LogManager.java:25 qattr [@-1,271:279='blockcase',<0>,214:89].[@-1,281:287='blkcase',<0>,214:99]
2023-09-03 23:21:33:132 action-translator LogManager.java:25 translate 
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext

2023-09-03 23:21:33:132 action-translator LogManager.java:25 attr [@-1,7:13='blkcase',<0>,220:5]
2023-09-03 23:21:33:132 action-translator LogManager.java:25 translate 
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }

2023-09-03 23:21:33:132 action-translator LogManager.java:25 attr [@-1,100:106='blkcase',<0>,227:9]
2023-09-03 23:21:33:132 action-translator LogManager.java:25 attr [@-1,118:124='blkcase',<0>,227:27]
2023-09-03 23:21:33:132 action-translator LogManager.java:25 translate 
    $blocas=instructions.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)

2023-09-03 23:21:33:133 action-translator LogManager.java:25 attr [@-1,7:12='blocas',<0>,235:5]
2023-09-03 23:21:33:133 action-translator LogManager.java:25 qattr [@-1,51:54='CASE',<0>,235:49].[@-1,56:59='line',<0>,235:54]
2023-09-03 23:21:33:133 action-translator LogManager.java:25 qattr [@-1,63:66='CASE',<0>,235:61].[@-1,68:70='pos',<0>,235:66]
2023-09-03 23:21:33:133 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,235:72].[@-1,79:79='e',<0>,235:77]
2023-09-03 23:21:33:134 action-translator LogManager.java:25 qattr [@-1,83:94='blockinterno',<0>,235:81].[@-1,96:101='blkint',<0>,235:94]
2023-09-03 23:21:33:134 action-translator LogManager.java:25 translate  $whict = instructions.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)
2023-09-03 23:21:33:134 action-translator LogManager.java:25 attr [@-1,2:6='whict',<0>,240:46]
2023-09-03 23:21:33:134 action-translator LogManager.java:25 qattr [@-1,42:46='WHILE',<0>,240:86].[@-1,48:51='line',<0>,240:92]
2023-09-03 23:21:33:134 action-translator LogManager.java:25 qattr [@-1,55:59='WHILE',<0>,240:99].[@-1,61:63='pos',<0>,240:105]
2023-09-03 23:21:33:134 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,240:111].[@-1,72:72='e',<0>,240:116]
2023-09-03 23:21:33:134 action-translator LogManager.java:25 qattr [@-1,76:87='blockinterno',<0>,240:120].[@-1,89:94='blkint',<0>,240:133]
2023-09-03 23:21:33:135 action-translator LogManager.java:25 translate  $forct = instructions.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)
2023-09-03 23:21:33:135 action-translator LogManager.java:25 attr [@-1,2:6='forct',<0>,244:79]
2023-09-03 23:21:33:135 action-translator LogManager.java:25 qattr [@-1,45:47='FOR',<0>,244:122].[@-1,49:52='line',<0>,244:126]
2023-09-03 23:21:33:135 action-translator LogManager.java:25 qattr [@-1,56:58='FOR',<0>,244:133].[@-1,60:62='pos',<0>,244:137]
2023-09-03 23:21:33:135 action-translator LogManager.java:25 qattr [@-1,66:74='ID_VALIDO',<0>,244:143].[@-1,76:79='text',<0>,244:153]
2023-09-03 23:21:33:135 action-translator LogManager.java:25 qattr [@-1,83:86='left',<0>,244:160].[@-1,88:88='e',<0>,244:165]
2023-09-03 23:21:33:136 action-translator LogManager.java:25 qattr [@-1,92:96='right',<0>,244:169].[@-1,98:98='e',<0>,244:175]
2023-09-03 23:21:33:136 action-translator LogManager.java:25 qattr [@-1,101:112='blockinterno',<0>,244:178].[@-1,114:119='blkint',<0>,244:191]
2023-09-03 23:21:33:136 action-translator LogManager.java:25 translate  $forct = instructions.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)
2023-09-03 23:21:33:136 action-translator LogManager.java:25 attr [@-1,2:6='forct',<0>,245:57]
2023-09-03 23:21:33:136 action-translator LogManager.java:25 qattr [@-1,46:48='FOR',<0>,245:101].[@-1,50:53='line',<0>,245:105]
2023-09-03 23:21:33:136 action-translator LogManager.java:25 qattr [@-1,57:59='FOR',<0>,245:112].[@-1,61:63='pos',<0>,245:116]
2023-09-03 23:21:33:136 action-translator LogManager.java:25 qattr [@-1,67:75='ID_VALIDO',<0>,245:122].[@-1,77:80='text',<0>,245:132]
2023-09-03 23:21:33:136 action-translator LogManager.java:25 qattr [@-1,84:87='expr',<0>,245:139].[@-1,89:89='e',<0>,245:144]
2023-09-03 23:21:33:136 action-translator LogManager.java:25 qattr [@-1,93:104='blockinterno',<0>,245:148].[@-1,106:111='blkint',<0>,245:161]
2023-09-03 23:21:33:137 action-translator LogManager.java:25 translate  
    $guct = instructions.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)

2023-09-03 23:21:33:137 action-translator LogManager.java:25 attr [@-1,8:11='guct',<0>,251:5]
2023-09-03 23:21:33:137 action-translator LogManager.java:25 qattr [@-1,47:51='GUARD',<0>,251:44].[@-1,53:56='line',<0>,251:50]
2023-09-03 23:21:33:137 action-translator LogManager.java:25 qattr [@-1,60:64='GUARD',<0>,251:57].[@-1,66:68='pos',<0>,251:63]
2023-09-03 23:21:33:137 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,251:69].[@-1,77:77='e',<0>,251:74]
2023-09-03 23:21:33:137 action-translator LogManager.java:25 qattr [@-1,81:92='blockinterno',<0>,251:78].[@-1,94:99='blkint',<0>,251:91]
2023-09-03 23:21:33:138 action-translator LogManager.java:25 translate $coct = instructions.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)
2023-09-03 23:21:33:138 action-translator LogManager.java:25 attr [@-1,1:4='coct',<0>,256:12]
2023-09-03 23:21:33:138 action-translator LogManager.java:25 qattr [@-1,47:54='CONTINUE',<0>,256:58].[@-1,56:59='line',<0>,256:67]
2023-09-03 23:21:33:138 action-translator LogManager.java:25 qattr [@-1,63:70='CONTINUE',<0>,256:74].[@-1,72:74='pos',<0>,256:83]
2023-09-03 23:21:33:138 action-translator LogManager.java:25 translate  $brkct = instructions.NewTransferenciaBreak($BREAK.line, $BREAK.pos)
2023-09-03 23:21:33:138 action-translator LogManager.java:25 attr [@-1,2:6='brkct',<0>,260:10]
2023-09-03 23:21:33:138 action-translator LogManager.java:25 qattr [@-1,46:50='BREAK',<0>,260:54].[@-1,52:55='line',<0>,260:60]
2023-09-03 23:21:33:138 action-translator LogManager.java:25 qattr [@-1,59:63='BREAK',<0>,260:67].[@-1,65:67='pos',<0>,260:73]
2023-09-03 23:21:33:139 action-translator LogManager.java:25 translate 
    $rect = instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos);

2023-09-03 23:21:33:139 action-translator LogManager.java:25 setAttr [@-1,7:10='rect',<0>,266:5] [@-1,13:75=' instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos)',<0>,266:11]
2023-09-03 23:21:33:139 action-translator LogManager.java:25 translate  instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos)
2023-09-03 23:21:33:139 action-translator LogManager.java:25 qattr [@-1,38:43='RETURN',<0>,265:38].[@-1,45:48='line',<0>,265:45]
2023-09-03 23:21:33:139 action-translator LogManager.java:25 qattr [@-1,52:57='RETURN',<0>,265:52].[@-1,59:61='pos',<0>,265:59]
2023-09-03 23:21:33:139 action-translator LogManager.java:25 translate 
    $rect = instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);

2023-09-03 23:21:33:139 action-translator LogManager.java:25 setAttr [@-1,7:10='rect',<0>,270:5] [@-1,13:85=' instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e)',<0>,270:11]
2023-09-03 23:21:33:139 action-translator LogManager.java:25 translate  instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e)
2023-09-03 23:21:33:139 action-translator LogManager.java:25 qattr [@-1,41:46='RETURN',<0>,269:41].[@-1,48:51='line',<0>,269:48]
2023-09-03 23:21:33:139 action-translator LogManager.java:25 qattr [@-1,55:60='RETURN',<0>,269:55].[@-1,62:64='pos',<0>,269:62]
2023-09-03 23:21:33:139 action-translator LogManager.java:25 qattr [@-1,68:69='op',<0>,269:68].[@-1,71:71='e',<0>,269:71]
2023-09-03 23:21:33:140 action-translator LogManager.java:25 translate  $vect = instructions.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)
2023-09-03 23:21:33:140 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,276:89]
2023-09-03 23:21:33:140 action-translator LogManager.java:25 qattr [@-1,50:52='VAR',<0>,276:137].[@-1,54:57='line',<0>,276:141]
2023-09-03 23:21:33:140 action-translator LogManager.java:25 qattr [@-1,61:63='VAR',<0>,276:148].[@-1,65:67='pos',<0>,276:152]
2023-09-03 23:21:33:140 action-translator LogManager.java:25 qattr [@-1,71:79='ID_VALIDO',<0>,276:158].[@-1,81:84='text',<0>,276:168]
2023-09-03 23:21:33:140 action-translator LogManager.java:25 qattr [@-1,89:96='tipodato',<0>,276:176].[@-1,98:101='tipo',<0>,276:185]
2023-09-03 23:21:33:140 action-translator LogManager.java:25 qattr [@-1,105:115='blockparams',<0>,276:192].[@-1,117:122='blkpar',<0>,276:204]
2023-09-03 23:21:33:140 action-translator LogManager.java:25 translate  $vect = instructions.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)
2023-09-03 23:21:33:140 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,277:77]
2023-09-03 23:21:33:140 action-translator LogManager.java:25 qattr [@-1,53:55='VAR',<0>,277:128].[@-1,57:60='line',<0>,277:132]
2023-09-03 23:21:33:140 action-translator LogManager.java:25 qattr [@-1,64:66='VAR',<0>,277:139].[@-1,68:70='pos',<0>,277:143]
2023-09-03 23:21:33:140 action-translator LogManager.java:25 qattr [@-1,74:82='ID_VALIDO',<0>,277:149].[@-1,84:87='text',<0>,277:159]
2023-09-03 23:21:33:140 action-translator LogManager.java:25 qattr [@-1,92:99='tipodato',<0>,277:167].[@-1,101:104='tipo',<0>,277:176]
2023-09-03 23:21:33:140 action-translator LogManager.java:25 translate  $vect = instructions.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)
2023-09-03 23:21:33:141 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,278:79]
2023-09-03 23:21:33:141 action-translator LogManager.java:25 qattr [@-1,47:49='VAR',<0>,278:124].[@-1,51:54='line',<0>,278:128]
2023-09-03 23:21:33:141 action-translator LogManager.java:25 qattr [@-1,58:60='VAR',<0>,278:135].[@-1,62:64='pos',<0>,278:139]
2023-09-03 23:21:33:141 action-translator LogManager.java:25 qattr [@-1,68:71='prin',<0>,278:145].[@-1,73:76='text',<0>,278:150]
2023-09-03 23:21:33:141 action-translator LogManager.java:25 qattr [@-1,81:88='tipodato',<0>,278:158].[@-1,90:93='tipo',<0>,278:167]
2023-09-03 23:21:33:141 action-translator LogManager.java:25 qattr [@-1,97:100='secu',<0>,278:174].[@-1,102:105='text',<0>,278:179]
2023-09-03 23:21:33:141 action-translator LogManager.java:25 translate 
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext

2023-09-03 23:21:33:141 action-translator LogManager.java:25 attr [@-1,7:12='blkpar',<0>,282:5]
2023-09-03 23:21:33:141 action-translator LogManager.java:25 translate 
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }

2023-09-03 23:21:33:141 action-translator LogManager.java:25 attr [@-1,102:107='blkpar',<0>,289:9]
2023-09-03 23:21:33:141 action-translator LogManager.java:25 attr [@-1,119:124='blkpar',<0>,289:26]
2023-09-03 23:21:33:141 action-translator LogManager.java:25 translate 
    $blopas = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)

2023-09-03 23:21:33:141 action-translator LogManager.java:25 attr [@-1,7:12='blopas',<0>,297:5]
2023-09-03 23:21:33:141 action-translator LogManager.java:25 qattr [@-1,51:54='COMA',<0>,297:49].[@-1,56:59='line',<0>,297:54]
2023-09-03 23:21:33:141 action-translator LogManager.java:25 qattr [@-1,63:66='COMA',<0>,297:61].[@-1,68:70='pos',<0>,297:66]
2023-09-03 23:21:33:141 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,297:72].[@-1,79:79='e',<0>,297:77]
2023-09-03 23:21:33:141 action-translator LogManager.java:25 translate 
    $blopas = instructions.NewArregloParametro($expr.e)

2023-09-03 23:21:33:141 action-translator LogManager.java:25 attr [@-1,7:12='blopas',<0>,301:5]
2023-09-03 23:21:33:141 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,301:48].[@-1,55:55='e',<0>,301:53]
2023-09-03 23:21:33:143 action-translator LogManager.java:25 translate  $veadct = instructions.NewArregloAppend($ID_VALIDO.text , $expr.e)
2023-09-03 23:21:33:143 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,305:46]
2023-09-03 23:21:33:143 action-translator LogManager.java:25 qattr [@-1,42:50='ID_VALIDO',<0>,305:86].[@-1,52:55='text',<0>,305:96]
2023-09-03 23:21:33:143 action-translator LogManager.java:25 qattr [@-1,60:63='expr',<0>,305:104].[@-1,65:65='e',<0>,305:109]
2023-09-03 23:21:33:143 action-translator LogManager.java:25 translate  $veadct = instructions.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)
2023-09-03 23:21:33:143 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,306:91]
2023-09-03 23:21:33:143 action-translator LogManager.java:25 qattr [@-1,49:52='prin',<0>,306:138].[@-1,54:57='text',<0>,306:143]
2023-09-03 23:21:33:143 action-translator LogManager.java:25 qattr [@-1,62:64='pop',<0>,306:151].[@-1,66:66='e',<0>,306:155]
2023-09-03 23:21:33:143 action-translator LogManager.java:25 qattr [@-1,70:73='secu',<0>,306:159].[@-1,75:78='text',<0>,306:164]
2023-09-03 23:21:33:143 action-translator LogManager.java:25 qattr [@-1,82:84='sop',<0>,306:171].[@-1,86:86='e',<0>,306:175]
2023-09-03 23:21:33:143 action-translator LogManager.java:25 translate  $veadct = instructions.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) 
2023-09-03 23:21:33:143 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,308:2]
2023-09-03 23:21:33:143 action-translator LogManager.java:25 qattr [@-1,49:57='ID_VALIDO',<0>,308:49].[@-1,59:62='text',<0>,308:59]
2023-09-03 23:21:33:143 action-translator LogManager.java:25 qattr [@-1,66:68='op1',<0>,308:66].[@-1,70:70='e',<0>,308:70]
2023-09-03 23:21:33:143 action-translator LogManager.java:25 qattr [@-1,74:76='op2',<0>,308:74].[@-1,78:78='e',<0>,308:78]
2023-09-03 23:21:33:143 action-translator LogManager.java:25 qattr [@-1,82:99='listamatrizaddsubs',<0>,308:82].[@-1,101:110='blklimatas',<0>,308:101]
2023-09-03 23:21:33:143 action-translator LogManager.java:25 qattr [@-1,114:116='op3',<0>,308:114].[@-1,118:118='e',<0>,308:118]
2023-09-03 23:21:33:144 action-translator LogManager.java:25 translate  $veadct = instructions.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) 
2023-09-03 23:21:33:144 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,310:2]
2023-09-03 23:21:33:144 action-translator LogManager.java:25 qattr [@-1,45:53='ID_VALIDO',<0>,310:45].[@-1,55:58='text',<0>,310:55]
2023-09-03 23:21:33:144 action-translator LogManager.java:25 qattr [@-1,62:64='op1',<0>,310:62].[@-1,66:66='e',<0>,310:66]
2023-09-03 23:21:33:144 action-translator LogManager.java:25 qattr [@-1,70:72='op2',<0>,310:70].[@-1,74:74='e',<0>,310:74]
2023-09-03 23:21:33:144 action-translator LogManager.java:25 qattr [@-1,78:80='op3',<0>,310:78].[@-1,82:82='e',<0>,310:82]
2023-09-03 23:21:33:144 action-translator LogManager.java:25 translate  $veadct = instructions.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)
2023-09-03 23:21:33:144 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,311:52]
2023-09-03 23:21:33:145 action-translator LogManager.java:25 qattr [@-1,45:53='ID_VALIDO',<0>,311:95].[@-1,55:58='text',<0>,311:105]
2023-09-03 23:21:33:145 action-translator LogManager.java:25 qattr [@-1,63:65='pop',<0>,311:113].[@-1,67:67='e',<0>,311:117]
2023-09-03 23:21:33:145 action-translator LogManager.java:25 qattr [@-1,71:73='sop',<0>,311:121].[@-1,75:75='e',<0>,311:125]
2023-09-03 23:21:33:145 action-translator LogManager.java:25 translate  $vermct = instructions.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-09-03 23:21:33:145 action-translator LogManager.java:25 attr [@-1,2:7='vermct',<0>,314:46]
2023-09-03 23:21:33:145 action-translator LogManager.java:25 qattr [@-1,46:50='PUNTO',<0>,314:90].[@-1,52:55='line',<0>,314:96]
2023-09-03 23:21:33:145 action-translator LogManager.java:25 qattr [@-1,59:63='PUNTO',<0>,314:103].[@-1,65:67='pos',<0>,314:109]
2023-09-03 23:21:33:145 action-translator LogManager.java:25 qattr [@-1,71:79='ID_VALIDO',<0>,314:115].[@-1,81:84='text',<0>,314:125]
2023-09-03 23:21:33:145 action-translator LogManager.java:25 translate  $vermct = instructions.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)
2023-09-03 23:21:33:145 action-translator LogManager.java:25 attr [@-1,2:7='vermct',<0>,315:60]
2023-09-03 23:21:33:145 action-translator LogManager.java:25 qattr [@-1,45:49='PUNTO',<0>,315:103].[@-1,51:54='line',<0>,315:109]
2023-09-03 23:21:33:145 action-translator LogManager.java:25 qattr [@-1,58:62='PUNTO',<0>,315:116].[@-1,64:66='pos',<0>,315:122]
2023-09-03 23:21:33:145 action-translator LogManager.java:25 qattr [@-1,70:78='ID_VALIDO',<0>,315:128].[@-1,80:83='text',<0>,315:138]
2023-09-03 23:21:33:145 action-translator LogManager.java:25 qattr [@-1,87:90='expr',<0>,315:145].[@-1,92:92='e',<0>,315:150]
2023-09-03 23:21:33:146 action-translator LogManager.java:25 translate  $veemct = instructions.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-09-03 23:21:33:146 action-translator LogManager.java:25 attr [@-1,2:7='veemct',<0>,318:28]
2023-09-03 23:21:33:146 action-translator LogManager.java:25 qattr [@-1,43:47='PUNTO',<0>,318:69].[@-1,49:52='line',<0>,318:75]
2023-09-03 23:21:33:146 action-translator LogManager.java:25 qattr [@-1,56:60='PUNTO',<0>,318:82].[@-1,62:64='pos',<0>,318:88]
2023-09-03 23:21:33:146 action-translator LogManager.java:25 qattr [@-1,68:76='ID_VALIDO',<0>,318:94].[@-1,78:81='text',<0>,318:104]
2023-09-03 23:21:33:146 action-translator LogManager.java:25 translate  $vecnct = instructions.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-09-03 23:21:33:146 action-translator LogManager.java:25 attr [@-1,2:7='vecnct',<0>,321:26]
2023-09-03 23:21:33:146 action-translator LogManager.java:25 qattr [@-1,41:45='PUNTO',<0>,321:65].[@-1,47:50='line',<0>,321:71]
2023-09-03 23:21:33:146 action-translator LogManager.java:25 qattr [@-1,54:58='PUNTO',<0>,321:78].[@-1,60:62='pos',<0>,321:84]
2023-09-03 23:21:33:146 action-translator LogManager.java:25 qattr [@-1,66:74='ID_VALIDO',<0>,321:90].[@-1,76:79='text',<0>,321:100]
2023-09-03 23:21:33:146 action-translator LogManager.java:25 translate  $vepposct = instructions.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) 
2023-09-03 23:21:33:146 action-translator LogManager.java:25 attr [@-1,2:9='vepposct',<0>,325:2]
2023-09-03 23:21:33:147 action-translator LogManager.java:25 qattr [@-1,50:58='ID_VALIDO',<0>,325:50].[@-1,60:63='text',<0>,325:60]
2023-09-03 23:21:33:147 action-translator LogManager.java:25 qattr [@-1,67:69='op1',<0>,325:67].[@-1,71:71='e',<0>,325:71]
2023-09-03 23:21:33:147 action-translator LogManager.java:25 qattr [@-1,75:77='op2',<0>,325:75].[@-1,79:79='e',<0>,325:79]
2023-09-03 23:21:33:147 action-translator LogManager.java:25 qattr [@-1,83:100='listamatrizaddsubs',<0>,325:83].[@-1,102:111='blklimatas',<0>,325:102]
2023-09-03 23:21:33:147 action-translator LogManager.java:25 translate  $vepposct = instructions.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) 
2023-09-03 23:21:33:147 action-translator LogManager.java:25 attr [@-1,2:9='vepposct',<0>,327:2]
2023-09-03 23:21:33:147 action-translator LogManager.java:25 qattr [@-1,46:54='ID_VALIDO',<0>,327:46].[@-1,56:59='text',<0>,327:56]
2023-09-03 23:21:33:147 action-translator LogManager.java:25 qattr [@-1,63:65='op1',<0>,327:63].[@-1,67:67='e',<0>,327:67]
2023-09-03 23:21:33:147 action-translator LogManager.java:25 qattr [@-1,71:73='op2',<0>,327:71].[@-1,75:75='e',<0>,327:75]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 translate  $vepposct = instructions.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)
2023-09-03 23:21:33:148 action-translator LogManager.java:25 attr [@-1,2:9='vepposct',<0>,328:36]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 qattr [@-1,44:51='CORCHDER',<0>,328:78].[@-1,53:56='line',<0>,328:87]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 qattr [@-1,60:67='CORCHDER',<0>,328:94].[@-1,69:71='pos',<0>,328:103]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 qattr [@-1,75:83='ID_VALIDO',<0>,328:109].[@-1,85:88='text',<0>,328:119]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 qattr [@-1,92:95='expr',<0>,328:126].[@-1,97:97='e',<0>,328:131]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 translate 
    if ($DOS_PUNTOS != nil) {
        $matct = instructions.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        $matct = instructions.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }

2023-09-03 23:21:33:148 action-translator LogManager.java:25 attr [@-1,11:20='DOS_PUNTOS',<0>,334:9]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 attr [@-1,42:46='matct',<0>,335:9]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 qattr [@-1,85:87='VAR',<0>,335:52].[@-1,89:92='line',<0>,335:56]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 qattr [@-1,96:98='VAR',<0>,335:63].[@-1,100:102='pos',<0>,335:67]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 qattr [@-1,106:114='ID_VALIDO',<0>,335:73].[@-1,116:119='text',<0>,335:83]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 qattr [@-1,123:132='tipomatriz',<0>,335:90].[@-1,134:140='tipomat',<0>,335:101]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 qattr [@-1,144:152='defmatriz',<0>,335:111].[@-1,154:159='defmat',<0>,335:121]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 attr [@-1,186:190='matct',<0>,337:9]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 qattr [@-1,236:238='VAR',<0>,337:59].[@-1,240:243='line',<0>,337:63]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 qattr [@-1,247:249='VAR',<0>,337:70].[@-1,251:253='pos',<0>,337:74]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 qattr [@-1,257:265='ID_VALIDO',<0>,337:80].[@-1,267:270='text',<0>,337:90]
2023-09-03 23:21:33:148 action-translator LogManager.java:25 qattr [@-1,275:283='defmatriz',<0>,337:98].[@-1,285:290='defmat',<0>,337:108]
2023-09-03 23:21:33:149 action-translator LogManager.java:25 translate  
    $tipomat = instructions.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)

2023-09-03 23:21:33:149 action-translator LogManager.java:25 attr [@-1,8:14='tipomat',<0>,345:5]
2023-09-03 23:21:33:149 action-translator LogManager.java:25 qattr [@-1,51:58='CORCHIZQ',<0>,345:48].[@-1,60:63='line',<0>,345:57]
2023-09-03 23:21:33:149 action-translator LogManager.java:25 qattr [@-1,67:74='CORCHIZQ',<0>,345:64].[@-1,76:78='pos',<0>,345:73]
2023-09-03 23:21:33:149 action-translator LogManager.java:25 qattr [@-1,82:91='tipomatriz',<0>,345:79].[@-1,93:99='tipomat',<0>,345:90]
2023-09-03 23:21:33:149 action-translator LogManager.java:25 translate  
    $tipomat = instructions.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)

2023-09-03 23:21:33:149 action-translator LogManager.java:25 attr [@-1,8:14='tipomat',<0>,349:5]
2023-09-03 23:21:33:149 action-translator LogManager.java:25 qattr [@-1,46:53='CORCHIZQ',<0>,349:43].[@-1,55:58='line',<0>,349:52]
2023-09-03 23:21:33:149 action-translator LogManager.java:25 qattr [@-1,62:69='CORCHIZQ',<0>,349:59].[@-1,71:73='pos',<0>,349:68]
2023-09-03 23:21:33:149 action-translator LogManager.java:25 qattr [@-1,77:84='tipodato',<0>,349:74].[@-1,86:89='tipo',<0>,349:83]
2023-09-03 23:21:33:149 action-translator LogManager.java:25 translate  $defmat = $listavaloresmat.listvlamat
2023-09-03 23:21:33:149 action-translator LogManager.java:25 attr [@-1,2:7='defmat',<0>,354:20]
2023-09-03 23:21:33:149 action-translator LogManager.java:25 qattr [@-1,12:26='listavaloresmat',<0>,354:30].[@-1,28:37='listvlamat',<0>,354:46]
2023-09-03 23:21:33:149 action-translator LogManager.java:25 translate  $listvlamat = $listavaloresmat2.mylisttmatt
2023-09-03 23:21:33:149 action-translator LogManager.java:25 attr [@-1,2:11='listvlamat',<0>,358:39]
2023-09-03 23:21:33:149 action-translator LogManager.java:25 qattr [@-1,16:31='listavaloresmat2',<0>,358:53].[@-1,33:43='mylisttmatt',<0>,358:70]
2023-09-03 23:21:33:149 action-translator LogManager.java:25 translate  $listvlamat = $simplematriz.simmat
2023-09-03 23:21:33:149 action-translator LogManager.java:25 attr [@-1,2:11='listvlamat',<0>,359:17]
2023-09-03 23:21:33:150 action-translator LogManager.java:25 qattr [@-1,16:27='simplematriz',<0>,359:31].[@-1,29:34='simmat',<0>,359:44]
2023-09-03 23:21:33:155 action-translator LogManager.java:25 translate 
2023-09-03 23:21:33:155 action-translator LogManager.java:25 translate  $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)
2023-09-03 23:21:33:155 action-translator LogManager.java:25 attr [@-1,2:12='mylisttmatt',<0>,2:48]
2023-09-03 23:21:33:155 action-translator LogManager.java:25 qattr [@-1,50:64='listavaloresmat',<0>,2:96].[@-1,66:75='listvlamat',<0>,2:112]
2023-09-03 23:21:33:155 action-translator LogManager.java:25 translate  $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)
2023-09-03 23:21:33:155 action-translator LogManager.java:25 attr [@-1,2:12='mylisttmatt',<0>,3:45]
2023-09-03 23:21:33:155 action-translator LogManager.java:25 qattr [@-1,54:68='listaexpresions',<0>,3:97].[@-1,70:76='blkparf',<0>,3:113]
2023-09-03 23:21:33:155 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-03 23:21:33:155 action-translator LogManager.java:25 translate  $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)
2023-09-03 23:21:33:155 action-translator LogManager.java:25 attr [@-1,2:12='mylisttmatt',<0>,6:115]
2023-09-03 23:21:33:155 action-translator LogManager.java:25 qattr [@-1,58:59='op',<0>,6:171].[@-1,61:71='mylisttmatt',<0>,6:174]
2023-09-03 23:21:33:155 action-translator LogManager.java:25 qattr [@-1,75:89='listavaloresmat',<0>,6:188].[@-1,91:100='listvlamat',<0>,6:204]
2023-09-03 23:21:33:155 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-03 23:21:33:155 action-translator LogManager.java:25 translate 
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext

2023-09-03 23:21:33:155 action-translator LogManager.java:25 attr [@-1,7:13='blkparf',<0>,370:5]
2023-09-03 23:21:33:156 action-translator LogManager.java:25 translate 
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }

2023-09-03 23:21:33:156 action-translator LogManager.java:25 attr [@-1,106:112='blkparf',<0>,377:9]
2023-09-03 23:21:33:156 action-translator LogManager.java:25 attr [@-1,124:130='blkparf',<0>,377:27]
2023-09-03 23:21:33:156 action-translator LogManager.java:25 translate 
    $funpar = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)

2023-09-03 23:21:33:156 action-translator LogManager.java:25 attr [@-1,7:12='funpar',<0>,385:5]
2023-09-03 23:21:33:156 action-translator LogManager.java:25 qattr [@-1,51:54='COMA',<0>,385:49].[@-1,56:59='line',<0>,385:54]
2023-09-03 23:21:33:156 action-translator LogManager.java:25 qattr [@-1,63:66='COMA',<0>,385:61].[@-1,68:70='pos',<0>,385:66]
2023-09-03 23:21:33:156 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,385:72].[@-1,79:79='e',<0>,385:77]
2023-09-03 23:21:33:156 action-translator LogManager.java:25 translate 
    $funpar = instructions.NewArregloParametro($expr.e)

2023-09-03 23:21:33:156 action-translator LogManager.java:25 attr [@-1,7:12='funpar',<0>,389:5]
2023-09-03 23:21:33:156 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,389:48].[@-1,55:55='e',<0>,389:53]
2023-09-03 23:21:33:156 action-translator LogManager.java:25 translate  $simmat = instructions.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)
2023-09-03 23:21:33:156 action-translator LogManager.java:25 attr [@-1,2:7='simmat',<0>,395:2]
2023-09-03 23:21:33:156 action-translator LogManager.java:25 qattr [@-1,44:53='tipomatriz',<0>,395:44].[@-1,55:61='tipomat',<0>,395:55]
2023-09-03 23:21:33:156 action-translator LogManager.java:25 qattr [@-1,65:66='op',<0>,395:65].[@-1,68:73='simmat',<0>,395:68]
2023-09-03 23:21:33:156 action-translator LogManager.java:25 qattr [@-1,77:82='NUMBER',<0>,395:77].[@-1,84:87='text',<0>,395:84]
2023-09-03 23:21:33:156 action-translator LogManager.java:25 qattr [@-1,91:96='NUMBER',<0>,395:91].[@-1,98:101='line',<0>,395:98]
2023-09-03 23:21:33:156 action-translator LogManager.java:25 qattr [@-1,104:109='NUMBER',<0>,395:104].[@-1,111:113='pos',<0>,395:111]
2023-09-03 23:21:33:157 action-translator LogManager.java:25 translate  $simmat = instructions.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)
2023-09-03 23:21:33:157 action-translator LogManager.java:25 attr [@-1,2:7='simmat',<0>,397:2]
2023-09-03 23:21:33:157 action-translator LogManager.java:25 qattr [@-1,44:53='tipomatriz',<0>,397:44].[@-1,55:61='tipomat',<0>,397:55]
2023-09-03 23:21:33:157 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,397:65].[@-1,70:70='e',<0>,397:70]
2023-09-03 23:21:33:157 action-translator LogManager.java:25 qattr [@-1,74:79='NUMBER',<0>,397:74].[@-1,81:84='text',<0>,397:81]
2023-09-03 23:21:33:157 action-translator LogManager.java:25 qattr [@-1,88:93='NUMBER',<0>,397:88].[@-1,95:98='line',<0>,397:95]
2023-09-03 23:21:33:157 action-translator LogManager.java:25 qattr [@-1,101:106='NUMBER',<0>,397:101].[@-1,108:110='pos',<0>,397:108]
2023-09-03 23:21:33:157 action-translator LogManager.java:25 translate 
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext

2023-09-03 23:21:33:157 action-translator LogManager.java:25 attr [@-1,7:16='blklimatas',<0>,402:5]
2023-09-03 23:21:33:157 action-translator LogManager.java:25 translate 
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }

2023-09-03 23:21:33:157 action-translator LogManager.java:25 attr [@-1,107:116='blklimatas',<0>,409:9]
2023-09-03 23:21:33:157 action-translator LogManager.java:25 attr [@-1,128:137='blklimatas',<0>,409:30]
2023-09-03 23:21:33:157 action-translator LogManager.java:25 translate 
    $lmas = instructions.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)

2023-09-03 23:21:33:157 action-translator LogManager.java:25 attr [@-1,7:10='lmas',<0>,417:5]
2023-09-03 23:21:33:157 action-translator LogManager.java:25 qattr [@-1,49:56='CORCHIZQ',<0>,417:47].[@-1,58:61='line',<0>,417:56]
2023-09-03 23:21:33:157 action-translator LogManager.java:25 qattr [@-1,65:72='CORCHIZQ',<0>,417:63].[@-1,74:76='pos',<0>,417:72]
2023-09-03 23:21:33:157 action-translator LogManager.java:25 qattr [@-1,80:83='expr',<0>,417:78].[@-1,85:85='e',<0>,417:83]
2023-09-03 23:21:33:157 action-translator LogManager.java:25 translate 
    $struck = instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt);

2023-09-03 23:21:33:157 action-translator LogManager.java:25 setAttr [@-1,7:12='struck',<0>,426:5] [@-1,15:106=' instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt)',<0>,426:13]
2023-09-03 23:21:33:157 action-translator LogManager.java:25 translate  instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt)
2023-09-03 23:21:33:158 action-translator LogManager.java:25 qattr [@-1,25:30='STRUCT',<0>,425:25].[@-1,32:35='line',<0>,425:32]
2023-09-03 23:21:33:158 action-translator LogManager.java:25 qattr [@-1,39:44='STRUCT',<0>,425:39].[@-1,46:48='pos',<0>,425:46]
2023-09-03 23:21:33:158 action-translator LogManager.java:25 qattr [@-1,52:60='ID_VALIDO',<0>,425:52].[@-1,62:65='text',<0>,425:62]
2023-09-03 23:21:33:158 action-translator LogManager.java:25 qattr [@-1,69:82='listaatributos',<0>,425:69].[@-1,84:90='blkstlt',<0>,425:84]
2023-09-03 23:21:33:158 action-translator LogManager.java:25 translate 
    $blkstlt = []interface{}{}
    var listInt []IListaatributoContext

2023-09-03 23:21:33:158 action-translator LogManager.java:25 attr [@-1,7:13='blkstlt',<0>,431:5]
2023-09-03 23:21:33:158 action-translator LogManager.java:25 translate 
    listInt = localctx.(*ListaatributosContext).GetListatstr()
    for _, e := range listInt {
        $blkstlt = append($blkstlt, e.GetListatstr())
    }

2023-09-03 23:21:33:158 action-translator LogManager.java:25 attr [@-1,108:114='blkstlt',<0>,438:9]
2023-09-03 23:21:33:158 action-translator LogManager.java:25 attr [@-1,126:132='blkstlt',<0>,438:27]
2023-09-03 23:21:33:158 action-translator LogManager.java:25 translate 
    if $IG != nil{
        if $tip3.text != "" {
            $listatstr = instructions.NewStructAtributosConTE2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text, $expr.e)
        }else{                        
            $listatstr = instructions.NewStructAtributosConTE($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo, $expr.e)
        }        
    }else{ 
        if $tip3.text != "" {                        
            $listatstr = instructions.NewStructAtributosConT2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text) 
        }else{            
            $listatstr = instructions.NewStructAtributosConT($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo) 
        }
    }

2023-09-03 23:21:33:158 action-translator LogManager.java:25 attr [@-1,10:11='IG',<0>,446:8]
2023-09-03 23:21:33:158 action-translator LogManager.java:25 qattr [@-1,34:37='tip3',<0>,447:12].[@-1,39:42='text',<0>,447:17]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 attr [@-1,66:74='listatstr',<0>,448:13]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,117:120='tip1',<0>,448:64].[@-1,122:125='line',<0>,448:69]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,129:132='tip1',<0>,448:76].[@-1,134:136='pos',<0>,448:81]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,140:143='tip1',<0>,448:87].[@-1,145:148='text',<0>,448:92]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,152:155='tip4',<0>,448:99].[@-1,157:160='text',<0>,448:104]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,164:167='tip3',<0>,448:111].[@-1,169:172='text',<0>,448:116]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,176:179='expr',<0>,448:123].[@-1,181:181='e',<0>,448:128]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 attr [@-1,238:246='listatstr',<0>,450:13]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,288:291='tip1',<0>,450:63].[@-1,293:296='line',<0>,450:68]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,300:303='tip1',<0>,450:75].[@-1,305:307='pos',<0>,450:80]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,311:314='tip1',<0>,450:86].[@-1,316:319='text',<0>,450:91]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,323:326='tip4',<0>,450:98].[@-1,328:331='text',<0>,450:103]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,335:338='tip2',<0>,450:110].[@-1,340:343='tipo',<0>,450:115]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,347:350='expr',<0>,450:122].[@-1,352:352='e',<0>,450:127]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,400:403='tip3',<0>,453:12].[@-1,405:408='text',<0>,453:17]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 attr [@-1,456:464='listatstr',<0>,454:13]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,506:509='tip1',<0>,454:63].[@-1,511:514='line',<0>,454:68]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,518:521='tip1',<0>,454:75].[@-1,523:525='pos',<0>,454:80]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,529:532='tip1',<0>,454:86].[@-1,534:537='text',<0>,454:91]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,541:544='tip4',<0>,454:98].[@-1,546:549='text',<0>,454:103]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,553:556='tip3',<0>,454:110].[@-1,558:561='text',<0>,454:115]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 attr [@-1,607:615='listatstr',<0>,456:13]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,656:659='tip1',<0>,456:62].[@-1,661:664='line',<0>,456:67]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,668:671='tip1',<0>,456:74].[@-1,673:675='pos',<0>,456:79]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,679:682='tip1',<0>,456:85].[@-1,684:687='text',<0>,456:90]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,691:694='tip4',<0>,456:97].[@-1,696:699='text',<0>,456:102]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,703:706='tip2',<0>,456:109].[@-1,708:711='tipo',<0>,456:114]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 translate 
    if $IG != nil{
        $listatstr = instructions.NewStructAtributosConE($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text, $expr.e)
    }else{
        $listatstr = instructions.NewStructAtributos($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text)
    }

2023-09-03 23:21:33:159 action-translator LogManager.java:25 attr [@-1,10:11='IG',<0>,462:8]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 attr [@-1,31:39='listatstr',<0>,463:9]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,80:83='tipo',<0>,463:58].[@-1,85:88='line',<0>,463:63]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,92:95='tipo',<0>,463:70].[@-1,97:99='pos',<0>,463:75]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,103:106='tipo',<0>,463:81].[@-1,108:111='text',<0>,463:86]
2023-09-03 23:21:33:159 action-translator LogManager.java:25 qattr [@-1,115:123='ID_VALIDO',<0>,463:93].[@-1,125:128='text',<0>,463:103]
2023-09-03 23:21:33:160 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,463:110].[@-1,137:137='e',<0>,463:115]
2023-09-03 23:21:33:160 action-translator LogManager.java:25 attr [@-1,162:170='listatstr',<0>,465:9]
2023-09-03 23:21:33:160 action-translator LogManager.java:25 qattr [@-1,207:210='tipo',<0>,465:54].[@-1,212:215='line',<0>,465:59]
2023-09-03 23:21:33:160 action-translator LogManager.java:25 qattr [@-1,219:222='tipo',<0>,465:66].[@-1,224:226='pos',<0>,465:71]
2023-09-03 23:21:33:160 action-translator LogManager.java:25 qattr [@-1,230:233='tipo',<0>,465:77].[@-1,235:238='text',<0>,465:82]
2023-09-03 23:21:33:160 action-translator LogManager.java:25 qattr [@-1,242:250='ID_VALIDO',<0>,465:89].[@-1,252:255='text',<0>,465:99]
2023-09-03 23:21:33:160 action-translator LogManager.java:25 translate 
    if $MUTATING != nil{
        //$listatstr = instructions.NewStruckMutatingFunction($funciondeclaracioncontrol.fdc)
    } else {
        //$listatstr = instructions.NewStruckFunction($funciondeclaracioncontrol.fdc)
    }

2023-09-03 23:21:33:160 action-translator LogManager.java:25 attr [@-1,10:17='MUTATING',<0>,470:8]
2023-09-03 23:21:33:160 action-translator LogManager.java:25 attr [@-1,39:47='listatstr',<0>,471:11]
2023-09-03 23:21:33:160 action-translator LogManager.java:25 qattr [@-1,91:115='funciondeclaracioncontrol',<0>,471:63].[@-1,117:119='fdc',<0>,471:89]
2023-09-03 23:21:33:160 action-translator LogManager.java:25 attr [@-1,148:156='listatstr',<0>,473:11]
2023-09-03 23:21:33:160 action-translator LogManager.java:25 qattr [@-1,192:216='funciondeclaracioncontrol',<0>,473:55].[@-1,218:220='fdc',<0>,473:81]
2023-09-03 23:21:33:161 action-translator LogManager.java:25 translate 
2023-09-03 23:21:33:162 action-translator LogManager.java:25 translate 
2023-09-03 23:21:33:162 action-translator LogManager.java:25 translate 
2023-09-03 23:21:33:162 action-translator LogManager.java:25 translate 
2023-09-03 23:21:33:162 action-translator LogManager.java:25 translate 
2023-09-03 23:21:33:162 action-translator LogManager.java:25 translate 
2023-09-03 23:21:33:162 action-translator LogManager.java:25 translate 
2023-09-03 23:21:33:163 action-translator LogManager.java:25 translate 
    $fdc = instructions.NewFuncionesDeclaracionRP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $tipodato.tipo, $blockinterno.blkint)

2023-09-03 23:21:33:163 action-translator LogManager.java:25 attr [@-1,7:9='fdc',<0>,513:5]
2023-09-03 23:21:33:163 action-translator LogManager.java:25 qattr [@-1,53:61='ID_VALIDO',<0>,513:51].[@-1,63:66='line',<0>,513:61]
2023-09-03 23:21:33:163 action-translator LogManager.java:25 qattr [@-1,70:78='ID_VALIDO',<0>,513:68].[@-1,80:82='pos',<0>,513:78]
2023-09-03 23:21:33:164 action-translator LogManager.java:25 qattr [@-1,86:94='ID_VALIDO',<0>,513:84].[@-1,96:99='text',<0>,513:94]
2023-09-03 23:21:33:164 action-translator LogManager.java:25 qattr [@-1,103:116='listaparametro',<0>,513:101].[@-1,118:127='listparfun',<0>,513:116]
2023-09-03 23:21:33:164 action-translator LogManager.java:25 qattr [@-1,131:138='tipodato',<0>,513:129].[@-1,140:143='tipo',<0>,513:138]
2023-09-03 23:21:33:164 action-translator LogManager.java:25 qattr [@-1,147:158='blockinterno',<0>,513:145].[@-1,160:165='blkint',<0>,513:158]
2023-09-03 23:21:33:164 action-translator LogManager.java:25 translate 
    $fdc = instructions.NewFuncionesDeclaracionR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $blockinterno.blkint)

2023-09-03 23:21:33:164 action-translator LogManager.java:25 attr [@-1,7:9='fdc',<0>,517:5]
2023-09-03 23:21:33:164 action-translator LogManager.java:25 qattr [@-1,52:60='ID_VALIDO',<0>,517:50].[@-1,62:65='line',<0>,517:60]
2023-09-03 23:21:33:164 action-translator LogManager.java:25 qattr [@-1,69:77='ID_VALIDO',<0>,517:67].[@-1,79:81='pos',<0>,517:77]
2023-09-03 23:21:33:164 action-translator LogManager.java:25 qattr [@-1,85:93='ID_VALIDO',<0>,517:83].[@-1,95:98='text',<0>,517:93]
2023-09-03 23:21:33:164 action-translator LogManager.java:25 qattr [@-1,102:109='tipodato',<0>,517:100].[@-1,111:114='tipo',<0>,517:109]
2023-09-03 23:21:33:164 action-translator LogManager.java:25 qattr [@-1,118:129='blockinterno',<0>,517:116].[@-1,131:136='blkint',<0>,517:129]
2023-09-03 23:21:33:164 action-translator LogManager.java:25 translate 
   $fdc = instructions.NewFuncionesDeclaracionP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $blockinterno.blkint)

2023-09-03 23:21:33:165 action-translator LogManager.java:25 attr [@-1,6:8='fdc',<0>,521:4]
2023-09-03 23:21:33:165 action-translator LogManager.java:25 qattr [@-1,51:59='ID_VALIDO',<0>,521:49].[@-1,61:64='line',<0>,521:59]
2023-09-03 23:21:33:165 action-translator LogManager.java:25 qattr [@-1,68:76='ID_VALIDO',<0>,521:66].[@-1,78:80='pos',<0>,521:76]
2023-09-03 23:21:33:165 action-translator LogManager.java:25 qattr [@-1,84:92='ID_VALIDO',<0>,521:82].[@-1,94:97='text',<0>,521:92]
2023-09-03 23:21:33:165 action-translator LogManager.java:25 qattr [@-1,101:114='listaparametro',<0>,521:99].[@-1,116:125='listparfun',<0>,521:114]
2023-09-03 23:21:33:165 action-translator LogManager.java:25 qattr [@-1,129:140='blockinterno',<0>,521:127].[@-1,142:147='blkint',<0>,521:140]
2023-09-03 23:21:33:165 action-translator LogManager.java:25 translate 
    $fdc = instructions.NewFuncionesDeclaracion($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $blockinterno.blkint)

2023-09-03 23:21:33:165 action-translator LogManager.java:25 attr [@-1,7:9='fdc',<0>,525:5]
2023-09-03 23:21:33:165 action-translator LogManager.java:25 qattr [@-1,51:59='ID_VALIDO',<0>,525:49].[@-1,61:64='line',<0>,525:59]
2023-09-03 23:21:33:165 action-translator LogManager.java:25 qattr [@-1,68:76='ID_VALIDO',<0>,525:66].[@-1,78:80='pos',<0>,525:76]
2023-09-03 23:21:33:165 action-translator LogManager.java:25 qattr [@-1,84:92='ID_VALIDO',<0>,525:82].[@-1,94:97='text',<0>,525:92]
2023-09-03 23:21:33:165 action-translator LogManager.java:25 qattr [@-1,101:112='blockinterno',<0>,525:99].[@-1,114:119='blkint',<0>,525:112]
2023-09-03 23:21:33:165 action-translator LogManager.java:25 translate 
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true, true, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true, $op3.listparfun )
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false,$op3.listparfun )
        } 
    }      

2023-09-03 23:21:33:165 action-translator LogManager.java:25 attr [@-1,10:11='op',<0>,532:8]
2023-09-03 23:21:33:165 action-translator LogManager.java:25 attr [@-1,34:38='INOUT',<0>,533:12]
2023-09-03 23:21:33:166 action-translator LogManager.java:25 attr [@-1,62:71='listparfun',<0>,534:13]
2023-09-03 23:21:33:166 action-translator LogManager.java:25 qattr [@-1,116:118='op2',<0>,534:67].[@-1,120:123='line',<0>,534:71]
2023-09-03 23:21:33:166 action-translator LogManager.java:25 qattr [@-1,127:129='op2',<0>,534:78].[@-1,131:133='pos',<0>,534:82]
2023-09-03 23:21:33:166 action-translator LogManager.java:25 qattr [@-1,137:138='op',<0>,534:88].[@-1,140:143='text',<0>,534:91]
2023-09-03 23:21:33:166 action-translator LogManager.java:25 qattr [@-1,147:149='op2',<0>,534:98].[@-1,151:154='text',<0>,534:102]
2023-09-03 23:21:33:166 action-translator LogManager.java:25 qattr [@-1,158:165='tipodato',<0>,534:109].[@-1,167:170='tipo',<0>,534:118]
2023-09-03 23:21:33:166 action-translator LogManager.java:25 qattr [@-1,186:188='op3',<0>,534:137].[@-1,190:199='listparfun',<0>,534:141]
2023-09-03 23:21:33:166 action-translator LogManager.java:25 attr [@-1,234:243='listparfun',<0>,536:13]
2023-09-03 23:21:33:166 action-translator LogManager.java:25 qattr [@-1,288:290='op2',<0>,536:67].[@-1,292:295='line',<0>,536:71]
2023-09-03 23:21:33:166 action-translator LogManager.java:25 qattr [@-1,299:301='op2',<0>,536:78].[@-1,303:305='pos',<0>,536:82]
2023-09-03 23:21:33:167 action-translator LogManager.java:25 qattr [@-1,309:310='op',<0>,536:88].[@-1,312:315='text',<0>,536:91]
2023-09-03 23:21:33:167 action-translator LogManager.java:25 qattr [@-1,319:321='op2',<0>,536:98].[@-1,323:326='text',<0>,536:102]
2023-09-03 23:21:33:167 action-translator LogManager.java:25 qattr [@-1,330:337='tipodato',<0>,536:109].[@-1,339:342='tipo',<0>,536:118]
2023-09-03 23:21:33:167 action-translator LogManager.java:25 qattr [@-1,359:361='op3',<0>,536:138].[@-1,363:372='listparfun',<0>,536:142]
2023-09-03 23:21:33:167 action-translator LogManager.java:25 attr [@-1,413:417='INOUT',<0>,539:12]
2023-09-03 23:21:33:168 action-translator LogManager.java:25 attr [@-1,441:450='listparfun',<0>,540:13]
2023-09-03 23:21:33:168 action-translator LogManager.java:25 qattr [@-1,495:497='op2',<0>,540:67].[@-1,499:502='line',<0>,540:71]
2023-09-03 23:21:33:168 action-translator LogManager.java:25 qattr [@-1,506:508='op2',<0>,540:78].[@-1,510:512='pos',<0>,540:82]
2023-09-03 23:21:33:168 action-translator LogManager.java:25 qattr [@-1,520:522='op2',<0>,540:92].[@-1,524:527='text',<0>,540:96]
2023-09-03 23:21:33:168 action-translator LogManager.java:25 qattr [@-1,531:538='tipodato',<0>,540:103].[@-1,540:543='tipo',<0>,540:112]
2023-09-03 23:21:33:168 action-translator LogManager.java:25 qattr [@-1,560:562='op3',<0>,540:132].[@-1,564:573='listparfun',<0>,540:136]
2023-09-03 23:21:33:168 action-translator LogManager.java:25 attr [@-1,608:617='listparfun',<0>,542:13]
2023-09-03 23:21:33:168 action-translator LogManager.java:25 qattr [@-1,662:664='op2',<0>,542:67].[@-1,666:669='line',<0>,542:71]
2023-09-03 23:21:33:168 action-translator LogManager.java:25 qattr [@-1,673:675='op2',<0>,542:78].[@-1,677:679='pos',<0>,542:82]
2023-09-03 23:21:33:169 action-translator LogManager.java:25 qattr [@-1,687:689='op2',<0>,542:92].[@-1,691:694='text',<0>,542:96]
2023-09-03 23:21:33:169 action-translator LogManager.java:25 qattr [@-1,698:705='tipodato',<0>,542:103].[@-1,707:710='tipo',<0>,542:112]
2023-09-03 23:21:33:169 action-translator LogManager.java:25 qattr [@-1,727:729='op3',<0>,542:132].[@-1,731:740='listparfun',<0>,542:136]
2023-09-03 23:21:33:169 action-translator LogManager.java:25 translate 
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true , true)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true)
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false)
    } 
    }
    

2023-09-03 23:21:33:169 action-translator LogManager.java:25 attr [@-1,10:11='op',<0>,548:8]
2023-09-03 23:21:33:170 action-translator LogManager.java:25 attr [@-1,34:38='INOUT',<0>,549:12]
2023-09-03 23:21:33:170 action-translator LogManager.java:25 attr [@-1,62:71='listparfun',<0>,550:13]
2023-09-03 23:21:33:170 action-translator LogManager.java:25 qattr [@-1,111:113='op2',<0>,550:62].[@-1,115:118='line',<0>,550:66]
2023-09-03 23:21:33:170 action-translator LogManager.java:25 qattr [@-1,122:124='op2',<0>,550:73].[@-1,126:128='pos',<0>,550:77]
2023-09-03 23:21:33:170 action-translator LogManager.java:25 qattr [@-1,132:133='op',<0>,550:83].[@-1,135:138='text',<0>,550:86]
2023-09-03 23:21:33:170 action-translator LogManager.java:25 qattr [@-1,142:144='op2',<0>,550:93].[@-1,146:149='text',<0>,550:97]
2023-09-03 23:21:33:170 action-translator LogManager.java:25 qattr [@-1,153:160='tipodato',<0>,550:104].[@-1,162:165='tipo',<0>,550:113]
2023-09-03 23:21:33:170 action-translator LogManager.java:25 attr [@-1,212:221='listparfun',<0>,552:13]
2023-09-03 23:21:33:170 action-translator LogManager.java:25 qattr [@-1,261:263='op2',<0>,552:62].[@-1,265:268='line',<0>,552:66]
2023-09-03 23:21:33:170 action-translator LogManager.java:25 qattr [@-1,272:274='op2',<0>,552:73].[@-1,276:278='pos',<0>,552:77]
2023-09-03 23:21:33:170 action-translator LogManager.java:25 qattr [@-1,282:283='op',<0>,552:83].[@-1,285:288='text',<0>,552:86]
2023-09-03 23:21:33:170 action-translator LogManager.java:25 qattr [@-1,292:294='op2',<0>,552:93].[@-1,296:299='text',<0>,552:97]
2023-09-03 23:21:33:171 action-translator LogManager.java:25 qattr [@-1,303:310='tipodato',<0>,552:104].[@-1,312:315='tipo',<0>,552:113]
2023-09-03 23:21:33:171 action-translator LogManager.java:25 attr [@-1,368:372='INOUT',<0>,555:12]
2023-09-03 23:21:33:171 action-translator LogManager.java:25 attr [@-1,396:405='listparfun',<0>,556:13]
2023-09-03 23:21:33:171 action-translator LogManager.java:25 qattr [@-1,445:447='op2',<0>,556:62].[@-1,449:452='line',<0>,556:66]
2023-09-03 23:21:33:171 action-translator LogManager.java:25 qattr [@-1,456:458='op2',<0>,556:73].[@-1,460:462='pos',<0>,556:77]
2023-09-03 23:21:33:171 action-translator LogManager.java:25 qattr [@-1,470:472='op2',<0>,556:87].[@-1,474:477='text',<0>,556:91]
2023-09-03 23:21:33:171 action-translator LogManager.java:25 qattr [@-1,481:488='tipodato',<0>,556:98].[@-1,490:493='tipo',<0>,556:107]
2023-09-03 23:21:33:171 action-translator LogManager.java:25 attr [@-1,540:549='listparfun',<0>,558:13]
2023-09-03 23:21:33:171 action-translator LogManager.java:25 qattr [@-1,589:591='op2',<0>,558:62].[@-1,593:596='line',<0>,558:66]
2023-09-03 23:21:33:171 action-translator LogManager.java:25 qattr [@-1,600:602='op2',<0>,558:73].[@-1,604:606='pos',<0>,558:77]
2023-09-03 23:21:33:171 action-translator LogManager.java:25 qattr [@-1,614:616='op2',<0>,558:87].[@-1,618:621='text',<0>,558:91]
2023-09-03 23:21:33:171 action-translator LogManager.java:25 qattr [@-1,625:632='tipodato',<0>,558:98].[@-1,634:637='tipo',<0>,558:107]
2023-09-03 23:21:33:172 action-translator LogManager.java:25 translate 
2023-09-03 23:21:33:172 action-translator LogManager.java:25 translate 
2023-09-03 23:21:33:172 action-translator LogManager.java:25 translate 
2023-09-03 23:21:33:173 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-09-03 23:21:33:173 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,577:29]
2023-09-03 23:21:33:174 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,577:59].[@-1,38:41='line',<0>,577:65]
2023-09-03 23:21:33:174 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,577:71].[@-1,50:52='pos',<0>,577:77]
2023-09-03 23:21:33:174 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,577:82].[@-1,60:60='e',<0>,577:87]
2023-09-03 23:21:33:175 action-translator LogManager.java:25 translate  $intemb = instructions.NewFuncionIntEmbebida($expr.e)
2023-09-03 23:21:33:175 action-translator LogManager.java:25 attr [@-1,2:7='intemb',<0>,580:27]
2023-09-03 23:21:33:175 action-translator LogManager.java:25 qattr [@-1,47:50='expr',<0>,580:72].[@-1,52:52='e',<0>,580:77]
2023-09-03 23:21:33:175 action-translator LogManager.java:25 translate  $floemb = instructions.NewFuncionFloatEmbebida($expr.e)
2023-09-03 23:21:33:176 action-translator LogManager.java:25 attr [@-1,2:7='floemb',<0>,583:29]
2023-09-03 23:21:33:176 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,583:76].[@-1,54:54='e',<0>,583:81]
2023-09-03 23:21:33:176 action-translator LogManager.java:25 translate  $stremb = instructions.NewFuncionStringEmbebida($expr.e)
2023-09-03 23:21:33:176 action-translator LogManager.java:25 attr [@-1,2:7='stremb',<0>,586:30]
2023-09-03 23:21:33:176 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,586:78].[@-1,55:55='e',<0>,586:83]
2023-09-03 23:21:33:481 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-09-03 23:21:33:482 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-09-03 23:21:33:556 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-09-03 23:21:33:556 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

