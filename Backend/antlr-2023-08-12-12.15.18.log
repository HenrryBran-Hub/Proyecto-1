2023-08-12 12:15:17:022 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACT (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NULO (BLOCK (ALT 'nil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'breack'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGO (BLOCK (ALT '...'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNCION (BLOCK (ALT 'func'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE CADENA (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (RULE ID_VALIDO (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CHARACTER (BLOCK (ALT '\'' (BLOCK (ALT ESCAPE) (ALT (~ (SET ['\\\r\n])))) '\''))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [\\'tnr]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IG (BLOCK (ALT '='))) (RULE DOS_PUNTOS (BLOCK (ALT ':'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE CIERRE_INTE (BLOCK (ALT '?'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE SUMA (BLOCK (ALT '+='))) (RULE RESTA (BLOCK (ALT '-='))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE RETORNO (BLOCK (ALT '->'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-12 12:15:17:042 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACT (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NULO (BLOCK (ALT 'nil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'breack'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGO (BLOCK (ALT '...'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNCION (BLOCK (ALT 'func'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE CADENA (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (RULE ID_VALIDO (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CHARACTER (BLOCK (ALT '\'' (BLOCK (ALT ESCAPE) (ALT (~ (SET ['\\\r\n])))) '\''))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [\\'tnr]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IG (BLOCK (ALT '='))) (RULE DOS_PUNTOS (BLOCK (ALT ':'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE CIERRE_INTE (BLOCK (ALT '?'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE SUMA (BLOCK (ALT '+='))) (RULE RESTA (BLOCK (ALT '-='))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE RETORNO (BLOCK (ALT '->'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-12 12:15:17:542 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declavarible { $inst = $declavarible.decvbl}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr {$decvbl = instructions.NewVariableDeclaration($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) AND (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) OR (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($FAL.line, $FAL.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        symbol, ok := ast.GetSymbol($ID_VALIDO.text)
        if ok {
            $e = expressions.NewPrimitive(symbol.Lin, symbol.Col, symbol.Valor, symbol.Tipo)
        } else {
            ast.SetError(fmt.Sprintf("ERROR: La variable %s no ha sido declarada", $ID_VALIDO.text))
            $e = expressions.NewPrimitive(0, 0, nil, environment.NULL)
        }
    })))))
2023-08-12 12:15:17:542 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declavarible { $inst = $declavarible.decvbl}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr {$decvbl = instructions.NewVariableDeclaration($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) AND (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) OR (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($FAL.line, $FAL.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        symbol, ok := ast.GetSymbol($ID_VALIDO.text)
        if ok {
            $e = expressions.NewPrimitive(symbol.Lin, symbol.Col, symbol.Valor, symbol.Tipo)
        } else {
            ast.SetError(fmt.Sprintf("ERROR: La variable %s no ha sido declarada", $ID_VALIDO.text))
            $e = expressions.NewPrimitive(0, 0, nil, environment.NULL)
        }
    })))))
2023-08-12 12:15:17:542 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declavarible { $inst = $declavarible.decvbl}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr {$decvbl = instructions.NewVariableDeclaration($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) AND (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) OR (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($FAL.line, $FAL.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        symbol, ok := ast.GetSymbol($ID_VALIDO.text)
        if ok {
            $e = expressions.NewPrimitive(symbol.Lin, symbol.Col, symbol.Valor, symbol.Tipo)
        } else {
            ast.SetError(fmt.Sprintf("ERROR: La variable %s no ha sido declarada", $ID_VALIDO.text))
            $e = expressions.NewPrimitive(0, 0, nil, environment.NULL)
        }
    })))))
2023-08-12 12:15:17:552 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) RULES)
2023-08-12 12:15:17:572 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} PARIZQ<tokenIndex=295> expr<tokenIndex=297> PARDER<tokenIndex=299> { $e = $expr.e } 
        | NUMBER<tokenIndex=305>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=311>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=317> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=323> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | CHARACTER<tokenIndex=329> 
    { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($FAL.line, $FAL.pos, str[1:len(str)-1], environment.CHARACTER) 
    } 
        | ID_VALIDO<tokenIndex=335>
     {
        symbol, ok := ast.GetSymbol($ID_VALIDO.text)
        if ok {
            $e = expressions.NewPrimitive(symbol.Lin, symbol.Col, symbol.Valor, symbol.Tipo)
        } else {
            ast.SetError(fmt.Sprintf("ERROR: La variable %s no ha sido declarada", $ID_VALIDO.text))
            $e = expressions.NewPrimitive(0, 0, nil, environment.NULL)
        }
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MUL<tokenIndex=174>|DIV<tokenIndex=176>) right=expr<tokenIndex=181,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(ADD<tokenIndex=194>|SUB<tokenIndex=196>) right=expr<tokenIndex=201,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(MAY_IG<tokenIndex=214>|MAYOR<tokenIndex=216>) right=expr<tokenIndex=221,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(MEN_IG<tokenIndex=234>|MENOR<tokenIndex=236>) right=expr<tokenIndex=241,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=(IG_IG<tokenIndex=254>|DIF<tokenIndex=256>) right=expr<tokenIndex=261,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> AND<tokenIndex=271> right=expr<tokenIndex=275,p=10> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> OR<tokenIndex=285> right=expr<tokenIndex=289,p=9> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-12 12:15:17:592 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 295))) (expr (ELEMENT_OPTIONS (= tokenIndex 297))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 299))) { $e = $expr.e }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 305))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 311))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 317))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 323))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (CHARACTER (ELEMENT_OPTIONS (= tokenIndex 329))) { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($FAL.line, $FAL.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT (ID_VALIDO (ELEMENT_OPTIONS (= tokenIndex 335))) {
        symbol, ok := ast.GetSymbol($ID_VALIDO.text)
        if ok {
            $e = expressions.NewPrimitive(symbol.Lin, symbol.Col, symbol.Valor, symbol.Tipo)
        } else {
            ast.SetError(fmt.Sprintf("ERROR: La variable %s no ha sido declarada", $ID_VALIDO.text))
            $e = expressions.NewPrimitive(0, 0, nil, environment.NULL)
        }
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 174))) (DIV (ELEMENT_OPTIONS (= tokenIndex 176))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 181) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 194))) (SUB (ELEMENT_OPTIONS (= tokenIndex 196))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 201) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 214))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 216))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 221) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 234))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 236))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 241) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 254))) (DIF (ELEMENT_OPTIONS (= tokenIndex 256))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 261) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (AND (ELEMENT_OPTIONS (= tokenIndex 271))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 275) (= p 10)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (OR (ELEMENT_OPTIONS (= tokenIndex 285))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 289) (= p 9)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-12 12:15:17:602 grammar LogManager.java:25 import INT=1
2023-08-12 12:15:17:602 grammar LogManager.java:25 import FLOAT=2
2023-08-12 12:15:17:602 grammar LogManager.java:25 import STRING=3
2023-08-12 12:15:17:602 grammar LogManager.java:25 import BOOL=4
2023-08-12 12:15:17:602 grammar LogManager.java:25 import CHARACT=5
2023-08-12 12:15:17:602 grammar LogManager.java:25 import TRU=6
2023-08-12 12:15:17:602 grammar LogManager.java:25 import FAL=7
2023-08-12 12:15:17:602 grammar LogManager.java:25 import VAR=8
2023-08-12 12:15:17:602 grammar LogManager.java:25 import LET=9
2023-08-12 12:15:17:602 grammar LogManager.java:25 import NULO=10
2023-08-12 12:15:17:602 grammar LogManager.java:25 import IF=11
2023-08-12 12:15:17:602 grammar LogManager.java:25 import ELSE=12
2023-08-12 12:15:17:602 grammar LogManager.java:25 import SWITCH=13
2023-08-12 12:15:17:602 grammar LogManager.java:25 import CASE=14
2023-08-12 12:15:17:602 grammar LogManager.java:25 import DEFAULT=15
2023-08-12 12:15:17:602 grammar LogManager.java:25 import BREAK=16
2023-08-12 12:15:17:602 grammar LogManager.java:25 import CONTINUE=17
2023-08-12 12:15:17:602 grammar LogManager.java:25 import FOR=18
2023-08-12 12:15:17:602 grammar LogManager.java:25 import IN=19
2023-08-12 12:15:17:602 grammar LogManager.java:25 import RANGO=20
2023-08-12 12:15:17:602 grammar LogManager.java:25 import WHILE=21
2023-08-12 12:15:17:602 grammar LogManager.java:25 import GUARD=22
2023-08-12 12:15:17:602 grammar LogManager.java:25 import RETURN=23
2023-08-12 12:15:17:602 grammar LogManager.java:25 import FUNCION=24
2023-08-12 12:15:17:602 grammar LogManager.java:25 import PRINT=25
2023-08-12 12:15:17:602 grammar LogManager.java:25 import INOUT=26
2023-08-12 12:15:17:602 grammar LogManager.java:25 import APPEND=27
2023-08-12 12:15:17:602 grammar LogManager.java:25 import REMOVE=28
2023-08-12 12:15:17:602 grammar LogManager.java:25 import REMOVELAST=29
2023-08-12 12:15:17:602 grammar LogManager.java:25 import COUNT=30
2023-08-12 12:15:17:602 grammar LogManager.java:25 import ISEMPTY=31
2023-08-12 12:15:17:602 grammar LogManager.java:25 import AT=32
2023-08-12 12:15:17:602 grammar LogManager.java:25 import REPEATING=33
2023-08-12 12:15:17:602 grammar LogManager.java:25 import STRUCT=34
2023-08-12 12:15:17:602 grammar LogManager.java:25 import MUTATING=35
2023-08-12 12:15:17:602 grammar LogManager.java:25 import NUMBER=36
2023-08-12 12:15:17:602 grammar LogManager.java:25 import CADENA=37
2023-08-12 12:15:17:602 grammar LogManager.java:25 import ID_VALIDO=38
2023-08-12 12:15:17:602 grammar LogManager.java:25 import CHARACTER=39
2023-08-12 12:15:17:602 grammar LogManager.java:25 import WS=40
2023-08-12 12:15:17:602 grammar LogManager.java:25 import IG=41
2023-08-12 12:15:17:602 grammar LogManager.java:25 import DOS_PUNTOS=42
2023-08-12 12:15:17:602 grammar LogManager.java:25 import PUNTOCOMA=43
2023-08-12 12:15:17:602 grammar LogManager.java:25 import CIERRE_INTE=44
2023-08-12 12:15:17:602 grammar LogManager.java:25 import PARIZQ=45
2023-08-12 12:15:17:602 grammar LogManager.java:25 import PARDER=46
2023-08-12 12:15:17:602 grammar LogManager.java:25 import DIF=47
2023-08-12 12:15:17:602 grammar LogManager.java:25 import IG_IG=48
2023-08-12 12:15:17:612 grammar LogManager.java:25 import NOT=49
2023-08-12 12:15:17:612 grammar LogManager.java:25 import OR=50
2023-08-12 12:15:17:612 grammar LogManager.java:25 import AND=51
2023-08-12 12:15:17:612 grammar LogManager.java:25 import MAY_IG=52
2023-08-12 12:15:17:612 grammar LogManager.java:25 import MEN_IG=53
2023-08-12 12:15:17:612 grammar LogManager.java:25 import MAYOR=54
2023-08-12 12:15:17:612 grammar LogManager.java:25 import MENOR=55
2023-08-12 12:15:17:612 grammar LogManager.java:25 import MODULO=56
2023-08-12 12:15:17:612 grammar LogManager.java:25 import MUL=57
2023-08-12 12:15:17:612 grammar LogManager.java:25 import DIV=58
2023-08-12 12:15:17:612 grammar LogManager.java:25 import ADD=59
2023-08-12 12:15:17:612 grammar LogManager.java:25 import SUB=60
2023-08-12 12:15:17:612 grammar LogManager.java:25 import SUMA=61
2023-08-12 12:15:17:612 grammar LogManager.java:25 import RESTA=62
2023-08-12 12:15:17:612 grammar LogManager.java:25 import LLAVEIZQ=63
2023-08-12 12:15:17:612 grammar LogManager.java:25 import LLAVEDER=64
2023-08-12 12:15:17:612 grammar LogManager.java:25 import RETORNO=65
2023-08-12 12:15:17:612 grammar LogManager.java:25 import COMA=66
2023-08-12 12:15:17:612 grammar LogManager.java:25 import PUNTO=67
2023-08-12 12:15:17:612 grammar LogManager.java:25 import GUIONBAJO=68
2023-08-12 12:15:17:612 grammar LogManager.java:25 import CORCHIZQ=69
2023-08-12 12:15:17:612 grammar LogManager.java:25 import CORCHDER=70
2023-08-12 12:15:17:612 grammar LogManager.java:25 import WHITESPACE=71
2023-08-12 12:15:17:612 grammar LogManager.java:25 import COMMENT=72
2023-08-12 12:15:17:612 grammar LogManager.java:25 import LINE_COMMENT=73
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'Int'=1
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'Float'=2
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'String'=3
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'Bool'=4
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'Character'=5
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'true'=6
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'false'=7
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'var'=8
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'let'=9
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'nil'=10
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'if'=11
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'else'=12
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'switch'=13
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'case'=14
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'default'=15
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'breack'=16
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'continue'=17
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'for'=18
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'in'=19
2023-08-12 12:15:17:616 grammar LogManager.java:25 import '...'=20
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'while'=21
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'guard'=22
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'return'=23
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'func'=24
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'print'=25
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'inout'=26
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'append'=27
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'remove'=28
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'removeLast'=29
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'count'=30
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'isEmpty'=31
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'at'=32
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'repeating'=33
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'struct'=34
2023-08-12 12:15:17:616 grammar LogManager.java:25 import 'mutating'=35
2023-08-12 12:15:17:616 grammar LogManager.java:25 import '='=41
2023-08-12 12:15:17:616 grammar LogManager.java:25 import ':'=42
2023-08-12 12:15:17:616 grammar LogManager.java:25 import ';'=43
2023-08-12 12:15:17:616 grammar LogManager.java:25 import '?'=44
2023-08-12 12:15:17:616 grammar LogManager.java:25 import '('=45
2023-08-12 12:15:17:616 grammar LogManager.java:25 import ')'=46
2023-08-12 12:15:17:616 grammar LogManager.java:25 import '!='=47
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '=='=48
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '!'=49
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '||'=50
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '&&'=51
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '>='=52
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '<='=53
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '>'=54
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '<'=55
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '%'=56
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '*'=57
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '/'=58
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '+'=59
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '-'=60
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '+='=61
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '-='=62
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '{'=63
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '}'=64
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '->'=65
2023-08-12 12:15:17:622 grammar LogManager.java:25 import ','=66
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '.'=67
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '_'=68
2023-08-12 12:15:17:622 grammar LogManager.java:25 import '['=69
2023-08-12 12:15:17:622 grammar LogManager.java:25 import ']'=70
2023-08-12 12:15:17:622 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, STRING=3, BOOL=4, CHARACT=5, TRU=6, FAL=7, VAR=8, LET=9, NULO=10, IF=11, ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, BREAK=16, CONTINUE=17, FOR=18, IN=19, RANGO=20, WHILE=21, GUARD=22, RETURN=23, FUNCION=24, PRINT=25, INOUT=26, APPEND=27, REMOVE=28, REMOVELAST=29, COUNT=30, ISEMPTY=31, AT=32, REPEATING=33, STRUCT=34, MUTATING=35, NUMBER=36, CADENA=37, ID_VALIDO=38, CHARACTER=39, WS=40, IG=41, DOS_PUNTOS=42, PUNTOCOMA=43, CIERRE_INTE=44, PARIZQ=45, PARDER=46, DIF=47, IG_IG=48, NOT=49, OR=50, AND=51, MAY_IG=52, MEN_IG=53, MAYOR=54, MENOR=55, MODULO=56, MUL=57, DIV=58, ADD=59, SUB=60, SUMA=61, RESTA=62, LLAVEIZQ=63, LLAVEDER=64, RETORNO=65, COMA=66, PUNTO=67, GUIONBAJO=68, CORCHIZQ=69, CORCHDER=70, WHITESPACE=71, COMMENT=72, LINE_COMMENT=73, 'Int'=1, 'Float'=2, 'String'=3, 'Bool'=4, 'Character'=5, 'true'=6, 'false'=7, 'var'=8, 'let'=9, 'nil'=10, 'if'=11, 'else'=12, 'switch'=13, 'case'=14, 'default'=15, 'breack'=16, 'continue'=17, 'for'=18, 'in'=19, '...'=20, 'while'=21, 'guard'=22, 'return'=23, 'func'=24, 'print'=25, 'inout'=26, 'append'=27, 'remove'=28, 'removeLast'=29, 'count'=30, 'isEmpty'=31, 'at'=32, 'repeating'=33, 'struct'=34, 'mutating'=35, '='=41, ':'=42, ';'=43, '?'=44, '('=45, ')'=46, '!='=47, '=='=48, '!'=49, '||'=50, '&&'=51, '>='=52, '<='=53, '>'=54, '<'=55, '%'=56, '*'=57, '/'=58, '+'=59, '-'=60, '+='=61, '-='=62, '{'=63, '}'=64, '->'=65, ','=66, '.'=67, '_'=68, '['=69, ']'=70}
2023-08-12 12:15:17:622 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, STRING=3, BOOL=4, CHARACT=5, TRU=6, FAL=7, VAR=8, LET=9, NULO=10, IF=11, ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, BREAK=16, CONTINUE=17, FOR=18, IN=19, RANGO=20, WHILE=21, GUARD=22, RETURN=23, FUNCION=24, PRINT=25, INOUT=26, APPEND=27, REMOVE=28, REMOVELAST=29, COUNT=30, ISEMPTY=31, AT=32, REPEATING=33, STRUCT=34, MUTATING=35, NUMBER=36, CADENA=37, ID_VALIDO=38, CHARACTER=39, WS=40, IG=41, DOS_PUNTOS=42, PUNTOCOMA=43, CIERRE_INTE=44, PARIZQ=45, PARDER=46, DIF=47, IG_IG=48, NOT=49, OR=50, AND=51, MAY_IG=52, MEN_IG=53, MAYOR=54, MENOR=55, MODULO=56, MUL=57, DIV=58, ADD=59, SUB=60, SUMA=61, RESTA=62, LLAVEIZQ=63, LLAVEDER=64, RETORNO=65, COMA=66, PUNTO=67, GUIONBAJO=68, CORCHIZQ=69, CORCHDER=70, WHITESPACE=71, COMMENT=72, LINE_COMMENT=73}
2023-08-12 12:15:17:622 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'String'=3, 'Bool'=4, 'Character'=5, 'true'=6, 'false'=7, 'var'=8, 'let'=9, 'nil'=10, 'if'=11, 'else'=12, 'switch'=13, 'case'=14, 'default'=15, 'breack'=16, 'continue'=17, 'for'=18, 'in'=19, '...'=20, 'while'=21, 'guard'=22, 'return'=23, 'func'=24, 'print'=25, 'inout'=26, 'append'=27, 'remove'=28, 'removeLast'=29, 'count'=30, 'isEmpty'=31, 'at'=32, 'repeating'=33, 'struct'=34, 'mutating'=35, '='=41, ':'=42, ';'=43, '?'=44, '('=45, ')'=46, '!='=47, '=='=48, '!'=49, '||'=50, '&&'=51, '>='=52, '<='=53, '>'=54, '<'=55, '%'=56, '*'=57, '/'=58, '+'=59, '-'=60, '+='=61, '-='=62, '{'=63, '}'=64, '->'=65, ','=66, '.'=67, '_'=68, '['=69, ']'=70}
2023-08-12 12:15:17:644 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-12 12:15:17:644 LL1 LogManager.java:25 look=[{8, 25}, <EOF>]
2023-08-12 12:15:17:644 LL1 LogManager.java:25 LL(1)? true
2023-08-12 12:15:17:644 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-12 12:15:17:644 LL1 LogManager.java:25 look=[25, 8]
2023-08-12 12:15:17:645 LL1 LogManager.java:25 LL(1)? true
2023-08-12 12:15:17:645 LL1 LogManager.java:25 
DECISION 2 in rule tipodato
2023-08-12 12:15:17:645 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5]
2023-08-12 12:15:17:645 LL1 LogManager.java:25 LL(1)? true
2023-08-12 12:15:17:645 LL1 LogManager.java:25 
DECISION 3 in rule expr
2023-08-12 12:15:17:645 LL1 LogManager.java:25 look=[45, 36, 3, 6, 7, 39, 38]
2023-08-12 12:15:17:645 LL1 LogManager.java:25 LL(1)? true
2023-08-12 12:15:17:645 LL1 LogManager.java:25 
DECISION 4 in rule expr
2023-08-12 12:15:17:645 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-12 12:15:17:645 LL1 LogManager.java:25 LL(1)? false
2023-08-12 12:15:17:645 LL1 LogManager.java:25 
DECISION 5 in rule expr
2023-08-12 12:15:17:645 LL1 LogManager.java:25 look=[null, null]
2023-08-12 12:15:17:645 LL1 LogManager.java:25 LL(1)? false
2023-08-12 12:15:17:648 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-08-12 12:15:17:656 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-12 12:15:17:656 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,18:9]
2023-08-12 12:15:17:657 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,18:17].[@-1,28:30='blk',<0>,18:23]
2023-08-12 12:15:17:657 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-12 12:15:17:657 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,24:5]
2023-08-12 12:15:17:657 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-12 12:15:17:657 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,31:13]
2023-08-12 12:15:17:657 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,31:27]
2023-08-12 12:15:17:657 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-12 12:15:17:657 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,37:14]
2023-08-12 12:15:17:657 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,37:22].[@-1,20:23='prnt',<0>,37:32]
2023-08-12 12:15:17:657 action-translator LogManager.java:25 translate  $inst = $declavarible.decvbl
2023-08-12 12:15:17:657 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,38:17]
2023-08-12 12:15:17:657 action-translator LogManager.java:25 qattr [@-1,10:21='declavarible',<0>,38:25].[@-1,23:28='decvbl',<0>,38:38]
2023-08-12 12:15:17:657 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-12 12:15:17:657 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,42:29]
2023-08-12 12:15:17:657 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,42:59].[@-1,38:41='line',<0>,42:65]
2023-08-12 12:15:17:657 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,42:71].[@-1,50:52='pos',<0>,42:77]
2023-08-12 12:15:17:657 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,42:82].[@-1,60:60='e',<0>,42:87]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate $decvbl = instructions.NewVariableDeclaration($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,46:44]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,47:55='ID_VALIDO',<0>,46:90].[@-1,57:60='line',<0>,46:100]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,64:72='ID_VALIDO',<0>,46:107].[@-1,74:76='pos',<0>,46:117]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,80:88='ID_VALIDO',<0>,46:123].[@-1,90:93='text',<0>,46:133]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,97:104='tipodato',<0>,46:140].[@-1,106:109='tipo',<0>,46:149]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,113:116='expr',<0>,46:156].[@-1,118:118='e',<0>,46:161]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate  $tipo = environment.INTEGER 
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,50:8]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate  $tipo = environment.FLOAT 
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,51:10]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate  $tipo = environment.STRING 
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,52:11]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate  $tipo = environment.BOOLEAN 
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,53:9]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate  $tipo = environment.CHARACTER 
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,54:12]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate 
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:82]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:87].[@-1,12:12='e',<0>,2:92]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,5:30].[@-1,39:42='text',<0>,5:37]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,6:43].[@-1,102:105='text',<0>,6:50]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,10:13]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,10:43].[@-1,240:243='line',<0>,10:50]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,10:56].[@-1,253:255='pos',<0>,10:63]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,12:37].[@-1,341:344='text',<0>,12:44]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,16:13]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,16:43].[@-1,474:477='line',<0>,16:50]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,16:56].[@-1,487:489='pos',<0>,16:63]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,21:16].[@-1,25:28='text',<0>,21:23]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,22:9]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,22:39].[@-1,77:80='line',<0>,22:46]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,22:53].[@-1,91:93='pos',<0>,22:60]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,24:32]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,24:62].[@-1,36:39='line',<0>,24:66]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,24:73].[@-1,47:49='pos',<0>,24:77]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,25:32]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,25:62].[@-1,36:39='line',<0>,25:66]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,25:73].[@-1,47:49='pos',<0>,25:77]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate  
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($FAL.line, $FAL.pos, str[1:len(str)-1], environment.CHARACTER) 
    
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,19:27='CHARACTER',<0>,28:16].[@-1,29:32='text',<0>,28:26]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,44:44='e',<0>,29:9]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,74:76='FAL',<0>,29:39].[@-1,78:81='line',<0>,29:43]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,85:87='FAL',<0>,29:50].[@-1,89:91='pos',<0>,29:54]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate 
        symbol, ok := ast.GetSymbol($ID_VALIDO.text)
        if ok {
            $e = expressions.NewPrimitive(symbol.Lin, symbol.Col, symbol.Valor, symbol.Tipo)
        } else {
            ast.SetError(fmt.Sprintf("ERROR: La variable %s no ha sido declarada", $ID_VALIDO.text))
            $e = expressions.NewPrimitive(0, 0, nil, environment.NULL)
        }
    
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,39:47='ID_VALIDO',<0>,33:37].[@-1,49:52='text',<0>,33:47]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,86:86='e',<0>,35:13]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,269:277='ID_VALIDO',<0>,37:84].[@-1,279:282='text',<0>,37:94]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,300:300='e',<0>,38:13]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,43:139]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,43:169].[@-1,37:41='start',<0>,43:174]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,43:192].[@-1,60:64='start',<0>,43:197]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,43:217].[@-1,85:85='e',<0>,43:222]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,43:226].[@-1,92:95='text',<0>,43:229]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,43:236].[@-1,105:105='e',<0>,43:242]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,44:149]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,44:179].[@-1,37:41='start',<0>,44:184]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,44:202].[@-1,60:64='start',<0>,44:207]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,44:227].[@-1,85:85='e',<0>,44:232]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,44:236].[@-1,92:95='text',<0>,44:239]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,44:246].[@-1,105:105='e',<0>,44:252]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-12 12:15:17:662 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-12 12:15:17:662 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,45:154]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,45:184].[@-1,37:41='start',<0>,45:189]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,45:207].[@-1,60:64='start',<0>,45:212]
2023-08-12 12:15:17:662 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,45:232].[@-1,85:85='e',<0>,45:237]
2023-08-12 12:15:17:672 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,45:241].[@-1,92:95='text',<0>,45:244]
2023-08-12 12:15:17:672 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,45:251].[@-1,105:105='e',<0>,45:257]
2023-08-12 12:15:17:672 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-12 12:15:17:672 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-12 12:15:17:672 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,46:154]
2023-08-12 12:15:17:672 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,46:184].[@-1,37:41='start',<0>,46:189]
2023-08-12 12:15:17:673 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,46:207].[@-1,60:64='start',<0>,46:212]
2023-08-12 12:15:17:673 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,46:232].[@-1,85:85='e',<0>,46:237]
2023-08-12 12:15:17:673 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,46:241].[@-1,92:95='text',<0>,46:244]
2023-08-12 12:15:17:673 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,46:251].[@-1,105:105='e',<0>,46:257]
2023-08-12 12:15:17:673 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-12 12:15:17:673 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-12 12:15:17:673 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,47:151]
2023-08-12 12:15:17:673 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,47:181].[@-1,37:41='start',<0>,47:186]
2023-08-12 12:15:17:673 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,47:204].[@-1,60:64='start',<0>,47:209]
2023-08-12 12:15:17:674 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,47:229].[@-1,85:85='e',<0>,47:234]
2023-08-12 12:15:17:674 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,47:238].[@-1,92:95='text',<0>,47:241]
2023-08-12 12:15:17:674 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,47:248].[@-1,105:105='e',<0>,47:254]
2023-08-12 12:15:17:674 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-12 12:15:17:674 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-12 12:15:17:674 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,48:122]
2023-08-12 12:15:17:674 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,48:152].[@-1,37:41='start',<0>,48:157]
2023-08-12 12:15:17:674 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,48:175].[@-1,60:64='start',<0>,48:180]
2023-08-12 12:15:17:674 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,48:200].[@-1,85:85='e',<0>,48:205]
2023-08-12 12:15:17:675 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,48:209].[@-1,92:95='text',<0>,48:212]
2023-08-12 12:15:17:675 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,48:219].[@-1,105:105='e',<0>,48:225]
2023-08-12 12:15:17:675 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-12 12:15:17:675 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-12 12:15:17:675 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,49:120]
2023-08-12 12:15:17:675 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,49:150].[@-1,37:41='start',<0>,49:155]
2023-08-12 12:15:17:675 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,49:173].[@-1,60:64='start',<0>,49:178]
2023-08-12 12:15:17:675 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,49:198].[@-1,85:85='e',<0>,49:203]
2023-08-12 12:15:17:675 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,49:207].[@-1,92:95='text',<0>,49:210]
2023-08-12 12:15:17:675 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,49:217].[@-1,105:105='e',<0>,49:223]
2023-08-12 12:15:17:677 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-12 12:15:17:677 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-12 12:15:17:677 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-12 12:15:17:677 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-12 12:15:17:677 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-12 12:15:17:677 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-12 12:15:17:677 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-12 12:15:18:006 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-08-12 12:15:18:006 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-08-12 12:15:18:332 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-08-12 12:15:18:332 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

