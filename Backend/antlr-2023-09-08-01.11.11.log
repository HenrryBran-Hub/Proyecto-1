2023-09-08 01:11:09:888 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACT (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NULO (BLOCK (ALT 'nil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGO (BLOCK (ALT '...'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNCION (BLOCK (ALT 'func'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE CADENA (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (RULE ID_VALIDO (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CHARACTER (BLOCK (ALT '\'' (BLOCK (ALT ESCAPE) (ALT (~ (SET ['\\\r\n])))) '\''))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [\\'tnr]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IG (BLOCK (ALT '='))) (RULE DOS_PUNTOS (BLOCK (ALT ':'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE CIERRE_INTE (BLOCK (ALT '?'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE SUMA (BLOCK (ALT '+='))) (RULE RESTA (BLOCK (ALT '-='))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE RETORNO (BLOCK (ALT '->'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DIRME (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-08 01:11:09:902 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACT (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NULO (BLOCK (ALT 'nil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGO (BLOCK (ALT '...'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNCION (BLOCK (ALT 'func'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE CADENA (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (RULE ID_VALIDO (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CHARACTER (BLOCK (ALT '\'' (BLOCK (ALT ESCAPE) (ALT (~ (SET ['\\\r\n])))) '\''))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [\\'tnr]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IG (BLOCK (ALT '='))) (RULE DOS_PUNTOS (BLOCK (ALT ':'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE CIERRE_INTE (BLOCK (ALT '?'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE SUMA (BLOCK (ALT '+='))) (RULE RESTA (BLOCK (ALT '-='))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE RETORNO (BLOCK (ALT '->'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DIRME (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-08 01:11:10:259 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $matrizcontrol.matct}) (ALT structcontrol { $inst = $structcontrol.struck}) (ALT funciondeclaracioncontrol { $inst = $funciondeclaracioncontrol.fdc}) (ALT funcionllamadacontrol { $inst = $funcionllamadacontrol.flctl}) (ALT structexpr (? (BLOCK (ALT PUNTOCOMA))) { $inst = $structexpr.strexpr}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $matrizcontrol.matct}) (ALT funcionllamadacontrol { $insint = $funcionllamadacontrol.flctl}) (ALT structexpr (? (BLOCK (ALT PUNTOCOMA))) { $insint = $structexpr.strexpr}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr {$decvbl = instructions.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = instructions.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = instructions.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = instructions.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = instructions.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = instructions.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = instructions.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = instructions.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}) (ALT stringembebida { $e = $stringembebida.stremb}) (ALT funcionllamadacontrolConRetorno { $e = $funcionllamadacontrolConRetorno.flctlret}) (ALT llamadastruct { $e = $llamadastruct.llmstru}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = instructions.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = instructions.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = instructions.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = instructions.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = instructions.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=instructions.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = instructions.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR (= op1 ID_VALIDO) IN (= op2 ID_VALIDO) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForId($FOR.line, $FOR.pos, $op1.text, $op2.text, $blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = instructions.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = instructions.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = instructions.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN (= op expr) {
    $rect = instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}) (ALT RETURN {
    $rect = instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = instructions.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = instructions.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = instructions.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = instructions.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = instructions.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = instructions.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = instructions.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = instructions.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = instructions.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = instructions.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = instructions.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs { $vepposct = instructions.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER { $vepposct = instructions.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) }) (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = instructions.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE matrizcontrol (returns interfaces.Instruction matct) (BLOCK (ALT VAR ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS tipomatriz))) IG defmatriz {
    if ($DOS_PUNTOS != nil) {
        $matct = instructions.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        $matct = instructions.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }
}))) (RULE tipomatriz (returns interfaces.Expression tipomat) (BLOCK (ALT CORCHIZQ tipomatriz CORCHDER { 
    $tipomat = instructions.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)
}) (ALT CORCHIZQ tipodato CORCHDER { 
    $tipomat = instructions.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)
}))) (RULE defmatriz (returns interfaces.Instruction defmat) (BLOCK (ALT listavaloresmat { $defmat = $listavaloresmat.listvlamat}))) (RULE listavaloresmat (returns interfaces.Instruction listvlamat) (BLOCK (ALT CORCHIZQ listavaloresmat2 CORCHDER { $listvlamat = $listavaloresmat2.mylisttmatt}) (ALT simplematriz { $listvlamat = $simplematriz.simmat}))) (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (= op listavaloresmat2) COMA listavaloresmat { $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}) (ALT listavaloresmat { $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT listaexpresions { $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)}))) (RULE listaexpresions (returns []interface{} blkparf) (@ init {
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= funpar listaexpresion)))) {
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }
}))) (RULE listaexpresion (returns interfaces.Expression funpar) (BLOCK (ALT COMA expr {
    $funpar = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $funpar = instructions.NewArregloParametro($expr.e)
}))) (RULE simplematriz (returns interfaces.Instruction simmat) (BLOCK (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS (= op simplematriz) COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}) (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS expr COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}))) (RULE listamatrizaddsubs (returns []interface{} blklimatas) (@ init {
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= lmas listamatrizaddsub)))) {
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }
}))) (RULE listamatrizaddsub (returns interfaces.Expression lmas) (BLOCK (ALT CORCHIZQ expr CORCHDER {
    $lmas = instructions.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)
}))) (RULE structcontrol (returns interfaces.Instruction struck) (BLOCK (ALT STRUCT ID_VALIDO LLAVEIZQ listaatributos LLAVEDER {
    $struck = instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt);
}))) (RULE listaatributos (returns []interface{} blkstlt) (@ init {
    $blkstlt = []interface{}{}
    var listInt []IListaatributoContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= listatstr listaatributo)))) {
    listInt = localctx.(*ListaatributosContext).GetListatstr()
    for _, e := range listInt {
        $blkstlt = append($blkstlt, e.GetListatstr())
    }
}))) (RULE listaatributo (returns interfaces.Instruction listatstr) (BLOCK (ALT (= tip1 (BLOCK (ALT LET) (ALT VAR))) (= tip4 ID_VALIDO) DOS_PUNTOS (BLOCK (ALT (= tip2 tipodato)) (ALT (= tip3 ID_VALIDO))) (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        if $tip3.text != "" {
            $listatstr = instructions.NewStructAtributosConTE2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text, $expr.e)
        }else{                        
            $listatstr = instructions.NewStructAtributosConTE($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo, $expr.e)
        }        
    }else{ 
        if $tip3.text != "" {                        
            $listatstr = instructions.NewStructAtributosConT2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text) 
        }else{            
            $listatstr = instructions.NewStructAtributosConT($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo) 
        }
    }
}) (ALT (= tipo (BLOCK (ALT LET) (ALT VAR))) ID_VALIDO (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        $listatstr = instructions.NewStructAtributosConE($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text, $expr.e)
    }else{
        $listatstr = instructions.NewStructAtributos($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text)
    }
}) (ALT (? (BLOCK (ALT MUTATING))) funciondeclaracioncontrol {
    if $MUTATING != nil{
        $listatstr = instructions.NewStruckFunctionMutating($funciondeclaracioncontrol.fdc)
    } else {
        $listatstr = instructions.NewStruckFunction($funciondeclaracioncontrol.fdc)
    }
}))) (RULE structexpr (returns interfaces.Instruction strexpr) (BLOCK (ALT (= op1 ID_VALIDO) DOS_PUNTOS (= op ID_VALIDO) (= op2 ID_VALIDO) PARIZQ ldupla PARDER {
    $strexpr = instructions.NewStruckVariable($op1.line, $op1.pos, $op.text, $op1.text, $op2.text, $ldupla.lduplist, true)
}))) (RULE ldupla (returns interfaces.Instruction lduplist) (BLOCK (ALT ID_VALIDO DOS_PUNTOS expr COMA (= op ldupla) { 
    $lduplist = instructions.NewStructListDuple($ID_VALIDO.text, $expr.e, $op.lduplist, true)
}) (ALT ID_VALIDO DOS_PUNTOS expr {
    $lduplist = instructions.NewStructDuple($ID_VALIDO.text, $expr.e, false)  
}))) (RULE llamadastruct (returns interfaces.Expression llmstru) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) {
    $llmstru = instructions.NewStruckLlamadaExp($op.line, $op.pos, $op.text, $op1.text)
}))) (RULE asignacionparametrostruct (returns interfaces.Instruction llmstruasig) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) IG expr {
    //$llmstruasig = instructions.NewStrucAsigna($op.line, $op.pos, $op.text, $op1.text, $expr.e)
}))) (RULE llamadafuncionstruct (returns interfaces.Instruction llmstrufun) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) PARIZQ PARDER {
    //$llmstrufun = instructions.NewStruckLlamadaFun($op.line, $op.pos, $op.text, $op1.text)
}))) (RULE funciondeclaracioncontrol (returns interfaces.Instruction fdc) (BLOCK (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionRP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER LLAVEIZQ blockinterno LLAVEDER {
   $fdc = instructions.NewFuncionesDeclaracionP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracion($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $blockinterno.blkint)
}))) (RULE listaparametro (returns interfaces.Instruction listparfun) (BLOCK (ALT (? (BLOCK (ALT (= op (BLOCK (ALT ID_VALIDO) (ALT GUIONBAJO)))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato COMA (= op3 listaparametro) {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true, true, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true, $op3.listparfun )
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false,$op3.listparfun )
        } 
    }      
}) (ALT (? (BLOCK (ALT (= op (BLOCK (ALT ID_VALIDO) (ALT GUIONBAJO)))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true , true)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true)
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false)
    } 
    }
    
}))) (RULE funcionllamadacontrol (returns interfaces.Instruction flctl) (BLOCK (ALT ID_VALIDO PARIZQ listaparametrosllamada PARDER {
    $flctl = instructions.NewFuncionesControlP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametrosllamada.lpll)
}) (ALT ID_VALIDO PARIZQ PARDER {
    $flctl = instructions.NewFuncionesControl($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE funcionllamadacontrolConRetorno (returns interfaces.Expression flctlret) (BLOCK (ALT ID_VALIDO PARIZQ listaparametrosllamada PARDER {
    $flctlret = instructions.NewFuncionesControlPR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametrosllamada.lpll)
}) (ALT ID_VALIDO PARIZQ PARDER {
    $flctlret = instructions.NewFuncionesControlR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE listaparametrosllamada (returns interfaces.Instruction lpll) (BLOCK (ALT DIRME ID_VALIDO COMA (= op2 listaparametrosllamada) {
    $lpll = instructions.NewFuncionesLlamadaList1($DIRME.line, $DIRME.pos, $ID_VALIDO.text, $op2.lpll)    
}) (ALT DIRME ID_VALIDO {
    $lpll = instructions.NewFuncionesLlamadaList2($DIRME.line, $DIRME.pos, $ID_VALIDO.text)    
}) (ALT (? (BLOCK (ALT ID_VALIDO (= op DOS_PUNTOS)))) expr COMA (= op2 listaparametrosllamada) {
    if $op != nil{
        $lpll = instructions.NewFuncionesLlamadaList3($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e, $op2.lpll)
    }else{
        $lpll = instructions.NewFuncionesLlamadaList4($COMA.line, $COMA.pos, $expr.e, $op2.lpll)
    }
}) (ALT (? (BLOCK (ALT ID_VALIDO (= op DOS_PUNTOS)))) expr {
    if $op != nil{
        $lpll = instructions.NewFuncionesLlamadaList5($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
    }else{
        $lpll = instructions.NewFuncionesLlamadaList6($expr.e)
    }     
}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listaexpresions PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listaexpresions.blkparf)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = instructions.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = instructions.NewFuncionFloatEmbebida($expr.e)}))) (RULE stringembebida (returns interfaces.Expression stremb) (BLOCK (ALT STRING PARIZQ expr PARDER { $stremb = instructions.NewFuncionStringEmbebida($expr.e)})))))
2023-09-08 01:11:10:269 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $matrizcontrol.matct}) (ALT structcontrol { $inst = $structcontrol.struck}) (ALT funciondeclaracioncontrol { $inst = $funciondeclaracioncontrol.fdc}) (ALT funcionllamadacontrol { $inst = $funcionllamadacontrol.flctl}) (ALT structexpr (? (BLOCK (ALT PUNTOCOMA))) { $inst = $structexpr.strexpr}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $matrizcontrol.matct}) (ALT funcionllamadacontrol { $insint = $funcionllamadacontrol.flctl}) (ALT structexpr (? (BLOCK (ALT PUNTOCOMA))) { $insint = $structexpr.strexpr}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr {$decvbl = instructions.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = instructions.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = instructions.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = instructions.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = instructions.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = instructions.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = instructions.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = instructions.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}) (ALT stringembebida { $e = $stringembebida.stremb}) (ALT funcionllamadacontrolConRetorno { $e = $funcionllamadacontrolConRetorno.flctlret}) (ALT llamadastruct { $e = $llamadastruct.llmstru}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = instructions.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = instructions.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = instructions.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = instructions.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = instructions.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=instructions.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = instructions.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR (= op1 ID_VALIDO) IN (= op2 ID_VALIDO) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForId($FOR.line, $FOR.pos, $op1.text, $op2.text, $blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = instructions.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = instructions.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = instructions.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN (= op expr) {
    $rect = instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}) (ALT RETURN {
    $rect = instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = instructions.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = instructions.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = instructions.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = instructions.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = instructions.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = instructions.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = instructions.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = instructions.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = instructions.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = instructions.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = instructions.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs { $vepposct = instructions.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER { $vepposct = instructions.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) }) (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = instructions.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE matrizcontrol (returns interfaces.Instruction matct) (BLOCK (ALT VAR ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS tipomatriz))) IG defmatriz {
    if ($DOS_PUNTOS != nil) {
        $matct = instructions.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        $matct = instructions.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }
}))) (RULE tipomatriz (returns interfaces.Expression tipomat) (BLOCK (ALT CORCHIZQ tipomatriz CORCHDER { 
    $tipomat = instructions.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)
}) (ALT CORCHIZQ tipodato CORCHDER { 
    $tipomat = instructions.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)
}))) (RULE defmatriz (returns interfaces.Instruction defmat) (BLOCK (ALT listavaloresmat { $defmat = $listavaloresmat.listvlamat}))) (RULE listavaloresmat (returns interfaces.Instruction listvlamat) (BLOCK (ALT CORCHIZQ listavaloresmat2 CORCHDER { $listvlamat = $listavaloresmat2.mylisttmatt}) (ALT simplematriz { $listvlamat = $simplematriz.simmat}))) (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (= op listavaloresmat2) COMA listavaloresmat { $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}) (ALT listavaloresmat { $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT listaexpresions { $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)}))) (RULE listaexpresions (returns []interface{} blkparf) (@ init {
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= funpar listaexpresion)))) {
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }
}))) (RULE listaexpresion (returns interfaces.Expression funpar) (BLOCK (ALT COMA expr {
    $funpar = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $funpar = instructions.NewArregloParametro($expr.e)
}))) (RULE simplematriz (returns interfaces.Instruction simmat) (BLOCK (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS (= op simplematriz) COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}) (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS expr COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}))) (RULE listamatrizaddsubs (returns []interface{} blklimatas) (@ init {
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= lmas listamatrizaddsub)))) {
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }
}))) (RULE listamatrizaddsub (returns interfaces.Expression lmas) (BLOCK (ALT CORCHIZQ expr CORCHDER {
    $lmas = instructions.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)
}))) (RULE structcontrol (returns interfaces.Instruction struck) (BLOCK (ALT STRUCT ID_VALIDO LLAVEIZQ listaatributos LLAVEDER {
    $struck = instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt);
}))) (RULE listaatributos (returns []interface{} blkstlt) (@ init {
    $blkstlt = []interface{}{}
    var listInt []IListaatributoContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= listatstr listaatributo)))) {
    listInt = localctx.(*ListaatributosContext).GetListatstr()
    for _, e := range listInt {
        $blkstlt = append($blkstlt, e.GetListatstr())
    }
}))) (RULE listaatributo (returns interfaces.Instruction listatstr) (BLOCK (ALT (= tip1 (SET LET VAR)) (= tip4 ID_VALIDO) DOS_PUNTOS (BLOCK (ALT (= tip2 tipodato)) (ALT (= tip3 ID_VALIDO))) (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        if $tip3.text != "" {
            $listatstr = instructions.NewStructAtributosConTE2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text, $expr.e)
        }else{                        
            $listatstr = instructions.NewStructAtributosConTE($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo, $expr.e)
        }        
    }else{ 
        if $tip3.text != "" {                        
            $listatstr = instructions.NewStructAtributosConT2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text) 
        }else{            
            $listatstr = instructions.NewStructAtributosConT($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo) 
        }
    }
}) (ALT (= tipo (SET LET VAR)) ID_VALIDO (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        $listatstr = instructions.NewStructAtributosConE($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text, $expr.e)
    }else{
        $listatstr = instructions.NewStructAtributos($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text)
    }
}) (ALT (? (BLOCK (ALT MUTATING))) funciondeclaracioncontrol {
    if $MUTATING != nil{
        $listatstr = instructions.NewStruckFunctionMutating($funciondeclaracioncontrol.fdc)
    } else {
        $listatstr = instructions.NewStruckFunction($funciondeclaracioncontrol.fdc)
    }
}))) (RULE structexpr (returns interfaces.Instruction strexpr) (BLOCK (ALT (= op1 ID_VALIDO) DOS_PUNTOS (= op ID_VALIDO) (= op2 ID_VALIDO) PARIZQ ldupla PARDER {
    $strexpr = instructions.NewStruckVariable($op1.line, $op1.pos, $op.text, $op1.text, $op2.text, $ldupla.lduplist, true)
}))) (RULE ldupla (returns interfaces.Instruction lduplist) (BLOCK (ALT ID_VALIDO DOS_PUNTOS expr COMA (= op ldupla) { 
    $lduplist = instructions.NewStructListDuple($ID_VALIDO.text, $expr.e, $op.lduplist, true)
}) (ALT ID_VALIDO DOS_PUNTOS expr {
    $lduplist = instructions.NewStructDuple($ID_VALIDO.text, $expr.e, false)  
}))) (RULE llamadastruct (returns interfaces.Expression llmstru) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) {
    $llmstru = instructions.NewStruckLlamadaExp($op.line, $op.pos, $op.text, $op1.text)
}))) (RULE asignacionparametrostruct (returns interfaces.Instruction llmstruasig) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) IG expr {
    //$llmstruasig = instructions.NewStrucAsigna($op.line, $op.pos, $op.text, $op1.text, $expr.e)
}))) (RULE llamadafuncionstruct (returns interfaces.Instruction llmstrufun) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) PARIZQ PARDER {
    //$llmstrufun = instructions.NewStruckLlamadaFun($op.line, $op.pos, $op.text, $op1.text)
}))) (RULE funciondeclaracioncontrol (returns interfaces.Instruction fdc) (BLOCK (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionRP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER LLAVEIZQ blockinterno LLAVEDER {
   $fdc = instructions.NewFuncionesDeclaracionP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracion($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $blockinterno.blkint)
}))) (RULE listaparametro (returns interfaces.Instruction listparfun) (BLOCK (ALT (? (BLOCK (ALT (= op (SET ID_VALIDO GUIONBAJO))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato COMA (= op3 listaparametro) {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true, true, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true, $op3.listparfun )
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false,$op3.listparfun )
        } 
    }      
}) (ALT (? (BLOCK (ALT (= op (SET ID_VALIDO GUIONBAJO))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true , true)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true)
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false)
    } 
    }
    
}))) (RULE funcionllamadacontrol (returns interfaces.Instruction flctl) (BLOCK (ALT ID_VALIDO PARIZQ listaparametrosllamada PARDER {
    $flctl = instructions.NewFuncionesControlP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametrosllamada.lpll)
}) (ALT ID_VALIDO PARIZQ PARDER {
    $flctl = instructions.NewFuncionesControl($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE funcionllamadacontrolConRetorno (returns interfaces.Expression flctlret) (BLOCK (ALT ID_VALIDO PARIZQ listaparametrosllamada PARDER {
    $flctlret = instructions.NewFuncionesControlPR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametrosllamada.lpll)
}) (ALT ID_VALIDO PARIZQ PARDER {
    $flctlret = instructions.NewFuncionesControlR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE listaparametrosllamada (returns interfaces.Instruction lpll) (BLOCK (ALT DIRME ID_VALIDO COMA (= op2 listaparametrosllamada) {
    $lpll = instructions.NewFuncionesLlamadaList1($DIRME.line, $DIRME.pos, $ID_VALIDO.text, $op2.lpll)    
}) (ALT DIRME ID_VALIDO {
    $lpll = instructions.NewFuncionesLlamadaList2($DIRME.line, $DIRME.pos, $ID_VALIDO.text)    
}) (ALT (? (BLOCK (ALT ID_VALIDO (= op DOS_PUNTOS)))) expr COMA (= op2 listaparametrosllamada) {
    if $op != nil{
        $lpll = instructions.NewFuncionesLlamadaList3($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e, $op2.lpll)
    }else{
        $lpll = instructions.NewFuncionesLlamadaList4($COMA.line, $COMA.pos, $expr.e, $op2.lpll)
    }
}) (ALT (? (BLOCK (ALT ID_VALIDO (= op DOS_PUNTOS)))) expr {
    if $op != nil{
        $lpll = instructions.NewFuncionesLlamadaList5($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
    }else{
        $lpll = instructions.NewFuncionesLlamadaList6($expr.e)
    }     
}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listaexpresions PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listaexpresions.blkparf)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = instructions.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = instructions.NewFuncionFloatEmbebida($expr.e)}))) (RULE stringembebida (returns interfaces.Expression stremb) (BLOCK (ALT STRING PARIZQ expr PARDER { $stremb = instructions.NewFuncionStringEmbebida($expr.e)})))))
2023-09-08 01:11:10:272 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $matrizcontrol.matct}) (ALT structcontrol { $inst = $structcontrol.struck}) (ALT funciondeclaracioncontrol { $inst = $funciondeclaracioncontrol.fdc}) (ALT funcionllamadacontrol { $inst = $funcionllamadacontrol.flctl}) (ALT structexpr (? (BLOCK (ALT PUNTOCOMA))) { $inst = $structexpr.strexpr}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $matrizcontrol.matct}) (ALT funcionllamadacontrol { $insint = $funcionllamadacontrol.flctl}) (ALT structexpr (? (BLOCK (ALT PUNTOCOMA))) { $insint = $structexpr.strexpr}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr {$decvbl = instructions.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = instructions.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = instructions.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = instructions.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = instructions.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = instructions.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = instructions.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = instructions.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}) (ALT stringembebida { $e = $stringembebida.stremb}) (ALT funcionllamadacontrolConRetorno { $e = $funcionllamadacontrolConRetorno.flctlret}) (ALT llamadastruct { $e = $llamadastruct.llmstru}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = instructions.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = instructions.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = instructions.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = instructions.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = instructions.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=instructions.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = instructions.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR (= op1 ID_VALIDO) IN (= op2 ID_VALIDO) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForId($FOR.line, $FOR.pos, $op1.text, $op2.text, $blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = instructions.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = instructions.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = instructions.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN (= op expr) {
    $rect = instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}) (ALT RETURN {
    $rect = instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = instructions.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = instructions.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = instructions.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = instructions.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = instructions.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = instructions.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = instructions.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = instructions.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = instructions.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = instructions.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = instructions.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs { $vepposct = instructions.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER { $vepposct = instructions.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) }) (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = instructions.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE matrizcontrol (returns interfaces.Instruction matct) (BLOCK (ALT VAR ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS tipomatriz))) IG defmatriz {
    if ($DOS_PUNTOS != nil) {
        $matct = instructions.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        $matct = instructions.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }
}))) (RULE tipomatriz (returns interfaces.Expression tipomat) (BLOCK (ALT CORCHIZQ tipomatriz CORCHDER { 
    $tipomat = instructions.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)
}) (ALT CORCHIZQ tipodato CORCHDER { 
    $tipomat = instructions.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)
}))) (RULE defmatriz (returns interfaces.Instruction defmat) (BLOCK (ALT listavaloresmat { $defmat = $listavaloresmat.listvlamat}))) (RULE listavaloresmat (returns interfaces.Instruction listvlamat) (BLOCK (ALT CORCHIZQ listavaloresmat2 CORCHDER { $listvlamat = $listavaloresmat2.mylisttmatt}) (ALT simplematriz { $listvlamat = $simplematriz.simmat}))) (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (= op listavaloresmat2) COMA listavaloresmat { $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}) (ALT listavaloresmat { $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT listaexpresions { $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)}))) (RULE listaexpresions (returns []interface{} blkparf) (@ init {
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= funpar listaexpresion)))) {
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }
}))) (RULE listaexpresion (returns interfaces.Expression funpar) (BLOCK (ALT COMA expr {
    $funpar = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $funpar = instructions.NewArregloParametro($expr.e)
}))) (RULE simplematriz (returns interfaces.Instruction simmat) (BLOCK (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS (= op simplematriz) COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}) (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS expr COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}))) (RULE listamatrizaddsubs (returns []interface{} blklimatas) (@ init {
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= lmas listamatrizaddsub)))) {
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }
}))) (RULE listamatrizaddsub (returns interfaces.Expression lmas) (BLOCK (ALT CORCHIZQ expr CORCHDER {
    $lmas = instructions.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)
}))) (RULE structcontrol (returns interfaces.Instruction struck) (BLOCK (ALT STRUCT ID_VALIDO LLAVEIZQ listaatributos LLAVEDER {
    $struck = instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt);
}))) (RULE listaatributos (returns []interface{} blkstlt) (@ init {
    $blkstlt = []interface{}{}
    var listInt []IListaatributoContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= listatstr listaatributo)))) {
    listInt = localctx.(*ListaatributosContext).GetListatstr()
    for _, e := range listInt {
        $blkstlt = append($blkstlt, e.GetListatstr())
    }
}))) (RULE listaatributo (returns interfaces.Instruction listatstr) (BLOCK (ALT (= tip1 (SET LET VAR)) (= tip4 ID_VALIDO) DOS_PUNTOS (BLOCK (ALT (= tip2 tipodato)) (ALT (= tip3 ID_VALIDO))) (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        if $tip3.text != "" {
            $listatstr = instructions.NewStructAtributosConTE2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text, $expr.e)
        }else{                        
            $listatstr = instructions.NewStructAtributosConTE($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo, $expr.e)
        }        
    }else{ 
        if $tip3.text != "" {                        
            $listatstr = instructions.NewStructAtributosConT2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text) 
        }else{            
            $listatstr = instructions.NewStructAtributosConT($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo) 
        }
    }
}) (ALT (= tipo (SET LET VAR)) ID_VALIDO (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        $listatstr = instructions.NewStructAtributosConE($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text, $expr.e)
    }else{
        $listatstr = instructions.NewStructAtributos($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text)
    }
}) (ALT (? (BLOCK (ALT MUTATING))) funciondeclaracioncontrol {
    if $MUTATING != nil{
        $listatstr = instructions.NewStruckFunctionMutating($funciondeclaracioncontrol.fdc)
    } else {
        $listatstr = instructions.NewStruckFunction($funciondeclaracioncontrol.fdc)
    }
}))) (RULE structexpr (returns interfaces.Instruction strexpr) (BLOCK (ALT (= op1 ID_VALIDO) DOS_PUNTOS (= op ID_VALIDO) (= op2 ID_VALIDO) PARIZQ ldupla PARDER {
    $strexpr = instructions.NewStruckVariable($op1.line, $op1.pos, $op.text, $op1.text, $op2.text, $ldupla.lduplist, true)
}))) (RULE ldupla (returns interfaces.Instruction lduplist) (BLOCK (ALT ID_VALIDO DOS_PUNTOS expr COMA (= op ldupla) { 
    $lduplist = instructions.NewStructListDuple($ID_VALIDO.text, $expr.e, $op.lduplist, true)
}) (ALT ID_VALIDO DOS_PUNTOS expr {
    $lduplist = instructions.NewStructDuple($ID_VALIDO.text, $expr.e, false)  
}))) (RULE llamadastruct (returns interfaces.Expression llmstru) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) {
    $llmstru = instructions.NewStruckLlamadaExp($op.line, $op.pos, $op.text, $op1.text)
}))) (RULE asignacionparametrostruct (returns interfaces.Instruction llmstruasig) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) IG expr {
    //$llmstruasig = instructions.NewStrucAsigna($op.line, $op.pos, $op.text, $op1.text, $expr.e)
}))) (RULE llamadafuncionstruct (returns interfaces.Instruction llmstrufun) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) PARIZQ PARDER {
    //$llmstrufun = instructions.NewStruckLlamadaFun($op.line, $op.pos, $op.text, $op1.text)
}))) (RULE funciondeclaracioncontrol (returns interfaces.Instruction fdc) (BLOCK (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionRP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER LLAVEIZQ blockinterno LLAVEDER {
   $fdc = instructions.NewFuncionesDeclaracionP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracion($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $blockinterno.blkint)
}))) (RULE listaparametro (returns interfaces.Instruction listparfun) (BLOCK (ALT (? (BLOCK (ALT (= op (SET ID_VALIDO GUIONBAJO))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato COMA (= op3 listaparametro) {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true, true, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true, $op3.listparfun )
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false,$op3.listparfun )
        } 
    }      
}) (ALT (? (BLOCK (ALT (= op (SET ID_VALIDO GUIONBAJO))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true , true)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true)
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false)
    } 
    }
    
}))) (RULE funcionllamadacontrol (returns interfaces.Instruction flctl) (BLOCK (ALT ID_VALIDO PARIZQ listaparametrosllamada PARDER {
    $flctl = instructions.NewFuncionesControlP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametrosllamada.lpll)
}) (ALT ID_VALIDO PARIZQ PARDER {
    $flctl = instructions.NewFuncionesControl($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE funcionllamadacontrolConRetorno (returns interfaces.Expression flctlret) (BLOCK (ALT ID_VALIDO PARIZQ listaparametrosllamada PARDER {
    $flctlret = instructions.NewFuncionesControlPR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametrosllamada.lpll)
}) (ALT ID_VALIDO PARIZQ PARDER {
    $flctlret = instructions.NewFuncionesControlR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE listaparametrosllamada (returns interfaces.Instruction lpll) (BLOCK (ALT DIRME ID_VALIDO COMA (= op2 listaparametrosllamada) {
    $lpll = instructions.NewFuncionesLlamadaList1($DIRME.line, $DIRME.pos, $ID_VALIDO.text, $op2.lpll)    
}) (ALT DIRME ID_VALIDO {
    $lpll = instructions.NewFuncionesLlamadaList2($DIRME.line, $DIRME.pos, $ID_VALIDO.text)    
}) (ALT (? (BLOCK (ALT ID_VALIDO (= op DOS_PUNTOS)))) expr COMA (= op2 listaparametrosllamada) {
    if $op != nil{
        $lpll = instructions.NewFuncionesLlamadaList3($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e, $op2.lpll)
    }else{
        $lpll = instructions.NewFuncionesLlamadaList4($COMA.line, $COMA.pos, $expr.e, $op2.lpll)
    }
}) (ALT (? (BLOCK (ALT ID_VALIDO (= op DOS_PUNTOS)))) expr {
    if $op != nil{
        $lpll = instructions.NewFuncionesLlamadaList5($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
    }else{
        $lpll = instructions.NewFuncionesLlamadaList6($expr.e)
    }     
}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listaexpresions PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listaexpresions.blkparf)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = instructions.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = instructions.NewFuncionFloatEmbebida($expr.e)}))) (RULE stringembebida (returns interfaces.Expression stremb) (BLOCK (ALT STRING PARIZQ expr PARDER { $stremb = instructions.NewFuncionStringEmbebida($expr.e)})))))
2023-09-08 01:11:10:272 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) RULES)
2023-09-08 01:11:10:317 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op=NOT<tokenIndex=593> right=expr<tokenIndex=597,p=26> { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) } 
        | PARIZQ<tokenIndex=751> expr<tokenIndex=753> PARDER<tokenIndex=755> { $e = $expr.e } 
        | SUB<tokenIndex=761> NUMBER<tokenIndex=763>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    } 
        | NUMBER<tokenIndex=769>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | CADENA<tokenIndex=775>
    {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=781> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=787> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | CHARACTER<tokenIndex=793> 
    { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    } 
        | ID_VALIDO<tokenIndex=798>
    {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    } 
        | NULO<tokenIndex=803> {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)} 
        | vectorvacio<tokenIndex=809> { $e = $vectorvacio.veemct} 
        | vectorcount<tokenIndex=815> { $e = $vectorcount.vecnct} 
        | vectoraccess<tokenIndex=821> { $e = $vectoraccess.vepposct} 
        | intembebida<tokenIndex=827> { $e = $intembebida.intemb} 
        | floatembebida<tokenIndex=833> { $e = $floatembebida.floemb} 
        | stringembebida<tokenIndex=839> { $e = $stringembebida.stremb} 
        | funcionllamadacontrolConRetorno<tokenIndex=845> { $e = $funcionllamadacontrolConRetorno.flctlret} 
        | llamadastruct<tokenIndex=851> { $e = $llamadastruct.llmstru} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 25)}?<p=25> op=MODULO<tokenIndex=609> right=expr<tokenIndex=613,p=26> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 24)}?<p=24> op=(MUL<tokenIndex=626>|DIV<tokenIndex=628>) right=expr<tokenIndex=633,p=25> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 23)}?<p=23> op=(ADD<tokenIndex=646>|SUB<tokenIndex=648>) right=expr<tokenIndex=653,p=24> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 22)}?<p=22> op=(MAY_IG<tokenIndex=666>|MAYOR<tokenIndex=668>) right=expr<tokenIndex=673,p=23> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=(MEN_IG<tokenIndex=686>|MENOR<tokenIndex=688>) right=expr<tokenIndex=693,p=22> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=(IG_IG<tokenIndex=706>|DIF<tokenIndex=708>) right=expr<tokenIndex=713,p=21> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=AND<tokenIndex=725> right=expr<tokenIndex=729,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=OR<tokenIndex=741> right=expr<tokenIndex=745,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-08 01:11:10:338 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 593)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 597) (= p 26)))) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 751))) (expr (ELEMENT_OPTIONS (= tokenIndex 753))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 755))) { $e = $expr.e }) (ALT (SUB (ELEMENT_OPTIONS (= tokenIndex 761))) (NUMBER (ELEMENT_OPTIONS (= tokenIndex 763))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 769))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (CADENA (ELEMENT_OPTIONS (= tokenIndex 775))) {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 781))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 787))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (CHARACTER (ELEMENT_OPTIONS (= tokenIndex 793))) { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT (ID_VALIDO (ELEMENT_OPTIONS (= tokenIndex 798))) {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT (NULO (ELEMENT_OPTIONS (= tokenIndex 803))) {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT (vectorvacio (ELEMENT_OPTIONS (= tokenIndex 809))) { $e = $vectorvacio.veemct}) (ALT (vectorcount (ELEMENT_OPTIONS (= tokenIndex 815))) { $e = $vectorcount.vecnct}) (ALT (vectoraccess (ELEMENT_OPTIONS (= tokenIndex 821))) { $e = $vectoraccess.vepposct}) (ALT (intembebida (ELEMENT_OPTIONS (= tokenIndex 827))) { $e = $intembebida.intemb}) (ALT (floatembebida (ELEMENT_OPTIONS (= tokenIndex 833))) { $e = $floatembebida.floemb}) (ALT (stringembebida (ELEMENT_OPTIONS (= tokenIndex 839))) { $e = $stringembebida.stremb}) (ALT (funcionllamadacontrolConRetorno (ELEMENT_OPTIONS (= tokenIndex 845))) { $e = $funcionllamadacontrolConRetorno.flctlret}) (ALT (llamadastruct (ELEMENT_OPTIONS (= tokenIndex 851))) { $e = $llamadastruct.llmstru})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 25)}? (ELEMENT_OPTIONS (= p 25))) (= op (MODULO (ELEMENT_OPTIONS (= tokenIndex 609)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 613) (= p 26)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 24)}? (ELEMENT_OPTIONS (= p 24))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 626))) (DIV (ELEMENT_OPTIONS (= tokenIndex 628))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 633) (= p 25)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 23)}? (ELEMENT_OPTIONS (= p 23))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 646))) (SUB (ELEMENT_OPTIONS (= tokenIndex 648))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 653) (= p 24)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 22)}? (ELEMENT_OPTIONS (= p 22))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 666))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 668))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 673) (= p 23)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 686))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 688))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 693) (= p 22)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 706))) (DIF (ELEMENT_OPTIONS (= tokenIndex 708))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 713) (= p 21)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 725)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 729) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 741)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 745) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-08 01:11:10:339 left-recursion LogManager.java:25 listavaloresmat2 returns [interfaces.Instruction mylisttmatt]
    :   ( {} listavaloresmat<tokenIndex=1678> { $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)} 
        | listaexpresions<tokenIndex=1684> { $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1670> listavaloresmat<tokenIndex=1672> { $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}
        )*
    ;
2023-09-08 01:11:10:341 grammar LogManager.java:25 added: (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (BLOCK (ALT {} (listavaloresmat (ELEMENT_OPTIONS (= tokenIndex 1678))) { $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT (listaexpresions (ELEMENT_OPTIONS (= tokenIndex 1684))) { $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1670))) (listavaloresmat (ELEMENT_OPTIONS (= tokenIndex 1672))) { $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}))))))
2023-09-08 01:11:10:357 grammar LogManager.java:25 import INT=1
2023-09-08 01:11:10:358 grammar LogManager.java:25 import FLOAT=2
2023-09-08 01:11:10:358 grammar LogManager.java:25 import STRING=3
2023-09-08 01:11:10:359 grammar LogManager.java:25 import BOOL=4
2023-09-08 01:11:10:359 grammar LogManager.java:25 import CHARACT=5
2023-09-08 01:11:10:360 grammar LogManager.java:25 import TRU=6
2023-09-08 01:11:10:360 grammar LogManager.java:25 import FAL=7
2023-09-08 01:11:10:360 grammar LogManager.java:25 import VAR=8
2023-09-08 01:11:10:361 grammar LogManager.java:25 import LET=9
2023-09-08 01:11:10:361 grammar LogManager.java:25 import NULO=10
2023-09-08 01:11:10:361 grammar LogManager.java:25 import IF=11
2023-09-08 01:11:10:361 grammar LogManager.java:25 import ELSE=12
2023-09-08 01:11:10:362 grammar LogManager.java:25 import SWITCH=13
2023-09-08 01:11:10:362 grammar LogManager.java:25 import CASE=14
2023-09-08 01:11:10:362 grammar LogManager.java:25 import DEFAULT=15
2023-09-08 01:11:10:362 grammar LogManager.java:25 import BREAK=16
2023-09-08 01:11:10:363 grammar LogManager.java:25 import CONTINUE=17
2023-09-08 01:11:10:363 grammar LogManager.java:25 import FOR=18
2023-09-08 01:11:10:363 grammar LogManager.java:25 import IN=19
2023-09-08 01:11:10:364 grammar LogManager.java:25 import RANGO=20
2023-09-08 01:11:10:364 grammar LogManager.java:25 import WHILE=21
2023-09-08 01:11:10:364 grammar LogManager.java:25 import GUARD=22
2023-09-08 01:11:10:364 grammar LogManager.java:25 import RETURN=23
2023-09-08 01:11:10:364 grammar LogManager.java:25 import FUNCION=24
2023-09-08 01:11:10:366 grammar LogManager.java:25 import PRINT=25
2023-09-08 01:11:10:366 grammar LogManager.java:25 import INOUT=26
2023-09-08 01:11:10:366 grammar LogManager.java:25 import APPEND=27
2023-09-08 01:11:10:366 grammar LogManager.java:25 import REMOVE=28
2023-09-08 01:11:10:366 grammar LogManager.java:25 import REMOVELAST=29
2023-09-08 01:11:10:367 grammar LogManager.java:25 import COUNT=30
2023-09-08 01:11:10:367 grammar LogManager.java:25 import ISEMPTY=31
2023-09-08 01:11:10:367 grammar LogManager.java:25 import AT=32
2023-09-08 01:11:10:367 grammar LogManager.java:25 import REPEATING=33
2023-09-08 01:11:10:368 grammar LogManager.java:25 import STRUCT=34
2023-09-08 01:11:10:368 grammar LogManager.java:25 import MUTATING=35
2023-09-08 01:11:10:368 grammar LogManager.java:25 import SELF=36
2023-09-08 01:11:10:368 grammar LogManager.java:25 import NUMBER=37
2023-09-08 01:11:10:369 grammar LogManager.java:25 import CADENA=38
2023-09-08 01:11:10:369 grammar LogManager.java:25 import ID_VALIDO=39
2023-09-08 01:11:10:369 grammar LogManager.java:25 import CHARACTER=40
2023-09-08 01:11:10:370 grammar LogManager.java:25 import WS=41
2023-09-08 01:11:10:370 grammar LogManager.java:25 import IG=42
2023-09-08 01:11:10:370 grammar LogManager.java:25 import DOS_PUNTOS=43
2023-09-08 01:11:10:370 grammar LogManager.java:25 import PUNTOCOMA=44
2023-09-08 01:11:10:370 grammar LogManager.java:25 import CIERRE_INTE=45
2023-09-08 01:11:10:371 grammar LogManager.java:25 import PARIZQ=46
2023-09-08 01:11:10:371 grammar LogManager.java:25 import PARDER=47
2023-09-08 01:11:10:371 grammar LogManager.java:25 import DIF=48
2023-09-08 01:11:10:371 grammar LogManager.java:25 import IG_IG=49
2023-09-08 01:11:10:371 grammar LogManager.java:25 import NOT=50
2023-09-08 01:11:10:372 grammar LogManager.java:25 import OR=51
2023-09-08 01:11:10:372 grammar LogManager.java:25 import AND=52
2023-09-08 01:11:10:372 grammar LogManager.java:25 import MAY_IG=53
2023-09-08 01:11:10:372 grammar LogManager.java:25 import MEN_IG=54
2023-09-08 01:11:10:373 grammar LogManager.java:25 import MAYOR=55
2023-09-08 01:11:10:373 grammar LogManager.java:25 import MENOR=56
2023-09-08 01:11:10:373 grammar LogManager.java:25 import MODULO=57
2023-09-08 01:11:10:373 grammar LogManager.java:25 import MUL=58
2023-09-08 01:11:10:373 grammar LogManager.java:25 import DIV=59
2023-09-08 01:11:10:374 grammar LogManager.java:25 import ADD=60
2023-09-08 01:11:10:374 grammar LogManager.java:25 import SUB=61
2023-09-08 01:11:10:374 grammar LogManager.java:25 import SUMA=62
2023-09-08 01:11:10:374 grammar LogManager.java:25 import RESTA=63
2023-09-08 01:11:10:374 grammar LogManager.java:25 import LLAVEIZQ=64
2023-09-08 01:11:10:374 grammar LogManager.java:25 import LLAVEDER=65
2023-09-08 01:11:10:374 grammar LogManager.java:25 import RETORNO=66
2023-09-08 01:11:10:376 grammar LogManager.java:25 import COMA=67
2023-09-08 01:11:10:376 grammar LogManager.java:25 import PUNTO=68
2023-09-08 01:11:10:376 grammar LogManager.java:25 import GUIONBAJO=69
2023-09-08 01:11:10:376 grammar LogManager.java:25 import CORCHIZQ=70
2023-09-08 01:11:10:376 grammar LogManager.java:25 import CORCHDER=71
2023-09-08 01:11:10:376 grammar LogManager.java:25 import DIRME=72
2023-09-08 01:11:10:376 grammar LogManager.java:25 import WHITESPACE=73
2023-09-08 01:11:10:377 grammar LogManager.java:25 import COMMENT=74
2023-09-08 01:11:10:377 grammar LogManager.java:25 import LINE_COMMENT=75
2023-09-08 01:11:10:377 grammar LogManager.java:25 import 'Int'=1
2023-09-08 01:11:10:377 grammar LogManager.java:25 import 'Float'=2
2023-09-08 01:11:10:377 grammar LogManager.java:25 import 'String'=3
2023-09-08 01:11:10:378 grammar LogManager.java:25 import 'Bool'=4
2023-09-08 01:11:10:378 grammar LogManager.java:25 import 'Character'=5
2023-09-08 01:11:10:378 grammar LogManager.java:25 import 'true'=6
2023-09-08 01:11:10:378 grammar LogManager.java:25 import 'false'=7
2023-09-08 01:11:10:378 grammar LogManager.java:25 import 'var'=8
2023-09-08 01:11:10:379 grammar LogManager.java:25 import 'let'=9
2023-09-08 01:11:10:379 grammar LogManager.java:25 import 'nil'=10
2023-09-08 01:11:10:379 grammar LogManager.java:25 import 'if'=11
2023-09-08 01:11:10:380 grammar LogManager.java:25 import 'else'=12
2023-09-08 01:11:10:380 grammar LogManager.java:25 import 'switch'=13
2023-09-08 01:11:10:380 grammar LogManager.java:25 import 'case'=14
2023-09-08 01:11:10:380 grammar LogManager.java:25 import 'default'=15
2023-09-08 01:11:10:381 grammar LogManager.java:25 import 'break'=16
2023-09-08 01:11:10:381 grammar LogManager.java:25 import 'continue'=17
2023-09-08 01:11:10:381 grammar LogManager.java:25 import 'for'=18
2023-09-08 01:11:10:381 grammar LogManager.java:25 import 'in'=19
2023-09-08 01:11:10:382 grammar LogManager.java:25 import '...'=20
2023-09-08 01:11:10:382 grammar LogManager.java:25 import 'while'=21
2023-09-08 01:11:10:382 grammar LogManager.java:25 import 'guard'=22
2023-09-08 01:11:10:382 grammar LogManager.java:25 import 'return'=23
2023-09-08 01:11:10:383 grammar LogManager.java:25 import 'func'=24
2023-09-08 01:11:10:383 grammar LogManager.java:25 import 'print'=25
2023-09-08 01:11:10:383 grammar LogManager.java:25 import 'inout'=26
2023-09-08 01:11:10:383 grammar LogManager.java:25 import 'append'=27
2023-09-08 01:11:10:384 grammar LogManager.java:25 import 'remove'=28
2023-09-08 01:11:10:384 grammar LogManager.java:25 import 'removeLast'=29
2023-09-08 01:11:10:384 grammar LogManager.java:25 import 'count'=30
2023-09-08 01:11:10:384 grammar LogManager.java:25 import 'isEmpty'=31
2023-09-08 01:11:10:384 grammar LogManager.java:25 import 'at'=32
2023-09-08 01:11:10:384 grammar LogManager.java:25 import 'repeating'=33
2023-09-08 01:11:10:386 grammar LogManager.java:25 import 'struct'=34
2023-09-08 01:11:10:386 grammar LogManager.java:25 import 'mutating'=35
2023-09-08 01:11:10:386 grammar LogManager.java:25 import 'self'=36
2023-09-08 01:11:10:386 grammar LogManager.java:25 import '='=42
2023-09-08 01:11:10:386 grammar LogManager.java:25 import ':'=43
2023-09-08 01:11:10:386 grammar LogManager.java:25 import ';'=44
2023-09-08 01:11:10:386 grammar LogManager.java:25 import '?'=45
2023-09-08 01:11:10:387 grammar LogManager.java:25 import '('=46
2023-09-08 01:11:10:387 grammar LogManager.java:25 import ')'=47
2023-09-08 01:11:10:387 grammar LogManager.java:25 import '!='=48
2023-09-08 01:11:10:388 grammar LogManager.java:25 import '=='=49
2023-09-08 01:11:10:388 grammar LogManager.java:25 import '!'=50
2023-09-08 01:11:10:388 grammar LogManager.java:25 import '||'=51
2023-09-08 01:11:10:388 grammar LogManager.java:25 import '&&'=52
2023-09-08 01:11:10:388 grammar LogManager.java:25 import '>='=53
2023-09-08 01:11:10:389 grammar LogManager.java:25 import '<='=54
2023-09-08 01:11:10:389 grammar LogManager.java:25 import '>'=55
2023-09-08 01:11:10:389 grammar LogManager.java:25 import '<'=56
2023-09-08 01:11:10:390 grammar LogManager.java:25 import '%'=57
2023-09-08 01:11:10:390 grammar LogManager.java:25 import '*'=58
2023-09-08 01:11:10:390 grammar LogManager.java:25 import '/'=59
2023-09-08 01:11:10:390 grammar LogManager.java:25 import '+'=60
2023-09-08 01:11:10:391 grammar LogManager.java:25 import '-'=61
2023-09-08 01:11:10:391 grammar LogManager.java:25 import '+='=62
2023-09-08 01:11:10:391 grammar LogManager.java:25 import '-='=63
2023-09-08 01:11:10:391 grammar LogManager.java:25 import '{'=64
2023-09-08 01:11:10:391 grammar LogManager.java:25 import '}'=65
2023-09-08 01:11:10:391 grammar LogManager.java:25 import '->'=66
2023-09-08 01:11:10:392 grammar LogManager.java:25 import ','=67
2023-09-08 01:11:10:392 grammar LogManager.java:25 import '.'=68
2023-09-08 01:11:10:392 grammar LogManager.java:25 import '_'=69
2023-09-08 01:11:10:392 grammar LogManager.java:25 import '['=70
2023-09-08 01:11:10:392 grammar LogManager.java:25 import ']'=71
2023-09-08 01:11:10:392 grammar LogManager.java:25 import '&'=72
2023-09-08 01:11:10:393 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, STRING=3, BOOL=4, CHARACT=5, TRU=6, FAL=7, VAR=8, LET=9, NULO=10, IF=11, ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, BREAK=16, CONTINUE=17, FOR=18, IN=19, RANGO=20, WHILE=21, GUARD=22, RETURN=23, FUNCION=24, PRINT=25, INOUT=26, APPEND=27, REMOVE=28, REMOVELAST=29, COUNT=30, ISEMPTY=31, AT=32, REPEATING=33, STRUCT=34, MUTATING=35, SELF=36, NUMBER=37, CADENA=38, ID_VALIDO=39, CHARACTER=40, WS=41, IG=42, DOS_PUNTOS=43, PUNTOCOMA=44, CIERRE_INTE=45, PARIZQ=46, PARDER=47, DIF=48, IG_IG=49, NOT=50, OR=51, AND=52, MAY_IG=53, MEN_IG=54, MAYOR=55, MENOR=56, MODULO=57, MUL=58, DIV=59, ADD=60, SUB=61, SUMA=62, RESTA=63, LLAVEIZQ=64, LLAVEDER=65, RETORNO=66, COMA=67, PUNTO=68, GUIONBAJO=69, CORCHIZQ=70, CORCHDER=71, DIRME=72, WHITESPACE=73, COMMENT=74, LINE_COMMENT=75, 'Int'=1, 'Float'=2, 'String'=3, 'Bool'=4, 'Character'=5, 'true'=6, 'false'=7, 'var'=8, 'let'=9, 'nil'=10, 'if'=11, 'else'=12, 'switch'=13, 'case'=14, 'default'=15, 'break'=16, 'continue'=17, 'for'=18, 'in'=19, '...'=20, 'while'=21, 'guard'=22, 'return'=23, 'func'=24, 'print'=25, 'inout'=26, 'append'=27, 'remove'=28, 'removeLast'=29, 'count'=30, 'isEmpty'=31, 'at'=32, 'repeating'=33, 'struct'=34, 'mutating'=35, 'self'=36, '='=42, ':'=43, ';'=44, '?'=45, '('=46, ')'=47, '!='=48, '=='=49, '!'=50, '||'=51, '&&'=52, '>='=53, '<='=54, '>'=55, '<'=56, '%'=57, '*'=58, '/'=59, '+'=60, '-'=61, '+='=62, '-='=63, '{'=64, '}'=65, '->'=66, ','=67, '.'=68, '_'=69, '['=70, ']'=71, '&'=72}
2023-09-08 01:11:10:393 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, STRING=3, BOOL=4, CHARACT=5, TRU=6, FAL=7, VAR=8, LET=9, NULO=10, IF=11, ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, BREAK=16, CONTINUE=17, FOR=18, IN=19, RANGO=20, WHILE=21, GUARD=22, RETURN=23, FUNCION=24, PRINT=25, INOUT=26, APPEND=27, REMOVE=28, REMOVELAST=29, COUNT=30, ISEMPTY=31, AT=32, REPEATING=33, STRUCT=34, MUTATING=35, SELF=36, NUMBER=37, CADENA=38, ID_VALIDO=39, CHARACTER=40, WS=41, IG=42, DOS_PUNTOS=43, PUNTOCOMA=44, CIERRE_INTE=45, PARIZQ=46, PARDER=47, DIF=48, IG_IG=49, NOT=50, OR=51, AND=52, MAY_IG=53, MEN_IG=54, MAYOR=55, MENOR=56, MODULO=57, MUL=58, DIV=59, ADD=60, SUB=61, SUMA=62, RESTA=63, LLAVEIZQ=64, LLAVEDER=65, RETORNO=66, COMA=67, PUNTO=68, GUIONBAJO=69, CORCHIZQ=70, CORCHDER=71, DIRME=72, WHITESPACE=73, COMMENT=74, LINE_COMMENT=75}
2023-09-08 01:11:10:394 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'String'=3, 'Bool'=4, 'Character'=5, 'true'=6, 'false'=7, 'var'=8, 'let'=9, 'nil'=10, 'if'=11, 'else'=12, 'switch'=13, 'case'=14, 'default'=15, 'break'=16, 'continue'=17, 'for'=18, 'in'=19, '...'=20, 'while'=21, 'guard'=22, 'return'=23, 'func'=24, 'print'=25, 'inout'=26, 'append'=27, 'remove'=28, 'removeLast'=29, 'count'=30, 'isEmpty'=31, 'at'=32, 'repeating'=33, 'struct'=34, 'mutating'=35, 'self'=36, '='=42, ':'=43, ';'=44, '?'=45, '('=46, ')'=47, '!='=48, '=='=49, '!'=50, '||'=51, '&&'=52, '>='=53, '<='=54, '>'=55, '<'=56, '%'=57, '*'=58, '/'=59, '+'=60, '-'=61, '+='=62, '-='=63, '{'=64, '}'=65, '->'=66, ','=67, '.'=68, '_'=69, '['=70, ']'=71, '&'=72}
2023-09-08 01:11:10:449 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-08 01:11:10:450 LL1 LogManager.java:25 look=[{8..9, 11, 13, 18, 21..22, 24..25, 34, 39}, <EOF>]
2023-09-08 01:11:10:451 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:451 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-08 01:11:10:451 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-08 01:11:10:451 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:452 LL1 LogManager.java:25 
DECISION 2 in rule instruction
2023-09-08 01:11:10:452 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-08 01:11:10:452 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:452 LL1 LogManager.java:25 
DECISION 3 in rule instruction
2023-09-08 01:11:10:453 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-08 01:11:10:453 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:453 LL1 LogManager.java:25 
DECISION 4 in rule instruction
2023-09-08 01:11:10:453 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-08 01:11:10:453 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:454 LL1 LogManager.java:25 
DECISION 5 in rule instruction
2023-09-08 01:11:10:454 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-08 01:11:10:454 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:454 LL1 LogManager.java:25 
DECISION 6 in rule instruction
2023-09-08 01:11:10:455 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-08 01:11:10:455 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:455 LL1 LogManager.java:25 
DECISION 7 in rule instruction
2023-09-08 01:11:10:455 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-08 01:11:10:455 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:456 LL1 LogManager.java:25 
DECISION 8 in rule instruction
2023-09-08 01:11:10:456 LL1 LogManager.java:25 look=[8, 9, 39, 11, 13, 21, 18, 22, 8, 39, 39, 25, 8, 34, 24, 39, 39]
2023-09-08 01:11:10:456 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:456 LL1 LogManager.java:25 
DECISION 9 in rule blockinterno
2023-09-08 01:11:10:456 LL1 LogManager.java:25 look=[{8..9, 11, 13, 16..18, 21..23, 25, 39}, {14..15, 65}]
2023-09-08 01:11:10:456 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:456 LL1 LogManager.java:25 
DECISION 10 in rule instructionint
2023-09-08 01:11:10:457 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 01:11:10:457 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:457 LL1 LogManager.java:25 
DECISION 11 in rule instructionint
2023-09-08 01:11:10:457 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 01:11:10:457 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:458 LL1 LogManager.java:25 
DECISION 12 in rule instructionint
2023-09-08 01:11:10:458 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 01:11:10:458 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:458 LL1 LogManager.java:25 
DECISION 13 in rule instructionint
2023-09-08 01:11:10:458 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 01:11:10:459 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:459 LL1 LogManager.java:25 
DECISION 14 in rule instructionint
2023-09-08 01:11:10:459 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 01:11:10:459 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:459 LL1 LogManager.java:25 
DECISION 15 in rule instructionint
2023-09-08 01:11:10:460 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 01:11:10:460 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:460 LL1 LogManager.java:25 
DECISION 16 in rule instructionint
2023-09-08 01:11:10:460 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 01:11:10:460 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:460 LL1 LogManager.java:25 
DECISION 17 in rule instructionint
2023-09-08 01:11:10:461 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 01:11:10:461 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:461 LL1 LogManager.java:25 
DECISION 18 in rule instructionint
2023-09-08 01:11:10:461 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 01:11:10:462 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:462 LL1 LogManager.java:25 
DECISION 19 in rule instructionint
2023-09-08 01:11:10:462 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 01:11:10:462 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:462 LL1 LogManager.java:25 
DECISION 20 in rule instructionint
2023-09-08 01:11:10:462 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 01:11:10:463 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:463 LL1 LogManager.java:25 
DECISION 21 in rule instructionint
2023-09-08 01:11:10:463 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 01:11:10:463 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:463 LL1 LogManager.java:25 
DECISION 22 in rule instructionint
2023-09-08 01:11:10:463 LL1 LogManager.java:25 look=[8, 9, 39, 11, 13, 21, 18, 22, 17, 16, 23, 8, 39, 39, 25, 8, 39, 39]
2023-09-08 01:11:10:463 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:464 LL1 LogManager.java:25 
DECISION 23 in rule declavarible
2023-09-08 01:11:10:464 LL1 LogManager.java:25 look=[8, 8, 8]
2023-09-08 01:11:10:464 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:464 LL1 LogManager.java:25 
DECISION 24 in rule declaconstante
2023-09-08 01:11:10:464 LL1 LogManager.java:25 look=[9, 9]
2023-09-08 01:11:10:464 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:464 LL1 LogManager.java:25 
DECISION 25 in rule asignacionvariable
2023-09-08 01:11:10:464 LL1 LogManager.java:25 look=[39, 39, 39]
2023-09-08 01:11:10:464 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:464 LL1 LogManager.java:25 
DECISION 26 in rule tipodato
2023-09-08 01:11:10:464 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5]
2023-09-08 01:11:10:466 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:466 LL1 LogManager.java:25 
DECISION 27 in rule expr
2023-09-08 01:11:10:466 LL1 LogManager.java:25 look=[50, 46, 61, 37, 38, 6, 7, 40, 39, 10, 39, 39, 39, 1, 2, 3, 39, 39]
2023-09-08 01:11:10:466 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:466 LL1 LogManager.java:25 
DECISION 28 in rule expr
2023-09-08 01:11:10:466 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null]
2023-09-08 01:11:10:466 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:466 LL1 LogManager.java:25 
DECISION 29 in rule expr
2023-09-08 01:11:10:466 LL1 LogManager.java:25 look=[null, null]
2023-09-08 01:11:10:466 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:467 LL1 LogManager.java:25 
DECISION 30 in rule sentenciaifelse
2023-09-08 01:11:10:467 LL1 LogManager.java:25 look=[11, 11, 11]
2023-09-08 01:11:10:467 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:467 LL1 LogManager.java:25 
DECISION 31 in rule switchcontrol
2023-09-08 01:11:10:467 LL1 LogManager.java:25 look=[15, 65]
2023-09-08 01:11:10:467 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:467 LL1 LogManager.java:25 
DECISION 32 in rule blockcase
2023-09-08 01:11:10:467 LL1 LogManager.java:25 look=[14, {15, 65}]
2023-09-08 01:11:10:468 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:468 LL1 LogManager.java:25 
DECISION 33 in rule forcontrol
2023-09-08 01:11:10:468 LL1 LogManager.java:25 look=[18, 18, 18]
2023-09-08 01:11:10:468 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:468 LL1 LogManager.java:25 
DECISION 34 in rule retornos
2023-09-08 01:11:10:468 LL1 LogManager.java:25 look=[23, 23]
2023-09-08 01:11:10:469 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:469 LL1 LogManager.java:25 
DECISION 35 in rule vectorcontrol
2023-09-08 01:11:10:469 LL1 LogManager.java:25 look=[8, 8, 8]
2023-09-08 01:11:10:469 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:469 LL1 LogManager.java:25 
DECISION 36 in rule blockparams
2023-09-08 01:11:10:470 LL1 LogManager.java:25 look=[{1..3, 6..7, 10, 37..40, 46, 50, 61, 67}, 71]
2023-09-08 01:11:10:470 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:470 LL1 LogManager.java:25 
DECISION 37 in rule bloqueparams
2023-09-08 01:11:10:470 LL1 LogManager.java:25 look=[67, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-08 01:11:10:470 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:471 LL1 LogManager.java:25 
DECISION 38 in rule vectoragregar
2023-09-08 01:11:10:471 LL1 LogManager.java:25 look=[39, 39, 39, 39, 39]
2023-09-08 01:11:10:471 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:471 LL1 LogManager.java:25 
DECISION 39 in rule vectorremover
2023-09-08 01:11:10:471 LL1 LogManager.java:25 look=[39, 39]
2023-09-08 01:11:10:471 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:471 LL1 LogManager.java:25 
DECISION 40 in rule vectoraccess
2023-09-08 01:11:10:471 LL1 LogManager.java:25 look=[39, 39, 39]
2023-09-08 01:11:10:471 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:472 LL1 LogManager.java:25 
DECISION 41 in rule matrizcontrol
2023-09-08 01:11:10:472 LL1 LogManager.java:25 look=[43, 42]
2023-09-08 01:11:10:472 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:472 LL1 LogManager.java:25 
DECISION 42 in rule tipomatriz
2023-09-08 01:11:10:472 LL1 LogManager.java:25 look=[70, 70]
2023-09-08 01:11:10:472 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:472 LL1 LogManager.java:25 
DECISION 43 in rule listavaloresmat
2023-09-08 01:11:10:472 LL1 LogManager.java:25 look=[70, 70]
2023-09-08 01:11:10:473 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:473 LL1 LogManager.java:25 
DECISION 44 in rule listavaloresmat2
2023-09-08 01:11:10:473 LL1 LogManager.java:25 look=[70, {1..3, 6..7, 10, 37..40, 46, 50, 61, 67}]
2023-09-08 01:11:10:473 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:473 LL1 LogManager.java:25 
DECISION 45 in rule listavaloresmat2
2023-09-08 01:11:10:473 LL1 LogManager.java:25 look=[null, 71]
2023-09-08 01:11:10:473 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:473 LL1 LogManager.java:25 
DECISION 46 in rule listaexpresions
2023-09-08 01:11:10:474 LL1 LogManager.java:25 look=[{1..3, 6..7, 10, 37..40, 46, 50, 61, 67}, null]
2023-09-08 01:11:10:474 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:474 LL1 LogManager.java:25 
DECISION 47 in rule listaexpresion
2023-09-08 01:11:10:474 LL1 LogManager.java:25 look=[67, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-08 01:11:10:474 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:474 LL1 LogManager.java:25 
DECISION 48 in rule simplematriz
2023-09-08 01:11:10:474 LL1 LogManager.java:25 look=[70, 70]
2023-09-08 01:11:10:474 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:474 LL1 LogManager.java:25 
DECISION 49 in rule listamatrizaddsubs
2023-09-08 01:11:10:474 LL1 LogManager.java:25 look=[70, null]
2023-09-08 01:11:10:474 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:474 LL1 LogManager.java:25 
DECISION 50 in rule listaatributos
2023-09-08 01:11:10:474 LL1 LogManager.java:25 look=[{8..9, 24, 35}, 65]
2023-09-08 01:11:10:474 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:474 LL1 LogManager.java:25 
DECISION 51 in rule listaatributo
2023-09-08 01:11:10:476 LL1 LogManager.java:25 look=[{1..5}, 39]
2023-09-08 01:11:10:476 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:476 LL1 LogManager.java:25 
DECISION 52 in rule listaatributo
2023-09-08 01:11:10:476 LL1 LogManager.java:25 look=[42, {8..9, 24, 35, 44, 65}]
2023-09-08 01:11:10:476 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:476 LL1 LogManager.java:25 
DECISION 53 in rule listaatributo
2023-09-08 01:11:10:476 LL1 LogManager.java:25 look=[44, {8..9, 24, 35, 65}]
2023-09-08 01:11:10:476 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:476 LL1 LogManager.java:25 
DECISION 54 in rule listaatributo
2023-09-08 01:11:10:476 LL1 LogManager.java:25 look=[42, {8..9, 24, 35, 44, 65}]
2023-09-08 01:11:10:476 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:476 LL1 LogManager.java:25 
DECISION 55 in rule listaatributo
2023-09-08 01:11:10:476 LL1 LogManager.java:25 look=[44, {8..9, 24, 35, 65}]
2023-09-08 01:11:10:476 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:476 LL1 LogManager.java:25 
DECISION 56 in rule listaatributo
2023-09-08 01:11:10:477 LL1 LogManager.java:25 look=[35, 24]
2023-09-08 01:11:10:477 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:477 LL1 LogManager.java:25 
DECISION 57 in rule listaatributo
2023-09-08 01:11:10:477 LL1 LogManager.java:25 look=[{8..9}, {8..9}, {24, 35}]
2023-09-08 01:11:10:477 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:477 LL1 LogManager.java:25 
DECISION 58 in rule ldupla
2023-09-08 01:11:10:477 LL1 LogManager.java:25 look=[39, 39]
2023-09-08 01:11:10:477 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:477 LL1 LogManager.java:25 
DECISION 59 in rule funciondeclaracioncontrol
2023-09-08 01:11:10:477 LL1 LogManager.java:25 look=[24, 24, 24, 24]
2023-09-08 01:11:10:477 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:477 LL1 LogManager.java:25 
DECISION 60 in rule listaparametro
2023-09-08 01:11:10:477 LL1 LogManager.java:25 look=[{39, 69}, 39]
2023-09-08 01:11:10:478 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:478 LL1 LogManager.java:25 
DECISION 61 in rule listaparametro
2023-09-08 01:11:10:478 LL1 LogManager.java:25 look=[26, {1..5}]
2023-09-08 01:11:10:478 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:478 LL1 LogManager.java:25 
DECISION 62 in rule listaparametro
2023-09-08 01:11:10:478 LL1 LogManager.java:25 look=[{39, 69}, 39]
2023-09-08 01:11:10:478 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:478 LL1 LogManager.java:25 
DECISION 63 in rule listaparametro
2023-09-08 01:11:10:478 LL1 LogManager.java:25 look=[26, {1..5}]
2023-09-08 01:11:10:478 LL1 LogManager.java:25 LL(1)? true
2023-09-08 01:11:10:478 LL1 LogManager.java:25 
DECISION 64 in rule listaparametro
2023-09-08 01:11:10:478 LL1 LogManager.java:25 look=[{39, 69}, {39, 69}]
2023-09-08 01:11:10:479 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:479 LL1 LogManager.java:25 
DECISION 65 in rule funcionllamadacontrol
2023-09-08 01:11:10:479 LL1 LogManager.java:25 look=[39, 39]
2023-09-08 01:11:10:479 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:479 LL1 LogManager.java:25 
DECISION 66 in rule funcionllamadacontrolConRetorno
2023-09-08 01:11:10:479 LL1 LogManager.java:25 look=[39, 39]
2023-09-08 01:11:10:479 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:479 LL1 LogManager.java:25 
DECISION 67 in rule listaparametrosllamada
2023-09-08 01:11:10:479 LL1 LogManager.java:25 look=[39, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-08 01:11:10:479 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:479 LL1 LogManager.java:25 
DECISION 68 in rule listaparametrosllamada
2023-09-08 01:11:10:479 LL1 LogManager.java:25 look=[39, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-08 01:11:10:480 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:480 LL1 LogManager.java:25 
DECISION 69 in rule listaparametrosllamada
2023-09-08 01:11:10:480 LL1 LogManager.java:25 look=[72, 72, {1..3, 6..7, 10, 37..40, 46, 50, 61}, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-08 01:11:10:480 LL1 LogManager.java:25 LL(1)? false
2023-09-08 01:11:10:489 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-09-08 01:11:10:504 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-09-08 01:11:10:504 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,18:9]
2023-09-08 01:11:10:504 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,18:17].[@-1,28:30='blk',<0>,18:23]
2023-09-08 01:11:10:506 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-08 01:11:10:506 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,24:5]
2023-09-08 01:11:10:507 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-09-08 01:11:10:507 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,31:13]
2023-09-08 01:11:10:507 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,31:27]
2023-09-08 01:11:10:509 action-translator LogManager.java:25 translate  $inst = $declavarible.decvbl
2023-09-08 01:11:10:509 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,38:30]
2023-09-08 01:11:10:509 action-translator LogManager.java:25 qattr [@-1,10:21='declavarible',<0>,38:38].[@-1,23:28='decvbl',<0>,38:51]
2023-09-08 01:11:10:509 action-translator LogManager.java:25 translate  $inst = $declaconstante.deccon
2023-09-08 01:11:10:509 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:32]
2023-09-08 01:11:10:510 action-translator LogManager.java:25 qattr [@-1,10:23='declaconstante',<0>,39:40].[@-1,25:30='deccon',<0>,39:55]
2023-09-08 01:11:10:510 action-translator LogManager.java:25 translate  $inst = $asignacionvariable.asgvbl
2023-09-08 01:11:10:510 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:36]
2023-09-08 01:11:10:510 action-translator LogManager.java:25 qattr [@-1,10:27='asignacionvariable',<0>,40:44].[@-1,29:34='asgvbl',<0>,40:63]
2023-09-08 01:11:10:510 action-translator LogManager.java:25 translate  $inst = $sentenciaifelse.myIfElse
2023-09-08 01:11:10:510 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-09-08 01:11:10:510 action-translator LogManager.java:25 qattr [@-1,10:24='sentenciaifelse',<0>,41:28].[@-1,26:33='myIfElse',<0>,41:44]
2023-09-08 01:11:10:510 action-translator LogManager.java:25 translate  $inst = $switchcontrol.mySwitch
2023-09-08 01:11:10:510 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:18]
2023-09-08 01:11:10:510 action-translator LogManager.java:25 qattr [@-1,10:22='switchcontrol',<0>,42:26].[@-1,24:31='mySwitch',<0>,42:40]
2023-09-08 01:11:10:511 action-translator LogManager.java:25 translate  $inst = $whilecontrol.whict
2023-09-08 01:11:10:511 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:17]
2023-09-08 01:11:10:511 action-translator LogManager.java:25 qattr [@-1,10:21='whilecontrol',<0>,43:25].[@-1,23:27='whict',<0>,43:38]
2023-09-08 01:11:10:511 action-translator LogManager.java:25 translate  $inst = $forcontrol.forct
2023-09-08 01:11:10:511 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:15]
2023-09-08 01:11:10:511 action-translator LogManager.java:25 qattr [@-1,10:19='forcontrol',<0>,44:23].[@-1,21:25='forct',<0>,44:34]
2023-09-08 01:11:10:511 action-translator LogManager.java:25 translate  $inst = $guardcontrol.guct
2023-09-08 01:11:10:511 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:17]
2023-09-08 01:11:10:511 action-translator LogManager.java:25 qattr [@-1,10:21='guardcontrol',<0>,45:25].[@-1,23:26='guct',<0>,45:38]
2023-09-08 01:11:10:512 action-translator LogManager.java:25 translate  $inst = $vectorcontrol.vect 
2023-09-08 01:11:10:512 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:31]
2023-09-08 01:11:10:512 action-translator LogManager.java:25 qattr [@-1,10:22='vectorcontrol',<0>,46:39].[@-1,24:27='vect',<0>,46:53]
2023-09-08 01:11:10:512 action-translator LogManager.java:25 translate  $inst = $vectoragregar.veadct 
2023-09-08 01:11:10:512 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:19]
2023-09-08 01:11:10:512 action-translator LogManager.java:25 qattr [@-1,10:22='vectoragregar',<0>,47:27].[@-1,24:29='veadct',<0>,47:41]
2023-09-08 01:11:10:512 action-translator LogManager.java:25 translate  $inst = $vectorremover.vermct 
2023-09-08 01:11:10:512 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:19]
2023-09-08 01:11:10:512 action-translator LogManager.java:25 qattr [@-1,10:22='vectorremover',<0>,48:27].[@-1,24:29='vermct',<0>,48:41]
2023-09-08 01:11:10:513 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-08 01:11:10:513 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:27]
2023-09-08 01:11:10:513 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,49:35].[@-1,20:23='prnt',<0>,49:45]
2023-09-08 01:11:10:513 action-translator LogManager.java:25 translate  $inst = $matrizcontrol.matct
2023-09-08 01:11:10:513 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,50:31]
2023-09-08 01:11:10:513 action-translator LogManager.java:25 qattr [@-1,10:22='matrizcontrol',<0>,50:39].[@-1,24:28='matct',<0>,50:53]
2023-09-08 01:11:10:513 action-translator LogManager.java:25 translate  $inst = $structcontrol.struck
2023-09-08 01:11:10:513 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,51:18]
2023-09-08 01:11:10:513 action-translator LogManager.java:25 qattr [@-1,10:22='structcontrol',<0>,51:26].[@-1,24:29='struck',<0>,51:40]
2023-09-08 01:11:10:514 action-translator LogManager.java:25 translate  $inst = $funciondeclaracioncontrol.fdc
2023-09-08 01:11:10:514 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,52:30]
2023-09-08 01:11:10:514 action-translator LogManager.java:25 qattr [@-1,10:34='funciondeclaracioncontrol',<0>,52:38].[@-1,36:38='fdc',<0>,52:64]
2023-09-08 01:11:10:514 action-translator LogManager.java:25 translate  $inst = $funcionllamadacontrol.flctl
2023-09-08 01:11:10:514 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,53:26]
2023-09-08 01:11:10:514 action-translator LogManager.java:25 qattr [@-1,10:30='funcionllamadacontrol',<0>,53:34].[@-1,32:36='flctl',<0>,53:56]
2023-09-08 01:11:10:514 action-translator LogManager.java:25 translate  $inst = $structexpr.strexpr
2023-09-08 01:11:10:514 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,54:28]
2023-09-08 01:11:10:514 action-translator LogManager.java:25 qattr [@-1,10:19='structexpr',<0>,54:36].[@-1,21:27='strexpr',<0>,54:47]
2023-09-08 01:11:10:514 action-translator LogManager.java:25 translate 
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  
2023-09-08 01:11:10:516 action-translator LogManager.java:25 attr [@-1,7:12='blkint',<0>,60:5]
2023-09-08 01:11:10:516 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    
2023-09-08 01:11:10:516 action-translator LogManager.java:25 attr [@-1,115:120='blkint',<0>,67:13]
2023-09-08 01:11:10:516 action-translator LogManager.java:25 attr [@-1,132:137='blkint',<0>,67:30]
2023-09-08 01:11:10:518 action-translator LogManager.java:25 translate  $insint = $declavarible.decvbl
2023-09-08 01:11:10:518 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,75:30]
2023-09-08 01:11:10:519 action-translator LogManager.java:25 qattr [@-1,12:23='declavarible',<0>,75:40].[@-1,25:30='decvbl',<0>,75:53]
2023-09-08 01:11:10:519 action-translator LogManager.java:25 translate  $insint = $declaconstante.deccon
2023-09-08 01:11:10:519 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,76:32]
2023-09-08 01:11:10:519 action-translator LogManager.java:25 qattr [@-1,12:25='declaconstante',<0>,76:42].[@-1,27:32='deccon',<0>,76:57]
2023-09-08 01:11:10:519 action-translator LogManager.java:25 translate  $insint = $asignacionvariable.asgvbl
2023-09-08 01:11:10:519 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,77:36]
2023-09-08 01:11:10:519 action-translator LogManager.java:25 qattr [@-1,12:29='asignacionvariable',<0>,77:46].[@-1,31:36='asgvbl',<0>,77:65]
2023-09-08 01:11:10:520 action-translator LogManager.java:25 translate  $insint = $sentenciaifelse.myIfElse
2023-09-08 01:11:10:520 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,78:20]
2023-09-08 01:11:10:520 action-translator LogManager.java:25 qattr [@-1,12:26='sentenciaifelse',<0>,78:30].[@-1,28:35='myIfElse',<0>,78:46]
2023-09-08 01:11:10:520 action-translator LogManager.java:25 translate  $insint = $switchcontrol.mySwitch
2023-09-08 01:11:10:520 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,79:18]
2023-09-08 01:11:10:520 action-translator LogManager.java:25 qattr [@-1,12:24='switchcontrol',<0>,79:28].[@-1,26:33='mySwitch',<0>,79:42]
2023-09-08 01:11:10:520 action-translator LogManager.java:25 translate  $insint = $whilecontrol.whict
2023-09-08 01:11:10:520 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,80:17]
2023-09-08 01:11:10:520 action-translator LogManager.java:25 qattr [@-1,12:23='whilecontrol',<0>,80:27].[@-1,25:29='whict',<0>,80:40]
2023-09-08 01:11:10:520 action-translator LogManager.java:25 translate  $insint = $forcontrol.forct
2023-09-08 01:11:10:520 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,81:15]
2023-09-08 01:11:10:520 action-translator LogManager.java:25 qattr [@-1,12:21='forcontrol',<0>,81:25].[@-1,23:27='forct',<0>,81:36]
2023-09-08 01:11:10:521 action-translator LogManager.java:25 translate  $insint = $guardcontrol.guct
2023-09-08 01:11:10:521 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,82:17]
2023-09-08 01:11:10:521 action-translator LogManager.java:25 qattr [@-1,12:23='guardcontrol',<0>,82:27].[@-1,25:28='guct',<0>,82:40]
2023-09-08 01:11:10:521 action-translator LogManager.java:25 translate  $insint = $continuee.coct
2023-09-08 01:11:10:521 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,83:27]
2023-09-08 01:11:10:521 action-translator LogManager.java:25 qattr [@-1,12:20='continuee',<0>,83:37].[@-1,22:25='coct',<0>,83:47]
2023-09-08 01:11:10:521 action-translator LogManager.java:25 translate  $insint = $breakk.brkct
2023-09-08 01:11:10:521 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,84:24]
2023-09-08 01:11:10:521 action-translator LogManager.java:25 qattr [@-1,12:17='breakk',<0>,84:34].[@-1,19:23='brkct',<0>,84:41]
2023-09-08 01:11:10:522 action-translator LogManager.java:25 translate  $insint = $retornos.rect 
2023-09-08 01:11:10:522 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,85:26]
2023-09-08 01:11:10:522 action-translator LogManager.java:25 qattr [@-1,12:19='retornos',<0>,85:36].[@-1,21:24='rect',<0>,85:45]
2023-09-08 01:11:10:522 action-translator LogManager.java:25 translate  $insint = $vectorcontrol.vect 
2023-09-08 01:11:10:522 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,86:31]
2023-09-08 01:11:10:522 action-translator LogManager.java:25 qattr [@-1,12:24='vectorcontrol',<0>,86:41].[@-1,26:29='vect',<0>,86:55]
2023-09-08 01:11:10:523 action-translator LogManager.java:25 translate  $insint = $vectoragregar.veadct 
2023-09-08 01:11:10:523 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,87:32]
2023-09-08 01:11:10:523 action-translator LogManager.java:25 qattr [@-1,12:24='vectoragregar',<0>,87:42].[@-1,26:31='veadct',<0>,87:56]
2023-09-08 01:11:10:523 action-translator LogManager.java:25 translate  $insint = $vectorremover.vermct 
2023-09-08 01:11:10:523 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,88:31]
2023-09-08 01:11:10:523 action-translator LogManager.java:25 qattr [@-1,12:24='vectorremover',<0>,88:41].[@-1,26:31='vermct',<0>,88:55]
2023-09-08 01:11:10:523 action-translator LogManager.java:25 translate  $insint = $printstmt.prnt
2023-09-08 01:11:10:523 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,89:27]
2023-09-08 01:11:10:523 action-translator LogManager.java:25 qattr [@-1,12:20='printstmt',<0>,89:37].[@-1,22:25='prnt',<0>,89:47]
2023-09-08 01:11:10:523 action-translator LogManager.java:25 translate  $insint = $matrizcontrol.matct
2023-09-08 01:11:10:523 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,90:31]
2023-09-08 01:11:10:523 action-translator LogManager.java:25 qattr [@-1,12:24='matrizcontrol',<0>,90:41].[@-1,26:30='matct',<0>,90:55]
2023-09-08 01:11:10:523 action-translator LogManager.java:25 translate  $insint = $funcionllamadacontrol.flctl
2023-09-08 01:11:10:524 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,91:26]
2023-09-08 01:11:10:524 action-translator LogManager.java:25 qattr [@-1,12:32='funcionllamadacontrol',<0>,91:36].[@-1,34:38='flctl',<0>,91:58]
2023-09-08 01:11:10:524 action-translator LogManager.java:25 translate  $insint = $structexpr.strexpr
2023-09-08 01:11:10:524 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,92:28]
2023-09-08 01:11:10:524 action-translator LogManager.java:25 qattr [@-1,12:21='structexpr',<0>,92:38].[@-1,23:29='strexpr',<0>,92:49]
2023-09-08 01:11:10:525 action-translator LogManager.java:25 translate $decvbl = instructions.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)
2023-09-08 01:11:10:525 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,103:44]
2023-09-08 01:11:10:525 action-translator LogManager.java:25 qattr [@-1,47:49='VAR',<0>,103:90].[@-1,51:54='line',<0>,103:94]
2023-09-08 01:11:10:526 action-translator LogManager.java:25 qattr [@-1,58:60='VAR',<0>,103:101].[@-1,62:64='pos',<0>,103:105]
2023-09-08 01:11:10:526 action-translator LogManager.java:25 qattr [@-1,68:76='ID_VALIDO',<0>,103:111].[@-1,78:81='text',<0>,103:121]
2023-09-08 01:11:10:526 action-translator LogManager.java:25 qattr [@-1,85:92='tipodato',<0>,103:128].[@-1,94:97='tipo',<0>,103:137]
2023-09-08 01:11:10:526 action-translator LogManager.java:25 qattr [@-1,101:104='expr',<0>,103:144].[@-1,106:106='e',<0>,103:149]
2023-09-08 01:11:10:526 action-translator LogManager.java:25 translate $decvbl = instructions.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)
2023-09-08 01:11:10:526 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,104:25]
2023-09-08 01:11:10:526 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,104:78].[@-1,58:61='line',<0>,104:82]
2023-09-08 01:11:10:526 action-translator LogManager.java:25 qattr [@-1,65:67='VAR',<0>,104:89].[@-1,69:71='pos',<0>,104:93]
2023-09-08 01:11:10:526 action-translator LogManager.java:25 qattr [@-1,75:83='ID_VALIDO',<0>,104:99].[@-1,85:88='text',<0>,104:109]
2023-09-08 01:11:10:526 action-translator LogManager.java:25 qattr [@-1,92:95='expr',<0>,104:116].[@-1,97:97='e',<0>,104:121]
2023-09-08 01:11:10:528 action-translator LogManager.java:25 translate $decvbl = instructions.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)
2023-09-08 01:11:10:528 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,105:49]
2023-09-08 01:11:10:528 action-translator LogManager.java:25 qattr [@-1,53:55='VAR',<0>,105:101].[@-1,57:60='line',<0>,105:105]
2023-09-08 01:11:10:528 action-translator LogManager.java:25 qattr [@-1,64:66='VAR',<0>,105:112].[@-1,68:70='pos',<0>,105:116]
2023-09-08 01:11:10:528 action-translator LogManager.java:25 qattr [@-1,74:82='ID_VALIDO',<0>,105:122].[@-1,84:87='text',<0>,105:132]
2023-09-08 01:11:10:528 action-translator LogManager.java:25 qattr [@-1,91:98='tipodato',<0>,105:139].[@-1,100:103='tipo',<0>,105:148]
2023-09-08 01:11:10:528 action-translator LogManager.java:25 translate $deccon = instructions.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)
2023-09-08 01:11:10:528 action-translator LogManager.java:25 attr [@-1,1:6='deccon',<0>,109:45]
2023-09-08 01:11:10:529 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,109:92].[@-1,52:55='line',<0>,109:96]
2023-09-08 01:11:10:529 action-translator LogManager.java:25 qattr [@-1,59:61='LET',<0>,109:103].[@-1,63:65='pos',<0>,109:107]
2023-09-08 01:11:10:529 action-translator LogManager.java:25 qattr [@-1,69:77='ID_VALIDO',<0>,109:113].[@-1,79:82='text',<0>,109:123]
2023-09-08 01:11:10:530 action-translator LogManager.java:25 qattr [@-1,86:93='tipodato',<0>,109:130].[@-1,95:98='tipo',<0>,109:139]
2023-09-08 01:11:10:530 action-translator LogManager.java:25 qattr [@-1,102:105='expr',<0>,109:146].[@-1,107:107='e',<0>,109:151]
2023-09-08 01:11:10:530 action-translator LogManager.java:25 translate $deccon = instructions.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)
2023-09-08 01:11:10:531 action-translator LogManager.java:25 attr [@-1,1:6='deccon',<0>,110:25]
2023-09-08 01:11:10:531 action-translator LogManager.java:25 qattr [@-1,55:57='LET',<0>,110:79].[@-1,59:62='line',<0>,110:83]
2023-09-08 01:11:10:531 action-translator LogManager.java:25 qattr [@-1,66:68='LET',<0>,110:90].[@-1,70:72='pos',<0>,110:94]
2023-09-08 01:11:10:531 action-translator LogManager.java:25 qattr [@-1,76:84='ID_VALIDO',<0>,110:100].[@-1,86:89='text',<0>,110:110]
2023-09-08 01:11:10:531 action-translator LogManager.java:25 qattr [@-1,93:96='expr',<0>,110:117].[@-1,98:98='e',<0>,110:122]
2023-09-08 01:11:10:532 action-translator LogManager.java:25 translate  $asgvbl = instructions.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-09-08 01:11:10:532 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,114:22]
2023-09-08 01:11:10:532 action-translator LogManager.java:25 qattr [@-1,47:55='ID_VALIDO',<0>,114:67].[@-1,57:60='line',<0>,114:77]
2023-09-08 01:11:10:532 action-translator LogManager.java:25 qattr [@-1,64:72='ID_VALIDO',<0>,114:84].[@-1,74:76='pos',<0>,114:94]
2023-09-08 01:11:10:532 action-translator LogManager.java:25 qattr [@-1,80:88='ID_VALIDO',<0>,114:100].[@-1,90:93='text',<0>,114:110]
2023-09-08 01:11:10:532 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,114:117].[@-1,102:102='e',<0>,114:122]
2023-09-08 01:11:10:532 action-translator LogManager.java:25 translate  $asgvbl = instructions.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-09-08 01:11:10:532 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,115:24]
2023-09-08 01:11:10:532 action-translator LogManager.java:25 qattr [@-1,43:51='ID_VALIDO',<0>,115:65].[@-1,53:56='line',<0>,115:75]
2023-09-08 01:11:10:532 action-translator LogManager.java:25 qattr [@-1,60:68='ID_VALIDO',<0>,115:82].[@-1,70:72='pos',<0>,115:92]
2023-09-08 01:11:10:532 action-translator LogManager.java:25 qattr [@-1,76:84='ID_VALIDO',<0>,115:98].[@-1,86:89='text',<0>,115:108]
2023-09-08 01:11:10:532 action-translator LogManager.java:25 qattr [@-1,93:96='expr',<0>,115:115].[@-1,98:98='e',<0>,115:120]
2023-09-08 01:11:10:533 action-translator LogManager.java:25 translate  $asgvbl = instructions.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-09-08 01:11:10:533 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,116:25]
2023-09-08 01:11:10:533 action-translator LogManager.java:25 qattr [@-1,44:52='ID_VALIDO',<0>,116:67].[@-1,54:57='line',<0>,116:77]
2023-09-08 01:11:10:533 action-translator LogManager.java:25 qattr [@-1,61:69='ID_VALIDO',<0>,116:84].[@-1,71:73='pos',<0>,116:94]
2023-09-08 01:11:10:533 action-translator LogManager.java:25 qattr [@-1,77:85='ID_VALIDO',<0>,116:100].[@-1,87:90='text',<0>,116:110]
2023-09-08 01:11:10:533 action-translator LogManager.java:25 qattr [@-1,94:97='expr',<0>,116:117].[@-1,99:99='e',<0>,116:122]
2023-09-08 01:11:10:533 action-translator LogManager.java:25 translate  $tipo = environment.INTEGER 
2023-09-08 01:11:10:533 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,120:8]
2023-09-08 01:11:10:534 action-translator LogManager.java:25 translate  $tipo = environment.FLOAT 
2023-09-08 01:11:10:534 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,121:10]
2023-09-08 01:11:10:534 action-translator LogManager.java:25 translate  $tipo = environment.STRING 
2023-09-08 01:11:10:534 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,122:11]
2023-09-08 01:11:10:534 action-translator LogManager.java:25 translate  $tipo = environment.BOOLEAN 
2023-09-08 01:11:10:534 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,123:9]
2023-09-08 01:11:10:534 action-translator LogManager.java:25 translate  $tipo = environment.CHARACTER 
2023-09-08 01:11:10:534 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,124:12]
2023-09-08 01:11:10:536 action-translator LogManager.java:25 translate 
2023-09-08 01:11:10:536 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) 
2023-09-08 01:11:10:536 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:70]
2023-09-08 01:11:10:536 action-translator LogManager.java:25 qattr [@-1,32:36='right',<0>,2:100].[@-1,38:42='start',<0>,2:106]
2023-09-08 01:11:10:536 action-translator LogManager.java:25 qattr [@-1,56:60='right',<0>,2:124].[@-1,62:66='start',<0>,2:130]
2023-09-08 01:11:10:536 action-translator LogManager.java:25 qattr [@-1,82:86='right',<0>,2:150].[@-1,88:88='e',<0>,2:156]
2023-09-08 01:11:10:537 action-translator LogManager.java:25 qattr [@-1,92:93='op',<0>,2:160].[@-1,95:98='text',<0>,2:163]
2023-09-08 01:11:10:537 action-translator LogManager.java:25 qattr [@-1,102:106='right',<0>,2:170].[@-1,108:108='e',<0>,2:176]
2023-09-08 01:11:10:537 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-08 01:11:10:537 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:79]
2023-09-08 01:11:10:537 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,3:84].[@-1,12:12='e',<0>,3:89]
2023-09-08 01:11:10:537 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    
2023-09-08 01:11:10:537 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,6:30].[@-1,39:42='text',<0>,6:37]
2023-09-08 01:11:10:537 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,7:43].[@-1,102:105='text',<0>,7:50]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 attr [@-1,377:377='e',<0>,16:13]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 qattr [@-1,407:412='NUMBER',<0>,16:43].[@-1,414:417='line',<0>,16:50]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 qattr [@-1,420:425='NUMBER',<0>,16:56].[@-1,427:429='pos',<0>,16:63]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 qattr [@-1,510:515='NUMBER',<0>,18:37].[@-1,517:520='text',<0>,18:44]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 attr [@-1,613:613='e',<0>,22:13]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 qattr [@-1,643:648='NUMBER',<0>,22:43].[@-1,650:653='line',<0>,22:50]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 qattr [@-1,656:661='NUMBER',<0>,22:56].[@-1,663:665='pos',<0>,22:63]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-08 01:11:10:538 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,27:30].[@-1,39:42='text',<0>,27:37]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,28:43].[@-1,102:105='text',<0>,28:50]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 attr [@-1,374:374='e',<0>,37:10]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 qattr [@-1,404:409='NUMBER',<0>,37:40].[@-1,411:414='line',<0>,37:47]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 qattr [@-1,417:422='NUMBER',<0>,37:53].[@-1,424:426='pos',<0>,37:60]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 qattr [@-1,506:511='NUMBER',<0>,39:37].[@-1,513:516='text',<0>,39:44]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 attr [@-1,621:621='e',<0>,43:13]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 qattr [@-1,651:656='NUMBER',<0>,43:43].[@-1,658:661='line',<0>,43:50]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 qattr [@-1,664:669='NUMBER',<0>,43:56].[@-1,671:673='pos',<0>,43:63]
2023-09-08 01:11:10:538 action-translator LogManager.java:25 translate 
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-08 01:11:10:538 action-translator LogManager.java:25 qattr [@-1,18:23='CADENA',<0>,48:16].[@-1,25:28='text',<0>,48:23]
2023-09-08 01:11:10:539 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,49:9]
2023-09-08 01:11:10:539 action-translator LogManager.java:25 qattr [@-1,70:75='CADENA',<0>,49:39].[@-1,77:80='line',<0>,49:46]
2023-09-08 01:11:10:539 action-translator LogManager.java:25 qattr [@-1,84:89='CADENA',<0>,49:53].[@-1,91:93='pos',<0>,49:60]
2023-09-08 01:11:10:539 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-09-08 01:11:10:539 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,51:32]
2023-09-08 01:11:10:539 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,51:62].[@-1,36:39='line',<0>,51:66]
2023-09-08 01:11:10:539 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,51:73].[@-1,47:49='pos',<0>,51:77]
2023-09-08 01:11:10:539 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-09-08 01:11:10:539 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,52:32]
2023-09-08 01:11:10:540 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,52:62].[@-1,36:39='line',<0>,52:66]
2023-09-08 01:11:10:540 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,52:73].[@-1,47:49='pos',<0>,52:77]
2023-09-08 01:11:10:540 action-translator LogManager.java:25 translate  
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    
2023-09-08 01:11:10:540 action-translator LogManager.java:25 qattr [@-1,19:27='CHARACTER',<0>,55:16].[@-1,29:32='text',<0>,55:26]
2023-09-08 01:11:10:540 action-translator LogManager.java:25 attr [@-1,44:44='e',<0>,56:9]
2023-09-08 01:11:10:540 action-translator LogManager.java:25 qattr [@-1,74:82='CHARACTER',<0>,56:39].[@-1,84:87='line',<0>,56:49]
2023-09-08 01:11:10:540 action-translator LogManager.java:25 qattr [@-1,91:99='CHARACTER',<0>,56:56].[@-1,101:103='pos',<0>,56:66]
2023-09-08 01:11:10:540 action-translator LogManager.java:25 translate 
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    
2023-09-08 01:11:10:540 action-translator LogManager.java:25 qattr [@-1,17:25='ID_VALIDO',<0>,60:15].[@-1,27:30='text',<0>,60:25]
2023-09-08 01:11:10:540 action-translator LogManager.java:25 attr [@-1,42:42='e',<0>,61:9]
2023-09-08 01:11:10:540 action-translator LogManager.java:25 qattr [@-1,70:78='ID_VALIDO',<0>,61:37].[@-1,80:83='line',<0>,61:47]
2023-09-08 01:11:10:540 action-translator LogManager.java:25 qattr [@-1,86:94='ID_VALIDO',<0>,61:53].[@-1,96:98='pos',<0>,61:63]
2023-09-08 01:11:10:540 action-translator LogManager.java:25 translate $e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)
2023-09-08 01:11:10:541 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,63:32]
2023-09-08 01:11:10:541 action-translator LogManager.java:25 qattr [@-1,31:34='NULO',<0>,63:62].[@-1,36:39='line',<0>,63:67]
2023-09-08 01:11:10:541 action-translator LogManager.java:25 qattr [@-1,43:46='NULO',<0>,63:74].[@-1,48:50='pos',<0>,63:79]
2023-09-08 01:11:10:541 action-translator LogManager.java:25 qattr [@-1,54:57='NULO',<0>,63:85].[@-1,59:62='text',<0>,63:90]
2023-09-08 01:11:10:541 action-translator LogManager.java:25 translate  $e = $vectorvacio.veemct
2023-09-08 01:11:10:541 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,64:40]
2023-09-08 01:11:10:541 action-translator LogManager.java:25 qattr [@-1,7:17='vectorvacio',<0>,64:45].[@-1,19:24='veemct',<0>,64:57]
2023-09-08 01:11:10:541 action-translator LogManager.java:25 translate  $e = $vectorcount.vecnct
2023-09-08 01:11:10:541 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,65:40]
2023-09-08 01:11:10:541 action-translator LogManager.java:25 qattr [@-1,7:17='vectorcount',<0>,65:45].[@-1,19:24='vecnct',<0>,65:57]
2023-09-08 01:11:10:541 action-translator LogManager.java:25 translate  $e = $vectoraccess.vepposct
2023-09-08 01:11:10:541 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,66:41]
2023-09-08 01:11:10:541 action-translator LogManager.java:25 qattr [@-1,7:18='vectoraccess',<0>,66:46].[@-1,20:27='vepposct',<0>,66:59]
2023-09-08 01:11:10:541 action-translator LogManager.java:25 translate  $e = $intembebida.intemb
2023-09-08 01:11:10:541 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,67:40]
2023-09-08 01:11:10:541 action-translator LogManager.java:25 qattr [@-1,7:17='intembebida',<0>,67:45].[@-1,19:24='intemb',<0>,67:57]
2023-09-08 01:11:10:541 action-translator LogManager.java:25 translate  $e = $floatembebida.floemb
2023-09-08 01:11:10:542 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,68:42]
2023-09-08 01:11:10:542 action-translator LogManager.java:25 qattr [@-1,7:19='floatembebida',<0>,68:47].[@-1,21:26='floemb',<0>,68:61]
2023-09-08 01:11:10:542 action-translator LogManager.java:25 translate  $e = $stringembebida.stremb
2023-09-08 01:11:10:542 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,69:43]
2023-09-08 01:11:10:542 action-translator LogManager.java:25 qattr [@-1,7:20='stringembebida',<0>,69:48].[@-1,22:27='stremb',<0>,69:63]
2023-09-08 01:11:10:542 action-translator LogManager.java:25 translate  $e = $funcionllamadacontrolConRetorno.flctlret
2023-09-08 01:11:10:542 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,70:60]
2023-09-08 01:11:10:542 action-translator LogManager.java:25 qattr [@-1,7:37='funcionllamadacontrolConRetorno',<0>,70:65].[@-1,39:46='flctlret',<0>,70:97]
2023-09-08 01:11:10:542 action-translator LogManager.java:25 translate  $e = $llamadastruct.llmstru
2023-09-08 01:11:10:542 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,71:42]
2023-09-08 01:11:10:542 action-translator LogManager.java:25 qattr [@-1,7:19='llamadastruct',<0>,71:47].[@-1,21:27='llmstru',<0>,71:61]
2023-09-08 01:11:10:542 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 25)
2023-09-08 01:11:10:543 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 01:11:10:543 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,74:120]
2023-09-08 01:11:10:543 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,74:150].[@-1,37:41='start',<0>,74:155]
2023-09-08 01:11:10:543 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,74:173].[@-1,60:64='start',<0>,74:178]
2023-09-08 01:11:10:543 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,74:198].[@-1,85:85='e',<0>,74:203]
2023-09-08 01:11:10:543 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,74:207].[@-1,92:95='text',<0>,74:210]
2023-09-08 01:11:10:543 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,74:217].[@-1,105:105='e',<0>,74:223]
2023-09-08 01:11:10:543 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2023-09-08 01:11:10:543 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 01:11:10:543 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,75:149]
2023-09-08 01:11:10:543 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,75:179].[@-1,37:41='start',<0>,75:184]
2023-09-08 01:11:10:543 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,75:202].[@-1,60:64='start',<0>,75:207]
2023-09-08 01:11:10:543 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,75:227].[@-1,85:85='e',<0>,75:232]
2023-09-08 01:11:10:543 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,75:236].[@-1,92:95='text',<0>,75:239]
2023-09-08 01:11:10:543 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,75:246].[@-1,105:105='e',<0>,75:252]
2023-09-08 01:11:10:543 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-09-08 01:11:10:543 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 01:11:10:543 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,76:149]
2023-09-08 01:11:10:543 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,76:179].[@-1,37:41='start',<0>,76:184]
2023-09-08 01:11:10:543 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,76:202].[@-1,60:64='start',<0>,76:207]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,76:227].[@-1,85:85='e',<0>,76:232]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,76:236].[@-1,92:95='text',<0>,76:239]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,76:246].[@-1,105:105='e',<0>,76:252]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-08 01:11:10:544 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 01:11:10:544 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,77:154]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,77:184].[@-1,37:41='start',<0>,77:189]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,77:207].[@-1,60:64='start',<0>,77:212]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,77:232].[@-1,85:85='e',<0>,77:237]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,77:241].[@-1,92:95='text',<0>,77:244]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,77:251].[@-1,105:105='e',<0>,77:257]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-08 01:11:10:544 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 01:11:10:544 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,78:154]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,78:184].[@-1,37:41='start',<0>,78:189]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,78:207].[@-1,60:64='start',<0>,78:212]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,78:232].[@-1,85:85='e',<0>,78:237]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,78:241].[@-1,92:95='text',<0>,78:244]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,78:251].[@-1,105:105='e',<0>,78:257]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-08 01:11:10:544 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 01:11:10:544 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,79:151]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,79:181].[@-1,37:41='start',<0>,79:186]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,79:204].[@-1,60:64='start',<0>,79:209]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,79:229].[@-1,85:85='e',<0>,79:234]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,79:238].[@-1,92:95='text',<0>,79:241]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,79:248].[@-1,105:105='e',<0>,79:254]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-08 01:11:10:544 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 01:11:10:544 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,80:127]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,80:157].[@-1,37:41='start',<0>,80:162]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,80:180].[@-1,60:64='start',<0>,80:185]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,80:205].[@-1,85:85='e',<0>,80:210]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,80:214].[@-1,92:95='text',<0>,80:217]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,80:224].[@-1,105:105='e',<0>,80:230]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-08 01:11:10:544 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 01:11:10:544 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,81:126]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,81:156].[@-1,37:41='start',<0>,81:161]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,81:179].[@-1,60:64='start',<0>,81:184]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,81:204].[@-1,85:85='e',<0>,81:209]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,81:213].[@-1,92:95='text',<0>,81:216]
2023-09-08 01:11:10:544 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,81:223].[@-1,105:105='e',<0>,81:229]
2023-09-08 01:11:10:546 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 25)
2023-09-08 01:11:10:546 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2023-09-08 01:11:10:546 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-09-08 01:11:10:546 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-08 01:11:10:546 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-08 01:11:10:546 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-08 01:11:10:546 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-08 01:11:10:546 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-08 01:11:10:547 action-translator LogManager.java:25 translate  $myIfElse = instructions.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)
2023-09-08 01:11:10:547 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,210:43]
2023-09-08 01:11:10:547 action-translator LogManager.java:25 qattr [@-1,42:43='IF',<0>,210:83].[@-1,45:48='line',<0>,210:86]
2023-09-08 01:11:10:547 action-translator LogManager.java:25 qattr [@-1,52:53='IF',<0>,210:93].[@-1,55:57='pos',<0>,210:96]
2023-09-08 01:11:10:547 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,210:102].[@-1,66:66='e',<0>,210:107]
2023-09-08 01:11:10:547 action-translator LogManager.java:25 qattr [@-1,70:81='blockinterno',<0>,210:111].[@-1,83:88='blkint',<0>,210:124]
2023-09-08 01:11:10:547 action-translator LogManager.java:25 translate  $myIfElse = instructions.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)
2023-09-08 01:11:10:547 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,211:91]
2023-09-08 01:11:10:547 action-translator LogManager.java:25 qattr [@-1,46:47='IF',<0>,211:135].[@-1,49:52='line',<0>,211:138]
2023-09-08 01:11:10:547 action-translator LogManager.java:25 qattr [@-1,56:57='IF',<0>,211:145].[@-1,59:61='pos',<0>,211:148]
2023-09-08 01:11:10:547 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,211:154].[@-1,70:70='e',<0>,211:159]
2023-09-08 01:11:10:547 action-translator LogManager.java:25 qattr [@-1,74:77='ifop',<0>,211:163].[@-1,79:84='blkint',<0>,211:168]
2023-09-08 01:11:10:547 action-translator LogManager.java:25 qattr [@-1,89:94='elseop',<0>,211:178].[@-1,96:101='blkint',<0>,211:185]
2023-09-08 01:11:10:547 action-translator LogManager.java:25 translate  $myIfElse = instructions.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)
2023-09-08 01:11:10:547 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,212:64]
2023-09-08 01:11:10:548 action-translator LogManager.java:25 qattr [@-1,48:49='IF',<0>,212:110].[@-1,51:54='line',<0>,212:113]
2023-09-08 01:11:10:548 action-translator LogManager.java:25 qattr [@-1,58:59='IF',<0>,212:120].[@-1,61:63='pos',<0>,212:123]
2023-09-08 01:11:10:548 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,212:129].[@-1,72:72='e',<0>,212:134]
2023-09-08 01:11:10:548 action-translator LogManager.java:25 qattr [@-1,76:87='blockinterno',<0>,212:138].[@-1,89:94='blkint',<0>,212:151]
2023-09-08 01:11:10:548 action-translator LogManager.java:25 qattr [@-1,98:112='sentenciaifelse',<0>,212:160].[@-1,114:121='myIfElse',<0>,212:176]
2023-09-08 01:11:10:548 action-translator LogManager.java:25 translate 
    if ($DEFAULT != nil) {
        $mySwitch = instructions.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = instructions.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }

2023-09-08 01:11:10:548 action-translator LogManager.java:25 attr [@-1,11:17='DEFAULT',<0>,218:9]
2023-09-08 01:11:10:548 action-translator LogManager.java:25 attr [@-1,39:46='mySwitch',<0>,219:9]
2023-09-08 01:11:10:548 action-translator LogManager.java:25 qattr [@-1,90:95='SWITCH',<0>,219:60].[@-1,97:100='line',<0>,219:67]
2023-09-08 01:11:10:548 action-translator LogManager.java:25 qattr [@-1,104:109='SWITCH',<0>,219:74].[@-1,111:113='pos',<0>,219:81]
2023-09-08 01:11:10:549 action-translator LogManager.java:25 qattr [@-1,117:120='expr',<0>,219:87].[@-1,122:122='e',<0>,219:92]
2023-09-08 01:11:10:549 action-translator LogManager.java:25 qattr [@-1,126:134='blockcase',<0>,219:96].[@-1,136:142='blkcase',<0>,219:106]
2023-09-08 01:11:10:549 action-translator LogManager.java:25 qattr [@-1,146:157='blockinterno',<0>,219:116].[@-1,159:164='blkint',<0>,219:129]
2023-09-08 01:11:10:549 action-translator LogManager.java:25 attr [@-1,191:198='mySwitch',<0>,221:9]
2023-09-08 01:11:10:549 action-translator LogManager.java:25 qattr [@-1,235:240='SWITCH',<0>,221:53].[@-1,242:245='line',<0>,221:60]
2023-09-08 01:11:10:549 action-translator LogManager.java:25 qattr [@-1,249:254='SWITCH',<0>,221:67].[@-1,256:258='pos',<0>,221:74]
2023-09-08 01:11:10:549 action-translator LogManager.java:25 qattr [@-1,262:265='expr',<0>,221:80].[@-1,267:267='e',<0>,221:85]
2023-09-08 01:11:10:549 action-translator LogManager.java:25 qattr [@-1,271:279='blockcase',<0>,221:89].[@-1,281:287='blkcase',<0>,221:99]
2023-09-08 01:11:10:549 action-translator LogManager.java:25 translate 
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext

2023-09-08 01:11:10:549 action-translator LogManager.java:25 attr [@-1,7:13='blkcase',<0>,227:5]
2023-09-08 01:11:10:549 action-translator LogManager.java:25 translate 
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }

2023-09-08 01:11:10:550 action-translator LogManager.java:25 attr [@-1,100:106='blkcase',<0>,234:9]
2023-09-08 01:11:10:550 action-translator LogManager.java:25 attr [@-1,118:124='blkcase',<0>,234:27]
2023-09-08 01:11:10:550 action-translator LogManager.java:25 translate 
    $blocas=instructions.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)

2023-09-08 01:11:10:550 action-translator LogManager.java:25 attr [@-1,7:12='blocas',<0>,242:5]
2023-09-08 01:11:10:550 action-translator LogManager.java:25 qattr [@-1,51:54='CASE',<0>,242:49].[@-1,56:59='line',<0>,242:54]
2023-09-08 01:11:10:550 action-translator LogManager.java:25 qattr [@-1,63:66='CASE',<0>,242:61].[@-1,68:70='pos',<0>,242:66]
2023-09-08 01:11:10:550 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,242:72].[@-1,79:79='e',<0>,242:77]
2023-09-08 01:11:10:550 action-translator LogManager.java:25 qattr [@-1,83:94='blockinterno',<0>,242:81].[@-1,96:101='blkint',<0>,242:94]
2023-09-08 01:11:10:550 action-translator LogManager.java:25 translate  $whict = instructions.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)
2023-09-08 01:11:10:550 action-translator LogManager.java:25 attr [@-1,2:6='whict',<0>,247:46]
2023-09-08 01:11:10:550 action-translator LogManager.java:25 qattr [@-1,42:46='WHILE',<0>,247:86].[@-1,48:51='line',<0>,247:92]
2023-09-08 01:11:10:550 action-translator LogManager.java:25 qattr [@-1,55:59='WHILE',<0>,247:99].[@-1,61:63='pos',<0>,247:105]
2023-09-08 01:11:10:550 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,247:111].[@-1,72:72='e',<0>,247:116]
2023-09-08 01:11:10:550 action-translator LogManager.java:25 qattr [@-1,76:87='blockinterno',<0>,247:120].[@-1,89:94='blkint',<0>,247:133]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 translate  $forct = instructions.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)
2023-09-08 01:11:10:551 action-translator LogManager.java:25 attr [@-1,2:6='forct',<0>,251:79]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,45:47='FOR',<0>,251:122].[@-1,49:52='line',<0>,251:126]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,56:58='FOR',<0>,251:133].[@-1,60:62='pos',<0>,251:137]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,66:74='ID_VALIDO',<0>,251:143].[@-1,76:79='text',<0>,251:153]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,83:86='left',<0>,251:160].[@-1,88:88='e',<0>,251:165]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,92:96='right',<0>,251:169].[@-1,98:98='e',<0>,251:175]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,101:112='blockinterno',<0>,251:178].[@-1,114:119='blkint',<0>,251:191]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 translate  $forct = instructions.NewSentenciaForId($FOR.line, $FOR.pos, $op1.text, $op2.text, $blockinterno.blkint)
2023-09-08 01:11:10:551 action-translator LogManager.java:25 attr [@-1,2:6='forct',<0>,252:70]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,42:44='FOR',<0>,252:110].[@-1,46:49='line',<0>,252:114]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,53:55='FOR',<0>,252:121].[@-1,57:59='pos',<0>,252:125]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,63:65='op1',<0>,252:131].[@-1,67:70='text',<0>,252:135]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,74:76='op2',<0>,252:142].[@-1,78:81='text',<0>,252:146]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,85:96='blockinterno',<0>,252:153].[@-1,98:103='blkint',<0>,252:166]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 translate  $forct = instructions.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)
2023-09-08 01:11:10:551 action-translator LogManager.java:25 attr [@-1,2:6='forct',<0>,253:57]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,46:48='FOR',<0>,253:101].[@-1,50:53='line',<0>,253:105]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,57:59='FOR',<0>,253:112].[@-1,61:63='pos',<0>,253:116]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,67:75='ID_VALIDO',<0>,253:122].[@-1,77:80='text',<0>,253:132]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,84:87='expr',<0>,253:139].[@-1,89:89='e',<0>,253:144]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,93:104='blockinterno',<0>,253:148].[@-1,106:111='blkint',<0>,253:161]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 translate  
    $guct = instructions.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)

2023-09-08 01:11:10:551 action-translator LogManager.java:25 attr [@-1,8:11='guct',<0>,259:5]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,47:51='GUARD',<0>,259:44].[@-1,53:56='line',<0>,259:50]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,60:64='GUARD',<0>,259:57].[@-1,66:68='pos',<0>,259:63]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,259:69].[@-1,77:77='e',<0>,259:74]
2023-09-08 01:11:10:551 action-translator LogManager.java:25 qattr [@-1,81:92='blockinterno',<0>,259:78].[@-1,94:99='blkint',<0>,259:91]
2023-09-08 01:11:10:553 action-translator LogManager.java:25 translate $coct = instructions.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)
2023-09-08 01:11:10:553 action-translator LogManager.java:25 attr [@-1,1:4='coct',<0>,264:12]
2023-09-08 01:11:10:553 action-translator LogManager.java:25 qattr [@-1,47:54='CONTINUE',<0>,264:58].[@-1,56:59='line',<0>,264:67]
2023-09-08 01:11:10:553 action-translator LogManager.java:25 qattr [@-1,63:70='CONTINUE',<0>,264:74].[@-1,72:74='pos',<0>,264:83]
2023-09-08 01:11:10:553 action-translator LogManager.java:25 translate  $brkct = instructions.NewTransferenciaBreak($BREAK.line, $BREAK.pos)
2023-09-08 01:11:10:553 action-translator LogManager.java:25 attr [@-1,2:6='brkct',<0>,268:10]
2023-09-08 01:11:10:553 action-translator LogManager.java:25 qattr [@-1,46:50='BREAK',<0>,268:54].[@-1,52:55='line',<0>,268:60]
2023-09-08 01:11:10:553 action-translator LogManager.java:25 qattr [@-1,59:63='BREAK',<0>,268:67].[@-1,65:67='pos',<0>,268:73]
2023-09-08 01:11:10:553 action-translator LogManager.java:25 translate 
    $rect = instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);

2023-09-08 01:11:10:553 action-translator LogManager.java:25 setAttr [@-1,7:10='rect',<0>,274:5] [@-1,13:85=' instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e)',<0>,274:11]
2023-09-08 01:11:10:553 action-translator LogManager.java:25 translate  instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e)
2023-09-08 01:11:10:553 action-translator LogManager.java:25 qattr [@-1,41:46='RETURN',<0>,273:41].[@-1,48:51='line',<0>,273:48]
2023-09-08 01:11:10:553 action-translator LogManager.java:25 qattr [@-1,55:60='RETURN',<0>,273:55].[@-1,62:64='pos',<0>,273:62]
2023-09-08 01:11:10:553 action-translator LogManager.java:25 qattr [@-1,68:69='op',<0>,273:68].[@-1,71:71='e',<0>,273:71]
2023-09-08 01:11:10:554 action-translator LogManager.java:25 translate 
    $rect = instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos);

2023-09-08 01:11:10:554 action-translator LogManager.java:25 setAttr [@-1,7:10='rect',<0>,278:5] [@-1,13:75=' instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos)',<0>,278:11]
2023-09-08 01:11:10:554 action-translator LogManager.java:25 translate  instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos)
2023-09-08 01:11:10:554 action-translator LogManager.java:25 qattr [@-1,38:43='RETURN',<0>,277:38].[@-1,45:48='line',<0>,277:45]
2023-09-08 01:11:10:554 action-translator LogManager.java:25 qattr [@-1,52:57='RETURN',<0>,277:52].[@-1,59:61='pos',<0>,277:59]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 translate  $vect = instructions.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)
2023-09-08 01:11:10:555 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,285:89]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 qattr [@-1,50:52='VAR',<0>,285:137].[@-1,54:57='line',<0>,285:141]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 qattr [@-1,61:63='VAR',<0>,285:148].[@-1,65:67='pos',<0>,285:152]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 qattr [@-1,71:79='ID_VALIDO',<0>,285:158].[@-1,81:84='text',<0>,285:168]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 qattr [@-1,89:96='tipodato',<0>,285:176].[@-1,98:101='tipo',<0>,285:185]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 qattr [@-1,105:115='blockparams',<0>,285:192].[@-1,117:122='blkpar',<0>,285:204]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 translate  $vect = instructions.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)
2023-09-08 01:11:10:555 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,286:77]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 qattr [@-1,53:55='VAR',<0>,286:128].[@-1,57:60='line',<0>,286:132]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 qattr [@-1,64:66='VAR',<0>,286:139].[@-1,68:70='pos',<0>,286:143]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 qattr [@-1,74:82='ID_VALIDO',<0>,286:149].[@-1,84:87='text',<0>,286:159]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 qattr [@-1,92:99='tipodato',<0>,286:167].[@-1,101:104='tipo',<0>,286:176]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 translate  $vect = instructions.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)
2023-09-08 01:11:10:555 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,287:79]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 qattr [@-1,47:49='VAR',<0>,287:124].[@-1,51:54='line',<0>,287:128]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 qattr [@-1,58:60='VAR',<0>,287:135].[@-1,62:64='pos',<0>,287:139]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 qattr [@-1,68:71='prin',<0>,287:145].[@-1,73:76='text',<0>,287:150]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 qattr [@-1,81:88='tipodato',<0>,287:158].[@-1,90:93='tipo',<0>,287:167]
2023-09-08 01:11:10:555 action-translator LogManager.java:25 qattr [@-1,97:100='secu',<0>,287:174].[@-1,102:105='text',<0>,287:179]
2023-09-08 01:11:10:556 action-translator LogManager.java:25 translate 
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext

2023-09-08 01:11:10:556 action-translator LogManager.java:25 attr [@-1,7:12='blkpar',<0>,291:5]
2023-09-08 01:11:10:556 action-translator LogManager.java:25 translate 
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }

2023-09-08 01:11:10:556 action-translator LogManager.java:25 attr [@-1,102:107='blkpar',<0>,298:9]
2023-09-08 01:11:10:556 action-translator LogManager.java:25 attr [@-1,119:124='blkpar',<0>,298:26]
2023-09-08 01:11:10:556 action-translator LogManager.java:25 translate 
    $blopas = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)

2023-09-08 01:11:10:556 action-translator LogManager.java:25 attr [@-1,7:12='blopas',<0>,306:5]
2023-09-08 01:11:10:556 action-translator LogManager.java:25 qattr [@-1,51:54='COMA',<0>,306:49].[@-1,56:59='line',<0>,306:54]
2023-09-08 01:11:10:557 action-translator LogManager.java:25 qattr [@-1,63:66='COMA',<0>,306:61].[@-1,68:70='pos',<0>,306:66]
2023-09-08 01:11:10:557 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,306:72].[@-1,79:79='e',<0>,306:77]
2023-09-08 01:11:10:557 action-translator LogManager.java:25 translate 
    $blopas = instructions.NewArregloParametro($expr.e)

2023-09-08 01:11:10:557 action-translator LogManager.java:25 attr [@-1,7:12='blopas',<0>,310:5]
2023-09-08 01:11:10:557 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,310:48].[@-1,55:55='e',<0>,310:53]
2023-09-08 01:11:10:557 action-translator LogManager.java:25 translate  $veadct = instructions.NewArregloAppend($ID_VALIDO.text , $expr.e)
2023-09-08 01:11:10:557 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,314:46]
2023-09-08 01:11:10:557 action-translator LogManager.java:25 qattr [@-1,42:50='ID_VALIDO',<0>,314:86].[@-1,52:55='text',<0>,314:96]
2023-09-08 01:11:10:559 action-translator LogManager.java:25 qattr [@-1,60:63='expr',<0>,314:104].[@-1,65:65='e',<0>,314:109]
2023-09-08 01:11:10:559 action-translator LogManager.java:25 translate  $veadct = instructions.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)
2023-09-08 01:11:10:559 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,315:91]
2023-09-08 01:11:10:559 action-translator LogManager.java:25 qattr [@-1,49:52='prin',<0>,315:138].[@-1,54:57='text',<0>,315:143]
2023-09-08 01:11:10:559 action-translator LogManager.java:25 qattr [@-1,62:64='pop',<0>,315:151].[@-1,66:66='e',<0>,315:155]
2023-09-08 01:11:10:559 action-translator LogManager.java:25 qattr [@-1,70:73='secu',<0>,315:159].[@-1,75:78='text',<0>,315:164]
2023-09-08 01:11:10:559 action-translator LogManager.java:25 qattr [@-1,82:84='sop',<0>,315:171].[@-1,86:86='e',<0>,315:175]
2023-09-08 01:11:10:559 action-translator LogManager.java:25 translate  $veadct = instructions.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) 
2023-09-08 01:11:10:559 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,317:2]
2023-09-08 01:11:10:559 action-translator LogManager.java:25 qattr [@-1,49:57='ID_VALIDO',<0>,317:49].[@-1,59:62='text',<0>,317:59]
2023-09-08 01:11:10:559 action-translator LogManager.java:25 qattr [@-1,66:68='op1',<0>,317:66].[@-1,70:70='e',<0>,317:70]
2023-09-08 01:11:10:559 action-translator LogManager.java:25 qattr [@-1,74:76='op2',<0>,317:74].[@-1,78:78='e',<0>,317:78]
2023-09-08 01:11:10:559 action-translator LogManager.java:25 qattr [@-1,82:99='listamatrizaddsubs',<0>,317:82].[@-1,101:110='blklimatas',<0>,317:101]
2023-09-08 01:11:10:559 action-translator LogManager.java:25 qattr [@-1,114:116='op3',<0>,317:114].[@-1,118:118='e',<0>,317:118]
2023-09-08 01:11:10:560 action-translator LogManager.java:25 translate  $veadct = instructions.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) 
2023-09-08 01:11:10:560 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,319:2]
2023-09-08 01:11:10:560 action-translator LogManager.java:25 qattr [@-1,45:53='ID_VALIDO',<0>,319:45].[@-1,55:58='text',<0>,319:55]
2023-09-08 01:11:10:560 action-translator LogManager.java:25 qattr [@-1,62:64='op1',<0>,319:62].[@-1,66:66='e',<0>,319:66]
2023-09-08 01:11:10:560 action-translator LogManager.java:25 qattr [@-1,70:72='op2',<0>,319:70].[@-1,74:74='e',<0>,319:74]
2023-09-08 01:11:10:560 action-translator LogManager.java:25 qattr [@-1,78:80='op3',<0>,319:78].[@-1,82:82='e',<0>,319:82]
2023-09-08 01:11:10:560 action-translator LogManager.java:25 translate  $veadct = instructions.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)
2023-09-08 01:11:10:560 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,320:52]
2023-09-08 01:11:10:560 action-translator LogManager.java:25 qattr [@-1,45:53='ID_VALIDO',<0>,320:95].[@-1,55:58='text',<0>,320:105]
2023-09-08 01:11:10:560 action-translator LogManager.java:25 qattr [@-1,63:65='pop',<0>,320:113].[@-1,67:67='e',<0>,320:117]
2023-09-08 01:11:10:563 action-translator LogManager.java:25 qattr [@-1,71:73='sop',<0>,320:121].[@-1,75:75='e',<0>,320:125]
2023-09-08 01:11:10:564 action-translator LogManager.java:25 translate  $vermct = instructions.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-09-08 01:11:10:564 action-translator LogManager.java:25 attr [@-1,2:7='vermct',<0>,323:46]
2023-09-08 01:11:10:564 action-translator LogManager.java:25 qattr [@-1,46:50='PUNTO',<0>,323:90].[@-1,52:55='line',<0>,323:96]
2023-09-08 01:11:10:564 action-translator LogManager.java:25 qattr [@-1,59:63='PUNTO',<0>,323:103].[@-1,65:67='pos',<0>,323:109]
2023-09-08 01:11:10:564 action-translator LogManager.java:25 qattr [@-1,71:79='ID_VALIDO',<0>,323:115].[@-1,81:84='text',<0>,323:125]
2023-09-08 01:11:10:564 action-translator LogManager.java:25 translate  $vermct = instructions.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)
2023-09-08 01:11:10:564 action-translator LogManager.java:25 attr [@-1,2:7='vermct',<0>,324:60]
2023-09-08 01:11:10:564 action-translator LogManager.java:25 qattr [@-1,45:49='PUNTO',<0>,324:103].[@-1,51:54='line',<0>,324:109]
2023-09-08 01:11:10:564 action-translator LogManager.java:25 qattr [@-1,58:62='PUNTO',<0>,324:116].[@-1,64:66='pos',<0>,324:122]
2023-09-08 01:11:10:564 action-translator LogManager.java:25 qattr [@-1,70:78='ID_VALIDO',<0>,324:128].[@-1,80:83='text',<0>,324:138]
2023-09-08 01:11:10:564 action-translator LogManager.java:25 qattr [@-1,87:90='expr',<0>,324:145].[@-1,92:92='e',<0>,324:150]
2023-09-08 01:11:10:564 action-translator LogManager.java:25 translate  $veemct = instructions.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-09-08 01:11:10:564 action-translator LogManager.java:25 attr [@-1,2:7='veemct',<0>,327:28]
2023-09-08 01:11:10:564 action-translator LogManager.java:25 qattr [@-1,43:47='PUNTO',<0>,327:69].[@-1,49:52='line',<0>,327:75]
2023-09-08 01:11:10:564 action-translator LogManager.java:25 qattr [@-1,56:60='PUNTO',<0>,327:82].[@-1,62:64='pos',<0>,327:88]
2023-09-08 01:11:10:564 action-translator LogManager.java:25 qattr [@-1,68:76='ID_VALIDO',<0>,327:94].[@-1,78:81='text',<0>,327:104]
2023-09-08 01:11:10:564 action-translator LogManager.java:25 translate  $vecnct = instructions.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-09-08 01:11:10:564 action-translator LogManager.java:25 attr [@-1,2:7='vecnct',<0>,330:26]
2023-09-08 01:11:10:564 action-translator LogManager.java:25 qattr [@-1,41:45='PUNTO',<0>,330:65].[@-1,47:50='line',<0>,330:71]
2023-09-08 01:11:10:564 action-translator LogManager.java:25 qattr [@-1,54:58='PUNTO',<0>,330:78].[@-1,60:62='pos',<0>,330:84]
2023-09-08 01:11:10:565 action-translator LogManager.java:25 qattr [@-1,66:74='ID_VALIDO',<0>,330:90].[@-1,76:79='text',<0>,330:100]
2023-09-08 01:11:10:565 action-translator LogManager.java:25 translate  $vepposct = instructions.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) 
2023-09-08 01:11:10:565 action-translator LogManager.java:25 attr [@-1,2:9='vepposct',<0>,334:2]
2023-09-08 01:11:10:565 action-translator LogManager.java:25 qattr [@-1,50:58='ID_VALIDO',<0>,334:50].[@-1,60:63='text',<0>,334:60]
2023-09-08 01:11:10:565 action-translator LogManager.java:25 qattr [@-1,67:69='op1',<0>,334:67].[@-1,71:71='e',<0>,334:71]
2023-09-08 01:11:10:565 action-translator LogManager.java:25 qattr [@-1,75:77='op2',<0>,334:75].[@-1,79:79='e',<0>,334:79]
2023-09-08 01:11:10:565 action-translator LogManager.java:25 qattr [@-1,83:100='listamatrizaddsubs',<0>,334:83].[@-1,102:111='blklimatas',<0>,334:102]
2023-09-08 01:11:10:565 action-translator LogManager.java:25 translate  $vepposct = instructions.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) 
2023-09-08 01:11:10:565 action-translator LogManager.java:25 attr [@-1,2:9='vepposct',<0>,336:2]
2023-09-08 01:11:10:565 action-translator LogManager.java:25 qattr [@-1,46:54='ID_VALIDO',<0>,336:46].[@-1,56:59='text',<0>,336:56]
2023-09-08 01:11:10:565 action-translator LogManager.java:25 qattr [@-1,63:65='op1',<0>,336:63].[@-1,67:67='e',<0>,336:67]
2023-09-08 01:11:10:565 action-translator LogManager.java:25 qattr [@-1,71:73='op2',<0>,336:71].[@-1,75:75='e',<0>,336:75]
2023-09-08 01:11:10:565 action-translator LogManager.java:25 translate  $vepposct = instructions.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)
2023-09-08 01:11:10:565 action-translator LogManager.java:25 attr [@-1,2:9='vepposct',<0>,337:36]
2023-09-08 01:11:10:565 action-translator LogManager.java:25 qattr [@-1,44:51='CORCHDER',<0>,337:78].[@-1,53:56='line',<0>,337:87]
2023-09-08 01:11:10:565 action-translator LogManager.java:25 qattr [@-1,60:67='CORCHDER',<0>,337:94].[@-1,69:71='pos',<0>,337:103]
2023-09-08 01:11:10:565 action-translator LogManager.java:25 qattr [@-1,75:83='ID_VALIDO',<0>,337:109].[@-1,85:88='text',<0>,337:119]
2023-09-08 01:11:10:565 action-translator LogManager.java:25 qattr [@-1,92:95='expr',<0>,337:126].[@-1,97:97='e',<0>,337:131]
2023-09-08 01:11:10:566 action-translator LogManager.java:25 translate 
    if ($DOS_PUNTOS != nil) {
        $matct = instructions.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        $matct = instructions.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }

2023-09-08 01:11:10:566 action-translator LogManager.java:25 attr [@-1,11:20='DOS_PUNTOS',<0>,343:9]
2023-09-08 01:11:10:566 action-translator LogManager.java:25 attr [@-1,42:46='matct',<0>,344:9]
2023-09-08 01:11:10:566 action-translator LogManager.java:25 qattr [@-1,85:87='VAR',<0>,344:52].[@-1,89:92='line',<0>,344:56]
2023-09-08 01:11:10:566 action-translator LogManager.java:25 qattr [@-1,96:98='VAR',<0>,344:63].[@-1,100:102='pos',<0>,344:67]
2023-09-08 01:11:10:566 action-translator LogManager.java:25 qattr [@-1,106:114='ID_VALIDO',<0>,344:73].[@-1,116:119='text',<0>,344:83]
2023-09-08 01:11:10:566 action-translator LogManager.java:25 qattr [@-1,123:132='tipomatriz',<0>,344:90].[@-1,134:140='tipomat',<0>,344:101]
2023-09-08 01:11:10:566 action-translator LogManager.java:25 qattr [@-1,144:152='defmatriz',<0>,344:111].[@-1,154:159='defmat',<0>,344:121]
2023-09-08 01:11:10:566 action-translator LogManager.java:25 attr [@-1,186:190='matct',<0>,346:9]
2023-09-08 01:11:10:566 action-translator LogManager.java:25 qattr [@-1,236:238='VAR',<0>,346:59].[@-1,240:243='line',<0>,346:63]
2023-09-08 01:11:10:566 action-translator LogManager.java:25 qattr [@-1,247:249='VAR',<0>,346:70].[@-1,251:253='pos',<0>,346:74]
2023-09-08 01:11:10:566 action-translator LogManager.java:25 qattr [@-1,257:265='ID_VALIDO',<0>,346:80].[@-1,267:270='text',<0>,346:90]
2023-09-08 01:11:10:566 action-translator LogManager.java:25 qattr [@-1,275:283='defmatriz',<0>,346:98].[@-1,285:290='defmat',<0>,346:108]
2023-09-08 01:11:10:566 action-translator LogManager.java:25 translate  
    $tipomat = instructions.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)

2023-09-08 01:11:10:566 action-translator LogManager.java:25 attr [@-1,8:14='tipomat',<0>,354:5]
2023-09-08 01:11:10:567 action-translator LogManager.java:25 qattr [@-1,51:58='CORCHIZQ',<0>,354:48].[@-1,60:63='line',<0>,354:57]
2023-09-08 01:11:10:567 action-translator LogManager.java:25 qattr [@-1,67:74='CORCHIZQ',<0>,354:64].[@-1,76:78='pos',<0>,354:73]
2023-09-08 01:11:10:567 action-translator LogManager.java:25 qattr [@-1,82:91='tipomatriz',<0>,354:79].[@-1,93:99='tipomat',<0>,354:90]
2023-09-08 01:11:10:567 action-translator LogManager.java:25 translate  
    $tipomat = instructions.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)

2023-09-08 01:11:10:567 action-translator LogManager.java:25 attr [@-1,8:14='tipomat',<0>,358:5]
2023-09-08 01:11:10:567 action-translator LogManager.java:25 qattr [@-1,46:53='CORCHIZQ',<0>,358:43].[@-1,55:58='line',<0>,358:52]
2023-09-08 01:11:10:567 action-translator LogManager.java:25 qattr [@-1,62:69='CORCHIZQ',<0>,358:59].[@-1,71:73='pos',<0>,358:68]
2023-09-08 01:11:10:567 action-translator LogManager.java:25 qattr [@-1,77:84='tipodato',<0>,358:74].[@-1,86:89='tipo',<0>,358:83]
2023-09-08 01:11:10:567 action-translator LogManager.java:25 translate  $defmat = $listavaloresmat.listvlamat
2023-09-08 01:11:10:567 action-translator LogManager.java:25 attr [@-1,2:7='defmat',<0>,363:20]
2023-09-08 01:11:10:567 action-translator LogManager.java:25 qattr [@-1,12:26='listavaloresmat',<0>,363:30].[@-1,28:37='listvlamat',<0>,363:46]
2023-09-08 01:11:10:567 action-translator LogManager.java:25 translate  $listvlamat = $listavaloresmat2.mylisttmatt
2023-09-08 01:11:10:567 action-translator LogManager.java:25 attr [@-1,2:11='listvlamat',<0>,367:39]
2023-09-08 01:11:10:567 action-translator LogManager.java:25 qattr [@-1,16:31='listavaloresmat2',<0>,367:53].[@-1,33:43='mylisttmatt',<0>,367:70]
2023-09-08 01:11:10:567 action-translator LogManager.java:25 translate  $listvlamat = $simplematriz.simmat
2023-09-08 01:11:10:567 action-translator LogManager.java:25 attr [@-1,2:11='listvlamat',<0>,368:17]
2023-09-08 01:11:10:567 action-translator LogManager.java:25 qattr [@-1,16:27='simplematriz',<0>,368:31].[@-1,29:34='simmat',<0>,368:44]
2023-09-08 01:11:10:568 action-translator LogManager.java:25 translate 
2023-09-08 01:11:10:568 action-translator LogManager.java:25 translate  $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)
2023-09-08 01:11:10:568 action-translator LogManager.java:25 attr [@-1,2:12='mylisttmatt',<0>,2:48]
2023-09-08 01:11:10:568 action-translator LogManager.java:25 qattr [@-1,50:64='listavaloresmat',<0>,2:96].[@-1,66:75='listvlamat',<0>,2:112]
2023-09-08 01:11:10:568 action-translator LogManager.java:25 translate  $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)
2023-09-08 01:11:10:568 action-translator LogManager.java:25 attr [@-1,2:12='mylisttmatt',<0>,3:45]
2023-09-08 01:11:10:568 action-translator LogManager.java:25 qattr [@-1,54:68='listaexpresions',<0>,3:97].[@-1,70:76='blkparf',<0>,3:113]
2023-09-08 01:11:10:568 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-08 01:11:10:568 action-translator LogManager.java:25 translate  $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)
2023-09-08 01:11:10:568 action-translator LogManager.java:25 attr [@-1,2:12='mylisttmatt',<0>,6:115]
2023-09-08 01:11:10:568 action-translator LogManager.java:25 qattr [@-1,58:59='op',<0>,6:171].[@-1,61:71='mylisttmatt',<0>,6:174]
2023-09-08 01:11:10:568 action-translator LogManager.java:25 qattr [@-1,75:89='listavaloresmat',<0>,6:188].[@-1,91:100='listvlamat',<0>,6:204]
2023-09-08 01:11:10:568 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-08 01:11:10:568 action-translator LogManager.java:25 translate 
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext

2023-09-08 01:11:10:568 action-translator LogManager.java:25 attr [@-1,7:13='blkparf',<0>,379:5]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 translate 
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }

2023-09-08 01:11:10:569 action-translator LogManager.java:25 attr [@-1,106:112='blkparf',<0>,386:9]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 attr [@-1,124:130='blkparf',<0>,386:27]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 translate 
    $funpar = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)

2023-09-08 01:11:10:569 action-translator LogManager.java:25 attr [@-1,7:12='funpar',<0>,394:5]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 qattr [@-1,51:54='COMA',<0>,394:49].[@-1,56:59='line',<0>,394:54]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 qattr [@-1,63:66='COMA',<0>,394:61].[@-1,68:70='pos',<0>,394:66]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,394:72].[@-1,79:79='e',<0>,394:77]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 translate 
    $funpar = instructions.NewArregloParametro($expr.e)

2023-09-08 01:11:10:569 action-translator LogManager.java:25 attr [@-1,7:12='funpar',<0>,398:5]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,398:48].[@-1,55:55='e',<0>,398:53]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 translate  $simmat = instructions.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)
2023-09-08 01:11:10:569 action-translator LogManager.java:25 attr [@-1,2:7='simmat',<0>,404:2]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 qattr [@-1,44:53='tipomatriz',<0>,404:44].[@-1,55:61='tipomat',<0>,404:55]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 qattr [@-1,65:66='op',<0>,404:65].[@-1,68:73='simmat',<0>,404:68]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 qattr [@-1,77:82='NUMBER',<0>,404:77].[@-1,84:87='text',<0>,404:84]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 qattr [@-1,91:96='NUMBER',<0>,404:91].[@-1,98:101='line',<0>,404:98]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 qattr [@-1,104:109='NUMBER',<0>,404:104].[@-1,111:113='pos',<0>,404:111]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 translate  $simmat = instructions.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)
2023-09-08 01:11:10:569 action-translator LogManager.java:25 attr [@-1,2:7='simmat',<0>,406:2]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 qattr [@-1,44:53='tipomatriz',<0>,406:44].[@-1,55:61='tipomat',<0>,406:55]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,406:65].[@-1,70:70='e',<0>,406:70]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 qattr [@-1,74:79='NUMBER',<0>,406:74].[@-1,81:84='text',<0>,406:81]
2023-09-08 01:11:10:569 action-translator LogManager.java:25 qattr [@-1,88:93='NUMBER',<0>,406:88].[@-1,95:98='line',<0>,406:95]
2023-09-08 01:11:10:571 action-translator LogManager.java:25 qattr [@-1,101:106='NUMBER',<0>,406:101].[@-1,108:110='pos',<0>,406:108]
2023-09-08 01:11:10:571 action-translator LogManager.java:25 translate 
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext

2023-09-08 01:11:10:571 action-translator LogManager.java:25 attr [@-1,7:16='blklimatas',<0>,411:5]
2023-09-08 01:11:10:571 action-translator LogManager.java:25 translate 
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }

2023-09-08 01:11:10:571 action-translator LogManager.java:25 attr [@-1,107:116='blklimatas',<0>,418:9]
2023-09-08 01:11:10:571 action-translator LogManager.java:25 attr [@-1,128:137='blklimatas',<0>,418:30]
2023-09-08 01:11:10:571 action-translator LogManager.java:25 translate 
    $lmas = instructions.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)

2023-09-08 01:11:10:571 action-translator LogManager.java:25 attr [@-1,7:10='lmas',<0>,426:5]
2023-09-08 01:11:10:571 action-translator LogManager.java:25 qattr [@-1,49:56='CORCHIZQ',<0>,426:47].[@-1,58:61='line',<0>,426:56]
2023-09-08 01:11:10:571 action-translator LogManager.java:25 qattr [@-1,65:72='CORCHIZQ',<0>,426:63].[@-1,74:76='pos',<0>,426:72]
2023-09-08 01:11:10:571 action-translator LogManager.java:25 qattr [@-1,80:83='expr',<0>,426:78].[@-1,85:85='e',<0>,426:83]
2023-09-08 01:11:10:571 action-translator LogManager.java:25 translate 
    $struck = instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt);

2023-09-08 01:11:10:571 action-translator LogManager.java:25 setAttr [@-1,7:12='struck',<0>,435:5] [@-1,15:106=' instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt)',<0>,435:13]
2023-09-08 01:11:10:571 action-translator LogManager.java:25 translate  instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt)
2023-09-08 01:11:10:571 action-translator LogManager.java:25 qattr [@-1,25:30='STRUCT',<0>,434:25].[@-1,32:35='line',<0>,434:32]
2023-09-08 01:11:10:571 action-translator LogManager.java:25 qattr [@-1,39:44='STRUCT',<0>,434:39].[@-1,46:48='pos',<0>,434:46]
2023-09-08 01:11:10:571 action-translator LogManager.java:25 qattr [@-1,52:60='ID_VALIDO',<0>,434:52].[@-1,62:65='text',<0>,434:62]
2023-09-08 01:11:10:571 action-translator LogManager.java:25 qattr [@-1,69:82='listaatributos',<0>,434:69].[@-1,84:90='blkstlt',<0>,434:84]
2023-09-08 01:11:10:571 action-translator LogManager.java:25 translate 
    $blkstlt = []interface{}{}
    var listInt []IListaatributoContext

2023-09-08 01:11:10:572 action-translator LogManager.java:25 attr [@-1,7:13='blkstlt',<0>,440:5]
2023-09-08 01:11:10:572 action-translator LogManager.java:25 translate 
    listInt = localctx.(*ListaatributosContext).GetListatstr()
    for _, e := range listInt {
        $blkstlt = append($blkstlt, e.GetListatstr())
    }

2023-09-08 01:11:10:572 action-translator LogManager.java:25 attr [@-1,108:114='blkstlt',<0>,447:9]
2023-09-08 01:11:10:572 action-translator LogManager.java:25 attr [@-1,126:132='blkstlt',<0>,447:27]
2023-09-08 01:11:10:573 action-translator LogManager.java:25 translate 
    if $IG != nil{
        if $tip3.text != "" {
            $listatstr = instructions.NewStructAtributosConTE2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text, $expr.e)
        }else{                        
            $listatstr = instructions.NewStructAtributosConTE($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo, $expr.e)
        }        
    }else{ 
        if $tip3.text != "" {                        
            $listatstr = instructions.NewStructAtributosConT2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text) 
        }else{            
            $listatstr = instructions.NewStructAtributosConT($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo) 
        }
    }

2023-09-08 01:11:10:573 action-translator LogManager.java:25 attr [@-1,10:11='IG',<0>,455:8]
2023-09-08 01:11:10:573 action-translator LogManager.java:25 qattr [@-1,34:37='tip3',<0>,456:12].[@-1,39:42='text',<0>,456:17]
2023-09-08 01:11:10:573 action-translator LogManager.java:25 attr [@-1,66:74='listatstr',<0>,457:13]
2023-09-08 01:11:10:573 action-translator LogManager.java:25 qattr [@-1,117:120='tip1',<0>,457:64].[@-1,122:125='line',<0>,457:69]
2023-09-08 01:11:10:573 action-translator LogManager.java:25 qattr [@-1,129:132='tip1',<0>,457:76].[@-1,134:136='pos',<0>,457:81]
2023-09-08 01:11:10:573 action-translator LogManager.java:25 qattr [@-1,140:143='tip1',<0>,457:87].[@-1,145:148='text',<0>,457:92]
2023-09-08 01:11:10:573 action-translator LogManager.java:25 qattr [@-1,152:155='tip4',<0>,457:99].[@-1,157:160='text',<0>,457:104]
2023-09-08 01:11:10:573 action-translator LogManager.java:25 qattr [@-1,164:167='tip3',<0>,457:111].[@-1,169:172='text',<0>,457:116]
2023-09-08 01:11:10:573 action-translator LogManager.java:25 qattr [@-1,176:179='expr',<0>,457:123].[@-1,181:181='e',<0>,457:128]
2023-09-08 01:11:10:573 action-translator LogManager.java:25 attr [@-1,238:246='listatstr',<0>,459:13]
2023-09-08 01:11:10:574 action-translator LogManager.java:25 qattr [@-1,288:291='tip1',<0>,459:63].[@-1,293:296='line',<0>,459:68]
2023-09-08 01:11:10:574 action-translator LogManager.java:25 qattr [@-1,300:303='tip1',<0>,459:75].[@-1,305:307='pos',<0>,459:80]
2023-09-08 01:11:10:574 action-translator LogManager.java:25 qattr [@-1,311:314='tip1',<0>,459:86].[@-1,316:319='text',<0>,459:91]
2023-09-08 01:11:10:574 action-translator LogManager.java:25 qattr [@-1,323:326='tip4',<0>,459:98].[@-1,328:331='text',<0>,459:103]
2023-09-08 01:11:10:574 action-translator LogManager.java:25 qattr [@-1,335:338='tip2',<0>,459:110].[@-1,340:343='tipo',<0>,459:115]
2023-09-08 01:11:10:574 action-translator LogManager.java:25 qattr [@-1,347:350='expr',<0>,459:122].[@-1,352:352='e',<0>,459:127]
2023-09-08 01:11:10:574 action-translator LogManager.java:25 qattr [@-1,400:403='tip3',<0>,462:12].[@-1,405:408='text',<0>,462:17]
2023-09-08 01:11:10:574 action-translator LogManager.java:25 attr [@-1,456:464='listatstr',<0>,463:13]
2023-09-08 01:11:10:574 action-translator LogManager.java:25 qattr [@-1,506:509='tip1',<0>,463:63].[@-1,511:514='line',<0>,463:68]
2023-09-08 01:11:10:574 action-translator LogManager.java:25 qattr [@-1,518:521='tip1',<0>,463:75].[@-1,523:525='pos',<0>,463:80]
2023-09-08 01:11:10:576 action-translator LogManager.java:25 qattr [@-1,529:532='tip1',<0>,463:86].[@-1,534:537='text',<0>,463:91]
2023-09-08 01:11:10:576 action-translator LogManager.java:25 qattr [@-1,541:544='tip4',<0>,463:98].[@-1,546:549='text',<0>,463:103]
2023-09-08 01:11:10:576 action-translator LogManager.java:25 qattr [@-1,553:556='tip3',<0>,463:110].[@-1,558:561='text',<0>,463:115]
2023-09-08 01:11:10:577 action-translator LogManager.java:25 attr [@-1,607:615='listatstr',<0>,465:13]
2023-09-08 01:11:10:577 action-translator LogManager.java:25 qattr [@-1,656:659='tip1',<0>,465:62].[@-1,661:664='line',<0>,465:67]
2023-09-08 01:11:10:577 action-translator LogManager.java:25 qattr [@-1,668:671='tip1',<0>,465:74].[@-1,673:675='pos',<0>,465:79]
2023-09-08 01:11:10:577 action-translator LogManager.java:25 qattr [@-1,679:682='tip1',<0>,465:85].[@-1,684:687='text',<0>,465:90]
2023-09-08 01:11:10:577 action-translator LogManager.java:25 qattr [@-1,691:694='tip4',<0>,465:97].[@-1,696:699='text',<0>,465:102]
2023-09-08 01:11:10:578 action-translator LogManager.java:25 qattr [@-1,703:706='tip2',<0>,465:109].[@-1,708:711='tipo',<0>,465:114]
2023-09-08 01:11:10:578 action-translator LogManager.java:25 translate 
    if $IG != nil{
        $listatstr = instructions.NewStructAtributosConE($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text, $expr.e)
    }else{
        $listatstr = instructions.NewStructAtributos($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text)
    }

2023-09-08 01:11:10:578 action-translator LogManager.java:25 attr [@-1,10:11='IG',<0>,471:8]
2023-09-08 01:11:10:579 action-translator LogManager.java:25 attr [@-1,31:39='listatstr',<0>,472:9]
2023-09-08 01:11:10:579 action-translator LogManager.java:25 qattr [@-1,80:83='tipo',<0>,472:58].[@-1,85:88='line',<0>,472:63]
2023-09-08 01:11:10:579 action-translator LogManager.java:25 qattr [@-1,92:95='tipo',<0>,472:70].[@-1,97:99='pos',<0>,472:75]
2023-09-08 01:11:10:579 action-translator LogManager.java:25 qattr [@-1,103:106='tipo',<0>,472:81].[@-1,108:111='text',<0>,472:86]
2023-09-08 01:11:10:579 action-translator LogManager.java:25 qattr [@-1,115:123='ID_VALIDO',<0>,472:93].[@-1,125:128='text',<0>,472:103]
2023-09-08 01:11:10:580 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,472:110].[@-1,137:137='e',<0>,472:115]
2023-09-08 01:11:10:580 action-translator LogManager.java:25 attr [@-1,162:170='listatstr',<0>,474:9]
2023-09-08 01:11:10:580 action-translator LogManager.java:25 qattr [@-1,207:210='tipo',<0>,474:54].[@-1,212:215='line',<0>,474:59]
2023-09-08 01:11:10:580 action-translator LogManager.java:25 qattr [@-1,219:222='tipo',<0>,474:66].[@-1,224:226='pos',<0>,474:71]
2023-09-08 01:11:10:580 action-translator LogManager.java:25 qattr [@-1,230:233='tipo',<0>,474:77].[@-1,235:238='text',<0>,474:82]
2023-09-08 01:11:10:580 action-translator LogManager.java:25 qattr [@-1,242:250='ID_VALIDO',<0>,474:89].[@-1,252:255='text',<0>,474:99]
2023-09-08 01:11:10:581 action-translator LogManager.java:25 translate 
    if $MUTATING != nil{
        $listatstr = instructions.NewStruckFunctionMutating($funciondeclaracioncontrol.fdc)
    } else {
        $listatstr = instructions.NewStruckFunction($funciondeclaracioncontrol.fdc)
    }

2023-09-08 01:11:10:581 action-translator LogManager.java:25 attr [@-1,10:17='MUTATING',<0>,479:8]
2023-09-08 01:11:10:581 action-translator LogManager.java:25 attr [@-1,37:45='listatstr',<0>,480:9]
2023-09-08 01:11:10:581 action-translator LogManager.java:25 qattr [@-1,89:113='funciondeclaracioncontrol',<0>,480:61].[@-1,115:117='fdc',<0>,480:87]
2023-09-08 01:11:10:581 action-translator LogManager.java:25 attr [@-1,144:152='listatstr',<0>,482:9]
2023-09-08 01:11:10:582 action-translator LogManager.java:25 qattr [@-1,188:212='funciondeclaracioncontrol',<0>,482:53].[@-1,214:216='fdc',<0>,482:79]
2023-09-08 01:11:10:582 action-translator LogManager.java:25 translate 
    $strexpr = instructions.NewStruckVariable($op1.line, $op1.pos, $op.text, $op1.text, $op2.text, $ldupla.lduplist, true)

2023-09-08 01:11:10:582 action-translator LogManager.java:25 attr [@-1,7:13='strexpr',<0>,491:5]
2023-09-08 01:11:10:583 action-translator LogManager.java:25 qattr [@-1,49:51='op1',<0>,491:47].[@-1,53:56='line',<0>,491:51]
2023-09-08 01:11:10:583 action-translator LogManager.java:25 qattr [@-1,60:62='op1',<0>,491:58].[@-1,64:66='pos',<0>,491:62]
2023-09-08 01:11:10:583 action-translator LogManager.java:25 qattr [@-1,70:71='op',<0>,491:68].[@-1,73:76='text',<0>,491:71]
2023-09-08 01:11:10:584 action-translator LogManager.java:25 qattr [@-1,80:82='op1',<0>,491:78].[@-1,84:87='text',<0>,491:82]
2023-09-08 01:11:10:584 action-translator LogManager.java:25 qattr [@-1,91:93='op2',<0>,491:89].[@-1,95:98='text',<0>,491:93]
2023-09-08 01:11:10:584 action-translator LogManager.java:25 qattr [@-1,102:107='ldupla',<0>,491:100].[@-1,109:116='lduplist',<0>,491:107]
2023-09-08 01:11:10:585 action-translator LogManager.java:25 translate  
    $lduplist = instructions.NewStructListDuple($ID_VALIDO.text, $expr.e, $op.lduplist, true)

2023-09-08 01:11:10:585 action-translator LogManager.java:25 attr [@-1,8:15='lduplist',<0>,498:5]
2023-09-08 01:11:10:585 action-translator LogManager.java:25 qattr [@-1,52:60='ID_VALIDO',<0>,498:49].[@-1,62:65='text',<0>,498:59]
2023-09-08 01:11:10:585 action-translator LogManager.java:25 qattr [@-1,69:72='expr',<0>,498:66].[@-1,74:74='e',<0>,498:71]
2023-09-08 01:11:10:585 action-translator LogManager.java:25 qattr [@-1,78:79='op',<0>,498:75].[@-1,81:88='lduplist',<0>,498:78]
2023-09-08 01:11:10:585 action-translator LogManager.java:25 translate 
    $lduplist = instructions.NewStructDuple($ID_VALIDO.text, $expr.e, false)  

2023-09-08 01:11:10:586 action-translator LogManager.java:25 attr [@-1,7:14='lduplist',<0>,502:5]
2023-09-08 01:11:10:586 action-translator LogManager.java:25 qattr [@-1,47:55='ID_VALIDO',<0>,502:45].[@-1,57:60='text',<0>,502:55]
2023-09-08 01:11:10:586 action-translator LogManager.java:25 qattr [@-1,64:67='expr',<0>,502:62].[@-1,69:69='e',<0>,502:67]
2023-09-08 01:11:10:586 action-translator LogManager.java:25 translate 
    $llmstru = instructions.NewStruckLlamadaExp($op.line, $op.pos, $op.text, $op1.text)

2023-09-08 01:11:10:588 action-translator LogManager.java:25 attr [@-1,7:13='llmstru',<0>,510:5]
2023-09-08 01:11:10:588 action-translator LogManager.java:25 qattr [@-1,51:52='op',<0>,510:49].[@-1,54:57='line',<0>,510:52]
2023-09-08 01:11:10:588 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,510:59].[@-1,64:66='pos',<0>,510:62]
2023-09-08 01:11:10:588 action-translator LogManager.java:25 qattr [@-1,70:71='op',<0>,510:68].[@-1,73:76='text',<0>,510:71]
2023-09-08 01:11:10:588 action-translator LogManager.java:25 qattr [@-1,80:82='op1',<0>,510:78].[@-1,84:87='text',<0>,510:82]
2023-09-08 01:11:10:589 action-translator LogManager.java:25 translate 
    //$llmstruasig = instructions.NewStrucAsigna($op.line, $op.pos, $op.text, $op1.text, $expr.e)

2023-09-08 01:11:10:589 action-translator LogManager.java:25 attr [@-1,9:19='llmstruasig',<0>,517:7]
2023-09-08 01:11:10:589 action-translator LogManager.java:25 qattr [@-1,52:53='op',<0>,517:50].[@-1,55:58='line',<0>,517:53]
2023-09-08 01:11:10:589 action-translator LogManager.java:25 qattr [@-1,62:63='op',<0>,517:60].[@-1,65:67='pos',<0>,517:63]
2023-09-08 01:11:10:589 action-translator LogManager.java:25 qattr [@-1,71:72='op',<0>,517:69].[@-1,74:77='text',<0>,517:72]
2023-09-08 01:11:10:590 action-translator LogManager.java:25 qattr [@-1,81:83='op1',<0>,517:79].[@-1,85:88='text',<0>,517:83]
2023-09-08 01:11:10:590 action-translator LogManager.java:25 qattr [@-1,92:95='expr',<0>,517:90].[@-1,97:97='e',<0>,517:95]
2023-09-08 01:11:10:590 action-translator LogManager.java:25 translate 
    //$llmstrufun = instructions.NewStruckLlamadaFun($op.line, $op.pos, $op.text, $op1.text)

2023-09-08 01:11:10:590 action-translator LogManager.java:25 attr [@-1,9:18='llmstrufun',<0>,524:7]
2023-09-08 01:11:10:590 action-translator LogManager.java:25 qattr [@-1,56:57='op',<0>,524:54].[@-1,59:62='line',<0>,524:57]
2023-09-08 01:11:10:591 action-translator LogManager.java:25 qattr [@-1,66:67='op',<0>,524:64].[@-1,69:71='pos',<0>,524:67]
2023-09-08 01:11:10:591 action-translator LogManager.java:25 qattr [@-1,75:76='op',<0>,524:73].[@-1,78:81='text',<0>,524:76]
2023-09-08 01:11:10:591 action-translator LogManager.java:25 qattr [@-1,85:87='op1',<0>,524:83].[@-1,89:92='text',<0>,524:87]
2023-09-08 01:11:10:592 action-translator LogManager.java:25 translate 
    $fdc = instructions.NewFuncionesDeclaracionRP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $tipodato.tipo, $blockinterno.blkint)

2023-09-08 01:11:10:592 action-translator LogManager.java:25 attr [@-1,7:9='fdc',<0>,532:5]
2023-09-08 01:11:10:592 action-translator LogManager.java:25 qattr [@-1,53:61='ID_VALIDO',<0>,532:51].[@-1,63:66='line',<0>,532:61]
2023-09-08 01:11:10:592 action-translator LogManager.java:25 qattr [@-1,70:78='ID_VALIDO',<0>,532:68].[@-1,80:82='pos',<0>,532:78]
2023-09-08 01:11:10:593 action-translator LogManager.java:25 qattr [@-1,86:94='ID_VALIDO',<0>,532:84].[@-1,96:99='text',<0>,532:94]
2023-09-08 01:11:10:593 action-translator LogManager.java:25 qattr [@-1,103:116='listaparametro',<0>,532:101].[@-1,118:127='listparfun',<0>,532:116]
2023-09-08 01:11:10:593 action-translator LogManager.java:25 qattr [@-1,131:138='tipodato',<0>,532:129].[@-1,140:143='tipo',<0>,532:138]
2023-09-08 01:11:10:594 action-translator LogManager.java:25 qattr [@-1,147:158='blockinterno',<0>,532:145].[@-1,160:165='blkint',<0>,532:158]
2023-09-08 01:11:10:594 action-translator LogManager.java:25 translate 
    $fdc = instructions.NewFuncionesDeclaracionR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $blockinterno.blkint)

2023-09-08 01:11:10:594 action-translator LogManager.java:25 attr [@-1,7:9='fdc',<0>,536:5]
2023-09-08 01:11:10:595 action-translator LogManager.java:25 qattr [@-1,52:60='ID_VALIDO',<0>,536:50].[@-1,62:65='line',<0>,536:60]
2023-09-08 01:11:10:595 action-translator LogManager.java:25 qattr [@-1,69:77='ID_VALIDO',<0>,536:67].[@-1,79:81='pos',<0>,536:77]
2023-09-08 01:11:10:595 action-translator LogManager.java:25 qattr [@-1,85:93='ID_VALIDO',<0>,536:83].[@-1,95:98='text',<0>,536:93]
2023-09-08 01:11:10:595 action-translator LogManager.java:25 qattr [@-1,102:109='tipodato',<0>,536:100].[@-1,111:114='tipo',<0>,536:109]
2023-09-08 01:11:10:595 action-translator LogManager.java:25 qattr [@-1,118:129='blockinterno',<0>,536:116].[@-1,131:136='blkint',<0>,536:129]
2023-09-08 01:11:10:596 action-translator LogManager.java:25 translate 
   $fdc = instructions.NewFuncionesDeclaracionP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $blockinterno.blkint)

2023-09-08 01:11:10:596 action-translator LogManager.java:25 attr [@-1,6:8='fdc',<0>,540:4]
2023-09-08 01:11:10:596 action-translator LogManager.java:25 qattr [@-1,51:59='ID_VALIDO',<0>,540:49].[@-1,61:64='line',<0>,540:59]
2023-09-08 01:11:10:596 action-translator LogManager.java:25 qattr [@-1,68:76='ID_VALIDO',<0>,540:66].[@-1,78:80='pos',<0>,540:76]
2023-09-08 01:11:10:598 action-translator LogManager.java:25 qattr [@-1,84:92='ID_VALIDO',<0>,540:82].[@-1,94:97='text',<0>,540:92]
2023-09-08 01:11:10:598 action-translator LogManager.java:25 qattr [@-1,101:114='listaparametro',<0>,540:99].[@-1,116:125='listparfun',<0>,540:114]
2023-09-08 01:11:10:599 action-translator LogManager.java:25 qattr [@-1,129:140='blockinterno',<0>,540:127].[@-1,142:147='blkint',<0>,540:140]
2023-09-08 01:11:10:599 action-translator LogManager.java:25 translate 
    $fdc = instructions.NewFuncionesDeclaracion($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $blockinterno.blkint)

2023-09-08 01:11:10:599 action-translator LogManager.java:25 attr [@-1,7:9='fdc',<0>,544:5]
2023-09-08 01:11:10:600 action-translator LogManager.java:25 qattr [@-1,51:59='ID_VALIDO',<0>,544:49].[@-1,61:64='line',<0>,544:59]
2023-09-08 01:11:10:600 action-translator LogManager.java:25 qattr [@-1,68:76='ID_VALIDO',<0>,544:66].[@-1,78:80='pos',<0>,544:76]
2023-09-08 01:11:10:600 action-translator LogManager.java:25 qattr [@-1,84:92='ID_VALIDO',<0>,544:82].[@-1,94:97='text',<0>,544:92]
2023-09-08 01:11:10:601 action-translator LogManager.java:25 qattr [@-1,101:112='blockinterno',<0>,544:99].[@-1,114:119='blkint',<0>,544:112]
2023-09-08 01:11:10:602 action-translator LogManager.java:25 translate 
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true, true, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true, $op3.listparfun )
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false,$op3.listparfun )
        } 
    }      

2023-09-08 01:11:10:602 action-translator LogManager.java:25 attr [@-1,10:11='op',<0>,551:8]
2023-09-08 01:11:10:603 action-translator LogManager.java:25 attr [@-1,34:38='INOUT',<0>,552:12]
2023-09-08 01:11:10:603 action-translator LogManager.java:25 attr [@-1,62:71='listparfun',<0>,553:13]
2023-09-08 01:11:10:603 action-translator LogManager.java:25 qattr [@-1,116:118='op2',<0>,553:67].[@-1,120:123='line',<0>,553:71]
2023-09-08 01:11:10:604 action-translator LogManager.java:25 qattr [@-1,127:129='op2',<0>,553:78].[@-1,131:133='pos',<0>,553:82]
2023-09-08 01:11:10:604 action-translator LogManager.java:25 qattr [@-1,137:138='op',<0>,553:88].[@-1,140:143='text',<0>,553:91]
2023-09-08 01:11:10:604 action-translator LogManager.java:25 qattr [@-1,147:149='op2',<0>,553:98].[@-1,151:154='text',<0>,553:102]
2023-09-08 01:11:10:604 action-translator LogManager.java:25 qattr [@-1,158:165='tipodato',<0>,553:109].[@-1,167:170='tipo',<0>,553:118]
2023-09-08 01:11:10:605 action-translator LogManager.java:25 qattr [@-1,186:188='op3',<0>,553:137].[@-1,190:199='listparfun',<0>,553:141]
2023-09-08 01:11:10:605 action-translator LogManager.java:25 attr [@-1,234:243='listparfun',<0>,555:13]
2023-09-08 01:11:10:605 action-translator LogManager.java:25 qattr [@-1,288:290='op2',<0>,555:67].[@-1,292:295='line',<0>,555:71]
2023-09-08 01:11:10:605 action-translator LogManager.java:25 qattr [@-1,299:301='op2',<0>,555:78].[@-1,303:305='pos',<0>,555:82]
2023-09-08 01:11:10:605 action-translator LogManager.java:25 qattr [@-1,309:310='op',<0>,555:88].[@-1,312:315='text',<0>,555:91]
2023-09-08 01:11:10:606 action-translator LogManager.java:25 qattr [@-1,319:321='op2',<0>,555:98].[@-1,323:326='text',<0>,555:102]
2023-09-08 01:11:10:606 action-translator LogManager.java:25 qattr [@-1,330:337='tipodato',<0>,555:109].[@-1,339:342='tipo',<0>,555:118]
2023-09-08 01:11:10:606 action-translator LogManager.java:25 qattr [@-1,359:361='op3',<0>,555:138].[@-1,363:372='listparfun',<0>,555:142]
2023-09-08 01:11:10:606 action-translator LogManager.java:25 attr [@-1,413:417='INOUT',<0>,558:12]
2023-09-08 01:11:10:606 action-translator LogManager.java:25 attr [@-1,441:450='listparfun',<0>,559:13]
2023-09-08 01:11:10:608 action-translator LogManager.java:25 qattr [@-1,495:497='op2',<0>,559:67].[@-1,499:502='line',<0>,559:71]
2023-09-08 01:11:10:608 action-translator LogManager.java:25 qattr [@-1,506:508='op2',<0>,559:78].[@-1,510:512='pos',<0>,559:82]
2023-09-08 01:11:10:608 action-translator LogManager.java:25 qattr [@-1,520:522='op2',<0>,559:92].[@-1,524:527='text',<0>,559:96]
2023-09-08 01:11:10:608 action-translator LogManager.java:25 qattr [@-1,531:538='tipodato',<0>,559:103].[@-1,540:543='tipo',<0>,559:112]
2023-09-08 01:11:10:609 action-translator LogManager.java:25 qattr [@-1,560:562='op3',<0>,559:132].[@-1,564:573='listparfun',<0>,559:136]
2023-09-08 01:11:10:609 action-translator LogManager.java:25 attr [@-1,608:617='listparfun',<0>,561:13]
2023-09-08 01:11:10:609 action-translator LogManager.java:25 qattr [@-1,662:664='op2',<0>,561:67].[@-1,666:669='line',<0>,561:71]
2023-09-08 01:11:10:609 action-translator LogManager.java:25 qattr [@-1,673:675='op2',<0>,561:78].[@-1,677:679='pos',<0>,561:82]
2023-09-08 01:11:10:610 action-translator LogManager.java:25 qattr [@-1,687:689='op2',<0>,561:92].[@-1,691:694='text',<0>,561:96]
2023-09-08 01:11:10:610 action-translator LogManager.java:25 qattr [@-1,698:705='tipodato',<0>,561:103].[@-1,707:710='tipo',<0>,561:112]
2023-09-08 01:11:10:610 action-translator LogManager.java:25 qattr [@-1,727:729='op3',<0>,561:132].[@-1,731:740='listparfun',<0>,561:136]
2023-09-08 01:11:10:611 action-translator LogManager.java:25 translate 
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true , true)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true)
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false)
    } 
    }
    

2023-09-08 01:11:10:611 action-translator LogManager.java:25 attr [@-1,10:11='op',<0>,567:8]
2023-09-08 01:11:10:611 action-translator LogManager.java:25 attr [@-1,34:38='INOUT',<0>,568:12]
2023-09-08 01:11:10:611 action-translator LogManager.java:25 attr [@-1,62:71='listparfun',<0>,569:13]
2023-09-08 01:11:10:611 action-translator LogManager.java:25 qattr [@-1,111:113='op2',<0>,569:62].[@-1,115:118='line',<0>,569:66]
2023-09-08 01:11:10:611 action-translator LogManager.java:25 qattr [@-1,122:124='op2',<0>,569:73].[@-1,126:128='pos',<0>,569:77]
2023-09-08 01:11:10:611 action-translator LogManager.java:25 qattr [@-1,132:133='op',<0>,569:83].[@-1,135:138='text',<0>,569:86]
2023-09-08 01:11:10:611 action-translator LogManager.java:25 qattr [@-1,142:144='op2',<0>,569:93].[@-1,146:149='text',<0>,569:97]
2023-09-08 01:11:10:612 action-translator LogManager.java:25 qattr [@-1,153:160='tipodato',<0>,569:104].[@-1,162:165='tipo',<0>,569:113]
2023-09-08 01:11:10:612 action-translator LogManager.java:25 attr [@-1,212:221='listparfun',<0>,571:13]
2023-09-08 01:11:10:612 action-translator LogManager.java:25 qattr [@-1,261:263='op2',<0>,571:62].[@-1,265:268='line',<0>,571:66]
2023-09-08 01:11:10:612 action-translator LogManager.java:25 qattr [@-1,272:274='op2',<0>,571:73].[@-1,276:278='pos',<0>,571:77]
2023-09-08 01:11:10:612 action-translator LogManager.java:25 qattr [@-1,282:283='op',<0>,571:83].[@-1,285:288='text',<0>,571:86]
2023-09-08 01:11:10:612 action-translator LogManager.java:25 qattr [@-1,292:294='op2',<0>,571:93].[@-1,296:299='text',<0>,571:97]
2023-09-08 01:11:10:612 action-translator LogManager.java:25 qattr [@-1,303:310='tipodato',<0>,571:104].[@-1,312:315='tipo',<0>,571:113]
2023-09-08 01:11:10:613 action-translator LogManager.java:25 attr [@-1,368:372='INOUT',<0>,574:12]
2023-09-08 01:11:10:613 action-translator LogManager.java:25 attr [@-1,396:405='listparfun',<0>,575:13]
2023-09-08 01:11:10:613 action-translator LogManager.java:25 qattr [@-1,445:447='op2',<0>,575:62].[@-1,449:452='line',<0>,575:66]
2023-09-08 01:11:10:613 action-translator LogManager.java:25 qattr [@-1,456:458='op2',<0>,575:73].[@-1,460:462='pos',<0>,575:77]
2023-09-08 01:11:10:613 action-translator LogManager.java:25 qattr [@-1,470:472='op2',<0>,575:87].[@-1,474:477='text',<0>,575:91]
2023-09-08 01:11:10:613 action-translator LogManager.java:25 qattr [@-1,481:488='tipodato',<0>,575:98].[@-1,490:493='tipo',<0>,575:107]
2023-09-08 01:11:10:613 action-translator LogManager.java:25 attr [@-1,540:549='listparfun',<0>,577:13]
2023-09-08 01:11:10:613 action-translator LogManager.java:25 qattr [@-1,589:591='op2',<0>,577:62].[@-1,593:596='line',<0>,577:66]
2023-09-08 01:11:10:613 action-translator LogManager.java:25 qattr [@-1,600:602='op2',<0>,577:73].[@-1,604:606='pos',<0>,577:77]
2023-09-08 01:11:10:613 action-translator LogManager.java:25 qattr [@-1,614:616='op2',<0>,577:87].[@-1,618:621='text',<0>,577:91]
2023-09-08 01:11:10:613 action-translator LogManager.java:25 qattr [@-1,625:632='tipodato',<0>,577:98].[@-1,634:637='tipo',<0>,577:107]
2023-09-08 01:11:10:614 action-translator LogManager.java:25 translate 
    $flctl = instructions.NewFuncionesControlP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametrosllamada.lpll)

2023-09-08 01:11:10:614 action-translator LogManager.java:25 attr [@-1,7:11='flctl',<0>,586:5]
2023-09-08 01:11:10:614 action-translator LogManager.java:25 qattr [@-1,50:58='ID_VALIDO',<0>,586:48].[@-1,60:63='line',<0>,586:58]
2023-09-08 01:11:10:614 action-translator LogManager.java:25 qattr [@-1,67:75='ID_VALIDO',<0>,586:65].[@-1,77:79='pos',<0>,586:75]
2023-09-08 01:11:10:614 action-translator LogManager.java:25 qattr [@-1,83:91='ID_VALIDO',<0>,586:81].[@-1,93:96='text',<0>,586:91]
2023-09-08 01:11:10:614 action-translator LogManager.java:25 qattr [@-1,100:121='listaparametrosllamada',<0>,586:98].[@-1,123:126='lpll',<0>,586:121]
2023-09-08 01:11:10:614 action-translator LogManager.java:25 translate 
    $flctl = instructions.NewFuncionesControl($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )

2023-09-08 01:11:10:614 action-translator LogManager.java:25 attr [@-1,7:11='flctl',<0>,590:5]
2023-09-08 01:11:10:614 action-translator LogManager.java:25 qattr [@-1,49:57='ID_VALIDO',<0>,590:47].[@-1,59:62='line',<0>,590:57]
2023-09-08 01:11:10:615 action-translator LogManager.java:25 qattr [@-1,66:74='ID_VALIDO',<0>,590:64].[@-1,76:78='pos',<0>,590:74]
2023-09-08 01:11:10:615 action-translator LogManager.java:25 qattr [@-1,82:90='ID_VALIDO',<0>,590:80].[@-1,92:95='text',<0>,590:90]
2023-09-08 01:11:10:615 action-translator LogManager.java:25 translate 
    $flctlret = instructions.NewFuncionesControlPR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametrosllamada.lpll)

2023-09-08 01:11:10:615 action-translator LogManager.java:25 attr [@-1,7:14='flctlret',<0>,596:5]
2023-09-08 01:11:10:615 action-translator LogManager.java:25 qattr [@-1,54:62='ID_VALIDO',<0>,596:52].[@-1,64:67='line',<0>,596:62]
2023-09-08 01:11:10:616 action-translator LogManager.java:25 qattr [@-1,71:79='ID_VALIDO',<0>,596:69].[@-1,81:83='pos',<0>,596:79]
2023-09-08 01:11:10:616 action-translator LogManager.java:25 qattr [@-1,87:95='ID_VALIDO',<0>,596:85].[@-1,97:100='text',<0>,596:95]
2023-09-08 01:11:10:616 action-translator LogManager.java:25 qattr [@-1,104:125='listaparametrosllamada',<0>,596:102].[@-1,127:130='lpll',<0>,596:125]
2023-09-08 01:11:10:616 action-translator LogManager.java:25 translate 
    $flctlret = instructions.NewFuncionesControlR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )

2023-09-08 01:11:10:616 action-translator LogManager.java:25 attr [@-1,7:14='flctlret',<0>,600:5]
2023-09-08 01:11:10:616 action-translator LogManager.java:25 qattr [@-1,53:61='ID_VALIDO',<0>,600:51].[@-1,63:66='line',<0>,600:61]
2023-09-08 01:11:10:616 action-translator LogManager.java:25 qattr [@-1,70:78='ID_VALIDO',<0>,600:68].[@-1,80:82='pos',<0>,600:78]
2023-09-08 01:11:10:616 action-translator LogManager.java:25 qattr [@-1,86:94='ID_VALIDO',<0>,600:84].[@-1,96:99='text',<0>,600:94]
2023-09-08 01:11:10:617 action-translator LogManager.java:25 translate 
    $lpll = instructions.NewFuncionesLlamadaList1($DIRME.line, $DIRME.pos, $ID_VALIDO.text, $op2.lpll)    

2023-09-08 01:11:10:617 action-translator LogManager.java:25 attr [@-1,7:10='lpll',<0>,606:5]
2023-09-08 01:11:10:617 action-translator LogManager.java:25 qattr [@-1,53:57='DIRME',<0>,606:51].[@-1,59:62='line',<0>,606:57]
2023-09-08 01:11:10:617 action-translator LogManager.java:25 qattr [@-1,66:70='DIRME',<0>,606:64].[@-1,72:74='pos',<0>,606:70]
2023-09-08 01:11:10:619 action-translator LogManager.java:25 qattr [@-1,78:86='ID_VALIDO',<0>,606:76].[@-1,88:91='text',<0>,606:86]
2023-09-08 01:11:10:619 action-translator LogManager.java:25 qattr [@-1,95:97='op2',<0>,606:93].[@-1,99:102='lpll',<0>,606:97]
2023-09-08 01:11:10:619 action-translator LogManager.java:25 translate 
    $lpll = instructions.NewFuncionesLlamadaList2($DIRME.line, $DIRME.pos, $ID_VALIDO.text)    

2023-09-08 01:11:10:619 action-translator LogManager.java:25 attr [@-1,7:10='lpll',<0>,610:5]
2023-09-08 01:11:10:619 action-translator LogManager.java:25 qattr [@-1,53:57='DIRME',<0>,610:51].[@-1,59:62='line',<0>,610:57]
2023-09-08 01:11:10:619 action-translator LogManager.java:25 qattr [@-1,66:70='DIRME',<0>,610:64].[@-1,72:74='pos',<0>,610:70]
2023-09-08 01:11:10:619 action-translator LogManager.java:25 qattr [@-1,78:86='ID_VALIDO',<0>,610:76].[@-1,88:91='text',<0>,610:86]
2023-09-08 01:11:10:620 action-translator LogManager.java:25 translate 
    if $op != nil{
        $lpll = instructions.NewFuncionesLlamadaList3($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e, $op2.lpll)
    }else{
        $lpll = instructions.NewFuncionesLlamadaList4($COMA.line, $COMA.pos, $expr.e, $op2.lpll)
    }

2023-09-08 01:11:10:620 action-translator LogManager.java:25 attr [@-1,10:11='op',<0>,614:8]
2023-09-08 01:11:10:620 action-translator LogManager.java:25 attr [@-1,31:34='lpll',<0>,615:9]
2023-09-08 01:11:10:620 action-translator LogManager.java:25 qattr [@-1,77:85='ID_VALIDO',<0>,615:55].[@-1,87:90='line',<0>,615:65]
2023-09-08 01:11:10:620 action-translator LogManager.java:25 qattr [@-1,94:102='ID_VALIDO',<0>,615:72].[@-1,104:106='pos',<0>,615:82]
2023-09-08 01:11:10:620 action-translator LogManager.java:25 qattr [@-1,110:118='ID_VALIDO',<0>,615:88].[@-1,120:123='text',<0>,615:98]
2023-09-08 01:11:10:620 action-translator LogManager.java:25 qattr [@-1,127:130='expr',<0>,615:105].[@-1,132:132='e',<0>,615:110]
2023-09-08 01:11:10:620 action-translator LogManager.java:25 qattr [@-1,136:138='op2',<0>,615:114].[@-1,140:143='lpll',<0>,615:118]
2023-09-08 01:11:10:620 action-translator LogManager.java:25 attr [@-1,168:171='lpll',<0>,617:9]
2023-09-08 01:11:10:620 action-translator LogManager.java:25 qattr [@-1,214:217='COMA',<0>,617:55].[@-1,219:222='line',<0>,617:60]
2023-09-08 01:11:10:620 action-translator LogManager.java:25 qattr [@-1,226:229='COMA',<0>,617:67].[@-1,231:233='pos',<0>,617:72]
2023-09-08 01:11:10:620 action-translator LogManager.java:25 qattr [@-1,237:240='expr',<0>,617:78].[@-1,242:242='e',<0>,617:83]
2023-09-08 01:11:10:620 action-translator LogManager.java:25 qattr [@-1,246:248='op2',<0>,617:87].[@-1,250:253='lpll',<0>,617:91]
2023-09-08 01:11:10:620 action-translator LogManager.java:25 translate 
    if $op != nil{
        $lpll = instructions.NewFuncionesLlamadaList5($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
    }else{
        $lpll = instructions.NewFuncionesLlamadaList6($expr.e)
    }     

2023-09-08 01:11:10:620 action-translator LogManager.java:25 attr [@-1,10:11='op',<0>,622:8]
2023-09-08 01:11:10:620 action-translator LogManager.java:25 attr [@-1,31:34='lpll',<0>,623:9]
2023-09-08 01:11:10:620 action-translator LogManager.java:25 qattr [@-1,77:85='ID_VALIDO',<0>,623:55].[@-1,87:90='line',<0>,623:65]
2023-09-08 01:11:10:620 action-translator LogManager.java:25 qattr [@-1,94:102='ID_VALIDO',<0>,623:72].[@-1,104:106='pos',<0>,623:82]
2023-09-08 01:11:10:621 action-translator LogManager.java:25 qattr [@-1,110:118='ID_VALIDO',<0>,623:88].[@-1,120:123='text',<0>,623:98]
2023-09-08 01:11:10:621 action-translator LogManager.java:25 qattr [@-1,127:130='expr',<0>,623:105].[@-1,132:132='e',<0>,623:110]
2023-09-08 01:11:10:621 action-translator LogManager.java:25 attr [@-1,157:160='lpll',<0>,625:9]
2023-09-08 01:11:10:621 action-translator LogManager.java:25 qattr [@-1,203:206='expr',<0>,625:55].[@-1,208:208='e',<0>,625:60]
2023-09-08 01:11:10:621 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listaexpresions.blkparf)
2023-09-08 01:11:10:621 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,635:40]
2023-09-08 01:11:10:621 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,635:70].[@-1,38:41='line',<0>,635:76]
2023-09-08 01:11:10:621 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,635:82].[@-1,50:52='pos',<0>,635:88]
2023-09-08 01:11:10:621 action-translator LogManager.java:25 qattr [@-1,55:69='listaexpresions',<0>,635:93].[@-1,71:77='blkparf',<0>,635:109]
2023-09-08 01:11:10:621 action-translator LogManager.java:25 translate  $intemb = instructions.NewFuncionIntEmbebida($expr.e)
2023-09-08 01:11:10:621 action-translator LogManager.java:25 attr [@-1,2:7='intemb',<0>,638:27]
2023-09-08 01:11:10:621 action-translator LogManager.java:25 qattr [@-1,47:50='expr',<0>,638:72].[@-1,52:52='e',<0>,638:77]
2023-09-08 01:11:10:621 action-translator LogManager.java:25 translate  $floemb = instructions.NewFuncionFloatEmbebida($expr.e)
2023-09-08 01:11:10:621 action-translator LogManager.java:25 attr [@-1,2:7='floemb',<0>,641:29]
2023-09-08 01:11:10:621 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,641:76].[@-1,54:54='e',<0>,641:81]
2023-09-08 01:11:10:621 action-translator LogManager.java:25 translate  $stremb = instructions.NewFuncionStringEmbebida($expr.e)
2023-09-08 01:11:10:621 action-translator LogManager.java:25 attr [@-1,2:7='stremb',<0>,644:30]
2023-09-08 01:11:10:621 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,644:78].[@-1,55:55='e',<0>,644:83]
2023-09-08 01:11:10:947 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-09-08 01:11:10:947 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-09-08 01:11:11:014 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-09-08 01:11:11:014 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

