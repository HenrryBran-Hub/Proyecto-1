2023-08-29 10:57:08:973 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACT (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NULO (BLOCK (ALT 'nil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGO (BLOCK (ALT '...'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNCION (BLOCK (ALT 'func'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE CADENA (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (RULE ID_VALIDO (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CHARACTER (BLOCK (ALT '\'' (BLOCK (ALT ESCAPE) (ALT (~ (SET ['\\\r\n])))) '\''))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [\\'tnr]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IG (BLOCK (ALT '='))) (RULE DOS_PUNTOS (BLOCK (ALT ':'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE CIERRE_INTE (BLOCK (ALT '?'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE SUMA (BLOCK (ALT '+='))) (RULE RESTA (BLOCK (ALT '-='))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE RETORNO (BLOCK (ALT '->'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-29 10:57:08:973 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACT (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NULO (BLOCK (ALT 'nil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGO (BLOCK (ALT '...'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNCION (BLOCK (ALT 'func'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE CADENA (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (RULE ID_VALIDO (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CHARACTER (BLOCK (ALT '\'' (BLOCK (ALT ESCAPE) (ALT (~ (SET ['\\\r\n])))) '\''))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [\\'tnr]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IG (BLOCK (ALT '='))) (RULE DOS_PUNTOS (BLOCK (ALT ':'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE CIERRE_INTE (BLOCK (ALT '?'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE SUMA (BLOCK (ALT '+='))) (RULE RESTA (BLOCK (ALT '-='))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE RETORNO (BLOCK (ALT '->'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-29 10:57:09:284 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr {$decvbl = instructions.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = instructions.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = instructions.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = instructions.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = instructions.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = instructions.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = instructions.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = instructions.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}) (ALT stringembebida { $e = $stringembebida.stremb}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = instructions.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = instructions.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = instructions.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = instructions.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = instructions.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=instructions.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = instructions.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = instructions.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = instructions.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = instructions.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN {
    $rect = instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}) (ALT RETURN (= op expr) {
    $rect = instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = instructions.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = instructions.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = instructions.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = instructions.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = instructions.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = instructions.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = instructions.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = instructions.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = instructions.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = instructions.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = instructions.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = instructions.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE funciondeclaracioncontrol (BLOCK (ALT FUNCION ID_VALIDO PARIZQ (? (BLOCK (ALT listaparametros))) PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {}) (ALT FUNCION ID_VALIDO PARIZQ (? (BLOCK (ALT listaparametros))) PARDER LLAVEIZQ blockinterno LLAVEDER {}))) (RULE listaparametros (BLOCK (ALT COMA (? (BLOCK (ALT ID_VALIDO) (ALT GUIONBAJO))) ID_VALIDO DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato listaparametros {}) (ALT (? (BLOCK (ALT ID_VALIDO) (ALT GUIONBAJO))) ID_VALIDO DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato {}))) (RULE funcionllamadacontrol (BLOCK (ALT ID_VALIDO PARIZQ (? (BLOCK (ALT listaparametrosllamada))) PARIZQ {}))) (RULE listaparametrosllamada (BLOCK (ALT COMA (? (BLOCK (ALT ID_VALIDO DOS_PUNTOS))) (? (BLOCK (ALT '&'))) expr listaparametrosllamada {}) (ALT (? (BLOCK (ALT ID_VALIDO DOS_PUNTOS))) (? (BLOCK (ALT '&'))) expr {}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = instructions.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = instructions.NewFuncionFloatEmbebida($expr.e)}))) (RULE stringembebida (returns interfaces.Expression stremb) (BLOCK (ALT STRING PARIZQ expr PARDER { $stremb = instructions.NewFuncionStringEmbebida($expr.e)})))))
2023-08-29 10:57:09:294 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr {$decvbl = instructions.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = instructions.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = instructions.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = instructions.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = instructions.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = instructions.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = instructions.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = instructions.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}) (ALT stringembebida { $e = $stringembebida.stremb}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = instructions.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = instructions.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = instructions.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = instructions.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = instructions.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=instructions.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = instructions.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = instructions.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = instructions.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = instructions.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN {
    $rect = instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}) (ALT RETURN (= op expr) {
    $rect = instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = instructions.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = instructions.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = instructions.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = instructions.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = instructions.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = instructions.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = instructions.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = instructions.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = instructions.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = instructions.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = instructions.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = instructions.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE funciondeclaracioncontrol (BLOCK (ALT FUNCION ID_VALIDO PARIZQ (? (BLOCK (ALT listaparametros))) PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {}) (ALT FUNCION ID_VALIDO PARIZQ (? (BLOCK (ALT listaparametros))) PARDER LLAVEIZQ blockinterno LLAVEDER {}))) (RULE listaparametros (BLOCK (ALT COMA (? (BLOCK (ALT (SET ID_VALIDO GUIONBAJO)))) ID_VALIDO DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato listaparametros {}) (ALT (? (BLOCK (ALT (SET ID_VALIDO GUIONBAJO)))) ID_VALIDO DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato {}))) (RULE funcionllamadacontrol (BLOCK (ALT ID_VALIDO PARIZQ (? (BLOCK (ALT listaparametrosllamada))) PARIZQ {}))) (RULE listaparametrosllamada (BLOCK (ALT COMA (? (BLOCK (ALT ID_VALIDO DOS_PUNTOS))) (? (BLOCK (ALT '&'))) expr listaparametrosllamada {}) (ALT (? (BLOCK (ALT ID_VALIDO DOS_PUNTOS))) (? (BLOCK (ALT '&'))) expr {}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = instructions.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = instructions.NewFuncionFloatEmbebida($expr.e)}))) (RULE stringembebida (returns interfaces.Expression stremb) (BLOCK (ALT STRING PARIZQ expr PARDER { $stremb = instructions.NewFuncionStringEmbebida($expr.e)})))))
2023-08-29 10:57:09:294 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr {$decvbl = instructions.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = instructions.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = instructions.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = instructions.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = instructions.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = instructions.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = instructions.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = instructions.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}) (ALT stringembebida { $e = $stringembebida.stremb}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = instructions.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = instructions.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = instructions.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = instructions.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = instructions.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=instructions.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = instructions.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = instructions.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = instructions.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = instructions.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN {
    $rect = instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}) (ALT RETURN (= op expr) {
    $rect = instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = instructions.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = instructions.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = instructions.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = instructions.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = instructions.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = instructions.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = instructions.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = instructions.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = instructions.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = instructions.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = instructions.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = instructions.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE funciondeclaracioncontrol (BLOCK (ALT FUNCION ID_VALIDO PARIZQ (? (BLOCK (ALT listaparametros))) PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {}) (ALT FUNCION ID_VALIDO PARIZQ (? (BLOCK (ALT listaparametros))) PARDER LLAVEIZQ blockinterno LLAVEDER {}))) (RULE listaparametros (BLOCK (ALT COMA (? (BLOCK (ALT (SET ID_VALIDO GUIONBAJO)))) ID_VALIDO DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato listaparametros {}) (ALT (? (BLOCK (ALT (SET ID_VALIDO GUIONBAJO)))) ID_VALIDO DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato {}))) (RULE funcionllamadacontrol (BLOCK (ALT ID_VALIDO PARIZQ (? (BLOCK (ALT listaparametrosllamada))) PARIZQ {}))) (RULE listaparametrosllamada (BLOCK (ALT COMA (? (BLOCK (ALT ID_VALIDO DOS_PUNTOS))) (? (BLOCK (ALT '&'))) expr listaparametrosllamada {}) (ALT (? (BLOCK (ALT ID_VALIDO DOS_PUNTOS))) (? (BLOCK (ALT '&'))) expr {}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = instructions.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = instructions.NewFuncionFloatEmbebida($expr.e)}))) (RULE stringembebida (returns interfaces.Expression stremb) (BLOCK (ALT STRING PARIZQ expr PARDER { $stremb = instructions.NewFuncionStringEmbebida($expr.e)})))))
2023-08-29 10:57:09:294 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE T__0 (BLOCK (ALT '&')))))
2023-08-29 10:57:09:307 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-08-29 10:57:09:386 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op=NOT<tokenIndex=525> right=expr<tokenIndex=529,p=24> { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) } 
        | PARIZQ<tokenIndex=683> expr<tokenIndex=685> PARDER<tokenIndex=687> { $e = $expr.e } 
        | SUB<tokenIndex=693> NUMBER<tokenIndex=695>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    } 
        | NUMBER<tokenIndex=701>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | CADENA<tokenIndex=707>
    {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=713> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=719> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | CHARACTER<tokenIndex=725> 
    { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    } 
        | ID_VALIDO<tokenIndex=730>
    {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    } 
        | NULO<tokenIndex=735> {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)} 
        | vectorvacio<tokenIndex=741> { $e = $vectorvacio.veemct} 
        | vectorcount<tokenIndex=747> { $e = $vectorcount.vecnct} 
        | vectoraccess<tokenIndex=753> { $e = $vectoraccess.vepposct} 
        | intembebida<tokenIndex=759> { $e = $intembebida.intemb} 
        | floatembebida<tokenIndex=765> { $e = $floatembebida.floemb} 
        | stringembebida<tokenIndex=771> { $e = $stringembebida.stremb} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 23)}?<p=23> op=MODULO<tokenIndex=541> right=expr<tokenIndex=545,p=24> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 22)}?<p=22> op=(MUL<tokenIndex=558>|DIV<tokenIndex=560>) right=expr<tokenIndex=565,p=23> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=(ADD<tokenIndex=578>|SUB<tokenIndex=580>) right=expr<tokenIndex=585,p=22> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=(MAY_IG<tokenIndex=598>|MAYOR<tokenIndex=600>) right=expr<tokenIndex=605,p=21> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MEN_IG<tokenIndex=618>|MENOR<tokenIndex=620>) right=expr<tokenIndex=625,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(IG_IG<tokenIndex=638>|DIF<tokenIndex=640>) right=expr<tokenIndex=645,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=AND<tokenIndex=657> right=expr<tokenIndex=661,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=OR<tokenIndex=673> right=expr<tokenIndex=677,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-29 10:57:09:401 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 525)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 529) (= p 24)))) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 683))) (expr (ELEMENT_OPTIONS (= tokenIndex 685))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 687))) { $e = $expr.e }) (ALT (SUB (ELEMENT_OPTIONS (= tokenIndex 693))) (NUMBER (ELEMENT_OPTIONS (= tokenIndex 695))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 701))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (CADENA (ELEMENT_OPTIONS (= tokenIndex 707))) {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 713))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 719))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (CHARACTER (ELEMENT_OPTIONS (= tokenIndex 725))) { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT (ID_VALIDO (ELEMENT_OPTIONS (= tokenIndex 730))) {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT (NULO (ELEMENT_OPTIONS (= tokenIndex 735))) {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT (vectorvacio (ELEMENT_OPTIONS (= tokenIndex 741))) { $e = $vectorvacio.veemct}) (ALT (vectorcount (ELEMENT_OPTIONS (= tokenIndex 747))) { $e = $vectorcount.vecnct}) (ALT (vectoraccess (ELEMENT_OPTIONS (= tokenIndex 753))) { $e = $vectoraccess.vepposct}) (ALT (intembebida (ELEMENT_OPTIONS (= tokenIndex 759))) { $e = $intembebida.intemb}) (ALT (floatembebida (ELEMENT_OPTIONS (= tokenIndex 765))) { $e = $floatembebida.floemb}) (ALT (stringembebida (ELEMENT_OPTIONS (= tokenIndex 771))) { $e = $stringembebida.stremb})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 23)}? (ELEMENT_OPTIONS (= p 23))) (= op (MODULO (ELEMENT_OPTIONS (= tokenIndex 541)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 545) (= p 24)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 22)}? (ELEMENT_OPTIONS (= p 22))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 558))) (DIV (ELEMENT_OPTIONS (= tokenIndex 560))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 565) (= p 23)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 578))) (SUB (ELEMENT_OPTIONS (= tokenIndex 580))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 585) (= p 22)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 598))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 600))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 605) (= p 21)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 618))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 620))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 625) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 638))) (DIF (ELEMENT_OPTIONS (= tokenIndex 640))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 645) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 657)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 661) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 673)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 677) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-29 10:57:09:420 grammar LogManager.java:25 import INT=1
2023-08-29 10:57:09:420 grammar LogManager.java:25 import FLOAT=2
2023-08-29 10:57:09:420 grammar LogManager.java:25 import STRING=3
2023-08-29 10:57:09:420 grammar LogManager.java:25 import BOOL=4
2023-08-29 10:57:09:420 grammar LogManager.java:25 import CHARACT=5
2023-08-29 10:57:09:420 grammar LogManager.java:25 import TRU=6
2023-08-29 10:57:09:420 grammar LogManager.java:25 import FAL=7
2023-08-29 10:57:09:420 grammar LogManager.java:25 import VAR=8
2023-08-29 10:57:09:420 grammar LogManager.java:25 import LET=9
2023-08-29 10:57:09:420 grammar LogManager.java:25 import NULO=10
2023-08-29 10:57:09:420 grammar LogManager.java:25 import IF=11
2023-08-29 10:57:09:420 grammar LogManager.java:25 import ELSE=12
2023-08-29 10:57:09:420 grammar LogManager.java:25 import SWITCH=13
2023-08-29 10:57:09:420 grammar LogManager.java:25 import CASE=14
2023-08-29 10:57:09:420 grammar LogManager.java:25 import DEFAULT=15
2023-08-29 10:57:09:420 grammar LogManager.java:25 import BREAK=16
2023-08-29 10:57:09:420 grammar LogManager.java:25 import CONTINUE=17
2023-08-29 10:57:09:420 grammar LogManager.java:25 import FOR=18
2023-08-29 10:57:09:420 grammar LogManager.java:25 import IN=19
2023-08-29 10:57:09:420 grammar LogManager.java:25 import RANGO=20
2023-08-29 10:57:09:420 grammar LogManager.java:25 import WHILE=21
2023-08-29 10:57:09:420 grammar LogManager.java:25 import GUARD=22
2023-08-29 10:57:09:420 grammar LogManager.java:25 import RETURN=23
2023-08-29 10:57:09:420 grammar LogManager.java:25 import FUNCION=24
2023-08-29 10:57:09:420 grammar LogManager.java:25 import PRINT=25
2023-08-29 10:57:09:420 grammar LogManager.java:25 import INOUT=26
2023-08-29 10:57:09:420 grammar LogManager.java:25 import APPEND=27
2023-08-29 10:57:09:420 grammar LogManager.java:25 import REMOVE=28
2023-08-29 10:57:09:420 grammar LogManager.java:25 import REMOVELAST=29
2023-08-29 10:57:09:420 grammar LogManager.java:25 import COUNT=30
2023-08-29 10:57:09:420 grammar LogManager.java:25 import ISEMPTY=31
2023-08-29 10:57:09:420 grammar LogManager.java:25 import AT=32
2023-08-29 10:57:09:420 grammar LogManager.java:25 import REPEATING=33
2023-08-29 10:57:09:420 grammar LogManager.java:25 import STRUCT=34
2023-08-29 10:57:09:420 grammar LogManager.java:25 import MUTATING=35
2023-08-29 10:57:09:420 grammar LogManager.java:25 import NUMBER=36
2023-08-29 10:57:09:420 grammar LogManager.java:25 import CADENA=37
2023-08-29 10:57:09:420 grammar LogManager.java:25 import ID_VALIDO=38
2023-08-29 10:57:09:420 grammar LogManager.java:25 import CHARACTER=39
2023-08-29 10:57:09:420 grammar LogManager.java:25 import WS=40
2023-08-29 10:57:09:420 grammar LogManager.java:25 import IG=41
2023-08-29 10:57:09:420 grammar LogManager.java:25 import DOS_PUNTOS=42
2023-08-29 10:57:09:420 grammar LogManager.java:25 import PUNTOCOMA=43
2023-08-29 10:57:09:420 grammar LogManager.java:25 import CIERRE_INTE=44
2023-08-29 10:57:09:420 grammar LogManager.java:25 import PARIZQ=45
2023-08-29 10:57:09:420 grammar LogManager.java:25 import PARDER=46
2023-08-29 10:57:09:420 grammar LogManager.java:25 import DIF=47
2023-08-29 10:57:09:420 grammar LogManager.java:25 import IG_IG=48
2023-08-29 10:57:09:420 grammar LogManager.java:25 import NOT=49
2023-08-29 10:57:09:420 grammar LogManager.java:25 import OR=50
2023-08-29 10:57:09:420 grammar LogManager.java:25 import AND=51
2023-08-29 10:57:09:420 grammar LogManager.java:25 import MAY_IG=52
2023-08-29 10:57:09:420 grammar LogManager.java:25 import MEN_IG=53
2023-08-29 10:57:09:420 grammar LogManager.java:25 import MAYOR=54
2023-08-29 10:57:09:420 grammar LogManager.java:25 import MENOR=55
2023-08-29 10:57:09:420 grammar LogManager.java:25 import MODULO=56
2023-08-29 10:57:09:420 grammar LogManager.java:25 import MUL=57
2023-08-29 10:57:09:420 grammar LogManager.java:25 import DIV=58
2023-08-29 10:57:09:433 grammar LogManager.java:25 import ADD=59
2023-08-29 10:57:09:433 grammar LogManager.java:25 import SUB=60
2023-08-29 10:57:09:433 grammar LogManager.java:25 import SUMA=61
2023-08-29 10:57:09:433 grammar LogManager.java:25 import RESTA=62
2023-08-29 10:57:09:433 grammar LogManager.java:25 import LLAVEIZQ=63
2023-08-29 10:57:09:433 grammar LogManager.java:25 import LLAVEDER=64
2023-08-29 10:57:09:433 grammar LogManager.java:25 import RETORNO=65
2023-08-29 10:57:09:433 grammar LogManager.java:25 import COMA=66
2023-08-29 10:57:09:433 grammar LogManager.java:25 import PUNTO=67
2023-08-29 10:57:09:433 grammar LogManager.java:25 import GUIONBAJO=68
2023-08-29 10:57:09:433 grammar LogManager.java:25 import CORCHIZQ=69
2023-08-29 10:57:09:433 grammar LogManager.java:25 import CORCHDER=70
2023-08-29 10:57:09:433 grammar LogManager.java:25 import WHITESPACE=71
2023-08-29 10:57:09:433 grammar LogManager.java:25 import COMMENT=72
2023-08-29 10:57:09:433 grammar LogManager.java:25 import LINE_COMMENT=73
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'Int'=1
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'Float'=2
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'String'=3
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'Bool'=4
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'Character'=5
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'true'=6
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'false'=7
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'var'=8
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'let'=9
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'nil'=10
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'if'=11
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'else'=12
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'switch'=13
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'case'=14
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'default'=15
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'break'=16
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'continue'=17
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'for'=18
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'in'=19
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '...'=20
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'while'=21
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'guard'=22
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'return'=23
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'func'=24
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'print'=25
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'inout'=26
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'append'=27
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'remove'=28
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'removeLast'=29
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'count'=30
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'isEmpty'=31
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'at'=32
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'repeating'=33
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'struct'=34
2023-08-29 10:57:09:433 grammar LogManager.java:25 import 'mutating'=35
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '='=41
2023-08-29 10:57:09:433 grammar LogManager.java:25 import ':'=42
2023-08-29 10:57:09:433 grammar LogManager.java:25 import ';'=43
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '?'=44
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '('=45
2023-08-29 10:57:09:433 grammar LogManager.java:25 import ')'=46
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '!='=47
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '=='=48
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '!'=49
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '||'=50
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '&&'=51
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '>='=52
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '<='=53
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '>'=54
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '<'=55
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '%'=56
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '*'=57
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '/'=58
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '+'=59
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '-'=60
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '+='=61
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '-='=62
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '{'=63
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '}'=64
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '->'=65
2023-08-29 10:57:09:433 grammar LogManager.java:25 import ','=66
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '.'=67
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '_'=68
2023-08-29 10:57:09:433 grammar LogManager.java:25 import '['=69
2023-08-29 10:57:09:433 grammar LogManager.java:25 import ']'=70
2023-08-29 10:57:09:433 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, STRING=3, BOOL=4, CHARACT=5, TRU=6, FAL=7, VAR=8, LET=9, NULO=10, IF=11, ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, BREAK=16, CONTINUE=17, FOR=18, IN=19, RANGO=20, WHILE=21, GUARD=22, RETURN=23, FUNCION=24, PRINT=25, INOUT=26, APPEND=27, REMOVE=28, REMOVELAST=29, COUNT=30, ISEMPTY=31, AT=32, REPEATING=33, STRUCT=34, MUTATING=35, NUMBER=36, CADENA=37, ID_VALIDO=38, CHARACTER=39, WS=40, IG=41, DOS_PUNTOS=42, PUNTOCOMA=43, CIERRE_INTE=44, PARIZQ=45, PARDER=46, DIF=47, IG_IG=48, NOT=49, OR=50, AND=51, MAY_IG=52, MEN_IG=53, MAYOR=54, MENOR=55, MODULO=56, MUL=57, DIV=58, ADD=59, SUB=60, SUMA=61, RESTA=62, LLAVEIZQ=63, LLAVEDER=64, RETORNO=65, COMA=66, PUNTO=67, GUIONBAJO=68, CORCHIZQ=69, CORCHDER=70, WHITESPACE=71, COMMENT=72, LINE_COMMENT=73, 'Int'=1, 'Float'=2, 'String'=3, 'Bool'=4, 'Character'=5, 'true'=6, 'false'=7, 'var'=8, 'let'=9, 'nil'=10, 'if'=11, 'else'=12, 'switch'=13, 'case'=14, 'default'=15, 'break'=16, 'continue'=17, 'for'=18, 'in'=19, '...'=20, 'while'=21, 'guard'=22, 'return'=23, 'func'=24, 'print'=25, 'inout'=26, 'append'=27, 'remove'=28, 'removeLast'=29, 'count'=30, 'isEmpty'=31, 'at'=32, 'repeating'=33, 'struct'=34, 'mutating'=35, '='=41, ':'=42, ';'=43, '?'=44, '('=45, ')'=46, '!='=47, '=='=48, '!'=49, '||'=50, '&&'=51, '>='=52, '<='=53, '>'=54, '<'=55, '%'=56, '*'=57, '/'=58, '+'=59, '-'=60, '+='=61, '-='=62, '{'=63, '}'=64, '->'=65, ','=66, '.'=67, '_'=68, '['=69, ']'=70}
2023-08-29 10:57:09:433 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, INT=1, FLOAT=2, STRING=3, BOOL=4, CHARACT=5, TRU=6, FAL=7, VAR=8, LET=9, NULO=10, IF=11, ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, BREAK=16, CONTINUE=17, FOR=18, IN=19, RANGO=20, WHILE=21, GUARD=22, RETURN=23, FUNCION=24, PRINT=25, INOUT=26, APPEND=27, REMOVE=28, REMOVELAST=29, COUNT=30, ISEMPTY=31, AT=32, REPEATING=33, STRUCT=34, MUTATING=35, NUMBER=36, CADENA=37, ID_VALIDO=38, CHARACTER=39, WS=40, IG=41, DOS_PUNTOS=42, PUNTOCOMA=43, CIERRE_INTE=44, PARIZQ=45, PARDER=46, DIF=47, IG_IG=48, NOT=49, OR=50, AND=51, MAY_IG=52, MEN_IG=53, MAYOR=54, MENOR=55, MODULO=56, MUL=57, DIV=58, ADD=59, SUB=60, SUMA=61, RESTA=62, LLAVEIZQ=63, LLAVEDER=64, RETORNO=65, COMA=66, PUNTO=67, GUIONBAJO=68, CORCHIZQ=69, CORCHDER=70, WHITESPACE=71, COMMENT=72, LINE_COMMENT=73}
2023-08-29 10:57:09:433 semantics LogManager.java:25 strings={'&'=1, 'Int'=1, 'Float'=2, 'String'=3, 'Bool'=4, 'Character'=5, 'true'=6, 'false'=7, 'var'=8, 'let'=9, 'nil'=10, 'if'=11, 'else'=12, 'switch'=13, 'case'=14, 'default'=15, 'break'=16, 'continue'=17, 'for'=18, 'in'=19, '...'=20, 'while'=21, 'guard'=22, 'return'=23, 'func'=24, 'print'=25, 'inout'=26, 'append'=27, 'remove'=28, 'removeLast'=29, 'count'=30, 'isEmpty'=31, 'at'=32, 'repeating'=33, 'struct'=34, 'mutating'=35, '='=41, ':'=42, ';'=43, '?'=44, '('=45, ')'=46, '!='=47, '=='=48, '!'=49, '||'=50, '&&'=51, '>='=52, '<='=53, '>'=54, '<'=55, '%'=56, '*'=57, '/'=58, '+'=59, '-'=60, '+='=61, '-='=62, '{'=63, '}'=64, '->'=65, ','=66, '.'=67, '_'=68, '['=69, ']'=70}
2023-08-29 10:57:09:465 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-29 10:57:09:465 LL1 LogManager.java:25 look=[{8..9, 11, 13, 18, 21..22, 25, 38}, <EOF>]
2023-08-29 10:57:09:465 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:465 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-29 10:57:09:465 LL1 LogManager.java:25 look=[43, {<EOF>, 8..9, 11, 13, 18, 21..22, 25, 38}]
2023-08-29 10:57:09:465 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:465 LL1 LogManager.java:25 
DECISION 2 in rule instruction
2023-08-29 10:57:09:465 LL1 LogManager.java:25 look=[43, {<EOF>, 8..9, 11, 13, 18, 21..22, 25, 38}]
2023-08-29 10:57:09:465 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:465 LL1 LogManager.java:25 
DECISION 3 in rule instruction
2023-08-29 10:57:09:465 LL1 LogManager.java:25 look=[43, {<EOF>, 8..9, 11, 13, 18, 21..22, 25, 38}]
2023-08-29 10:57:09:465 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:465 LL1 LogManager.java:25 
DECISION 4 in rule instruction
2023-08-29 10:57:09:465 LL1 LogManager.java:25 look=[43, {<EOF>, 8..9, 11, 13, 18, 21..22, 25, 38}]
2023-08-29 10:57:09:465 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:465 LL1 LogManager.java:25 
DECISION 5 in rule instruction
2023-08-29 10:57:09:465 LL1 LogManager.java:25 look=[43, {<EOF>, 8..9, 11, 13, 18, 21..22, 25, 38}]
2023-08-29 10:57:09:465 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:465 LL1 LogManager.java:25 
DECISION 6 in rule instruction
2023-08-29 10:57:09:465 LL1 LogManager.java:25 look=[8, 9, 38, 11, 13, 21, 18, 22, 8, 38, 38, 25]
2023-08-29 10:57:09:465 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:465 LL1 LogManager.java:25 
DECISION 7 in rule blockinterno
2023-08-29 10:57:09:465 LL1 LogManager.java:25 look=[{8..9, 11, 13, 16..18, 21..23, 25, 38}, {14..15, 64}]
2023-08-29 10:57:09:465 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:465 LL1 LogManager.java:25 
DECISION 8 in rule instructionint
2023-08-29 10:57:09:465 LL1 LogManager.java:25 look=[43, {8..9, 11, 13..18, 21..23, 25, 38, 64}]
2023-08-29 10:57:09:465 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:465 LL1 LogManager.java:25 
DECISION 9 in rule instructionint
2023-08-29 10:57:09:465 LL1 LogManager.java:25 look=[43, {8..9, 11, 13..18, 21..23, 25, 38, 64}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 10 in rule instructionint
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[43, {8..9, 11, 13..18, 21..23, 25, 38, 64}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 11 in rule instructionint
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[43, {8..9, 11, 13..18, 21..23, 25, 38, 64}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 12 in rule instructionint
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[43, {8..9, 11, 13..18, 21..23, 25, 38, 64}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 13 in rule instructionint
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[43, {8..9, 11, 13..18, 21..23, 25, 38, 64}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 14 in rule instructionint
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[43, {8..9, 11, 13..18, 21..23, 25, 38, 64}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 15 in rule instructionint
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[43, {8..9, 11, 13..18, 21..23, 25, 38, 64}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 16 in rule instructionint
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[43, {8..9, 11, 13..18, 21..23, 25, 38, 64}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 17 in rule instructionint
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[43, {8..9, 11, 13..18, 21..23, 25, 38, 64}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 18 in rule instructionint
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[8, 9, 38, 11, 13, 21, 18, 22, 17, 16, 23, 8, 38, 38, 25]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 19 in rule declavarible
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[8, 8, 8]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 20 in rule declaconstante
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[9, 9]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 21 in rule asignacionvariable
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[38, 38, 38]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 22 in rule tipodato
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 23 in rule expr
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[49, 45, 60, 36, 37, 6, 7, 39, 38, 10, 38, 38, 38, 1, 2, 3]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 24 in rule expr
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 25 in rule expr
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[null, null]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 26 in rule sentenciaifelse
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[11, 11, 11]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 27 in rule switchcontrol
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[15, 64]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 28 in rule blockcase
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[14, {15, 64}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 29 in rule forcontrol
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[18, 18]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 30 in rule retornos
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[23, 23]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 31 in rule vectorcontrol
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[8, 8, 8]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 32 in rule blockparams
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[{1..3, 6..7, 10, 36..39, 45, 49, 60, 66}, 70]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 33 in rule bloqueparams
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[66, {1..3, 6..7, 10, 36..39, 45, 49, 60}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 34 in rule vectoragregar
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[38, 38, 38]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 35 in rule vectorremover
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[38, 38]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 36 in rule funciondeclaracioncontrol
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[{38, 66, 68}, 46]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 37 in rule funciondeclaracioncontrol
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[{38, 66, 68}, 46]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 38 in rule funciondeclaracioncontrol
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[24, 24]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 39 in rule listaparametros
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[{38, 68}, 38]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 40 in rule listaparametros
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[26, {1..5}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 41 in rule listaparametros
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[{38, 68}, 38]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 42 in rule listaparametros
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[26, {1..5}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 43 in rule listaparametros
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[66, {38, 68}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 44 in rule funcionllamadacontrol
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[{1..3, 6..7, 10, 36..39, 45, 49, 60, 66}, 45]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 45 in rule listaparametrosllamada
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[38, {1..3, 6..7, 10, 36..39, 45, 49, 60}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 46 in rule listaparametrosllamada
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[1, {1..3, 6..7, 10, 36..39, 45, 49, 60}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 47 in rule listaparametrosllamada
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[38, {1..3, 6..7, 10, 36..39, 45, 49, 60}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 48 in rule listaparametrosllamada
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[1, {1..3, 6..7, 10, 36..39, 45, 49, 60}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? false
2023-08-29 10:57:09:480 LL1 LogManager.java:25 
DECISION 49 in rule listaparametrosllamada
2023-08-29 10:57:09:480 LL1 LogManager.java:25 look=[66, {1..3, 6..7, 10, 36..39, 45, 49, 60}]
2023-08-29 10:57:09:480 LL1 LogManager.java:25 LL(1)? true
2023-08-29 10:57:09:480 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-08-29 10:57:09:496 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-29 10:57:09:496 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,18:9]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,18:17].[@-1,28:30='blk',<0>,18:23]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-29 10:57:09:496 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,24:5]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-29 10:57:09:496 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,31:13]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,31:27]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 translate  $inst = $declavarible.decvbl
2023-08-29 10:57:09:496 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,38:30]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 qattr [@-1,10:21='declavarible',<0>,38:38].[@-1,23:28='decvbl',<0>,38:51]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 translate  $inst = $declaconstante.deccon
2023-08-29 10:57:09:496 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:32]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 qattr [@-1,10:23='declaconstante',<0>,39:40].[@-1,25:30='deccon',<0>,39:55]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 translate  $inst = $asignacionvariable.asgvbl
2023-08-29 10:57:09:496 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:36]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 qattr [@-1,10:27='asignacionvariable',<0>,40:44].[@-1,29:34='asgvbl',<0>,40:63]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 translate  $inst = $sentenciaifelse.myIfElse
2023-08-29 10:57:09:496 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 qattr [@-1,10:24='sentenciaifelse',<0>,41:28].[@-1,26:33='myIfElse',<0>,41:44]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 translate  $inst = $switchcontrol.mySwitch
2023-08-29 10:57:09:496 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:18]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 qattr [@-1,10:22='switchcontrol',<0>,42:26].[@-1,24:31='mySwitch',<0>,42:40]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 translate  $inst = $whilecontrol.whict
2023-08-29 10:57:09:496 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:17]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 qattr [@-1,10:21='whilecontrol',<0>,43:25].[@-1,23:27='whict',<0>,43:38]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 translate  $inst = $forcontrol.forct
2023-08-29 10:57:09:496 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:15]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 qattr [@-1,10:19='forcontrol',<0>,44:23].[@-1,21:25='forct',<0>,44:34]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 translate  $inst = $guardcontrol.guct
2023-08-29 10:57:09:496 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:17]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 qattr [@-1,10:21='guardcontrol',<0>,45:25].[@-1,23:26='guct',<0>,45:38]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 translate  $inst = $vectorcontrol.vect 
2023-08-29 10:57:09:496 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:31]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 qattr [@-1,10:22='vectorcontrol',<0>,46:39].[@-1,24:27='vect',<0>,46:53]
2023-08-29 10:57:09:496 action-translator LogManager.java:25 translate  $inst = $vectoragregar.veadct 
2023-08-29 10:57:09:496 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:19]
2023-08-29 10:57:09:511 action-translator LogManager.java:25 qattr [@-1,10:22='vectoragregar',<0>,47:27].[@-1,24:29='veadct',<0>,47:41]
2023-08-29 10:57:09:511 action-translator LogManager.java:25 translate  $inst = $vectorremover.vermct 
2023-08-29 10:57:09:511 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:19]
2023-08-29 10:57:09:511 action-translator LogManager.java:25 qattr [@-1,10:22='vectorremover',<0>,48:27].[@-1,24:29='vermct',<0>,48:41]
2023-08-29 10:57:09:511 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-29 10:57:09:511 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:27]
2023-08-29 10:57:09:511 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,49:35].[@-1,20:23='prnt',<0>,49:45]
2023-08-29 10:57:09:513 action-translator LogManager.java:25 translate 
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  
2023-08-29 10:57:09:513 action-translator LogManager.java:25 attr [@-1,7:12='blkint',<0>,55:5]
2023-08-29 10:57:09:513 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    
2023-08-29 10:57:09:513 action-translator LogManager.java:25 attr [@-1,115:120='blkint',<0>,62:13]
2023-08-29 10:57:09:513 action-translator LogManager.java:25 attr [@-1,132:137='blkint',<0>,62:30]
2023-08-29 10:57:09:514 action-translator LogManager.java:25 translate  $insint = $declavarible.decvbl
2023-08-29 10:57:09:514 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,70:30]
2023-08-29 10:57:09:514 action-translator LogManager.java:25 qattr [@-1,12:23='declavarible',<0>,70:40].[@-1,25:30='decvbl',<0>,70:53]
2023-08-29 10:57:09:516 action-translator LogManager.java:25 translate  $insint = $declaconstante.deccon
2023-08-29 10:57:09:516 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,71:32]
2023-08-29 10:57:09:516 action-translator LogManager.java:25 qattr [@-1,12:25='declaconstante',<0>,71:42].[@-1,27:32='deccon',<0>,71:57]
2023-08-29 10:57:09:516 action-translator LogManager.java:25 translate  $insint = $asignacionvariable.asgvbl
2023-08-29 10:57:09:516 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,72:36]
2023-08-29 10:57:09:516 action-translator LogManager.java:25 qattr [@-1,12:29='asignacionvariable',<0>,72:46].[@-1,31:36='asgvbl',<0>,72:65]
2023-08-29 10:57:09:516 action-translator LogManager.java:25 translate  $insint = $sentenciaifelse.myIfElse
2023-08-29 10:57:09:516 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,73:20]
2023-08-29 10:57:09:516 action-translator LogManager.java:25 qattr [@-1,12:26='sentenciaifelse',<0>,73:30].[@-1,28:35='myIfElse',<0>,73:46]
2023-08-29 10:57:09:516 action-translator LogManager.java:25 translate  $insint = $switchcontrol.mySwitch
2023-08-29 10:57:09:516 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,74:18]
2023-08-29 10:57:09:516 action-translator LogManager.java:25 qattr [@-1,12:24='switchcontrol',<0>,74:28].[@-1,26:33='mySwitch',<0>,74:42]
2023-08-29 10:57:09:516 action-translator LogManager.java:25 translate  $insint = $whilecontrol.whict
2023-08-29 10:57:09:518 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,75:17]
2023-08-29 10:57:09:518 action-translator LogManager.java:25 qattr [@-1,12:23='whilecontrol',<0>,75:27].[@-1,25:29='whict',<0>,75:40]
2023-08-29 10:57:09:518 action-translator LogManager.java:25 translate  $insint = $forcontrol.forct
2023-08-29 10:57:09:518 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,76:15]
2023-08-29 10:57:09:518 action-translator LogManager.java:25 qattr [@-1,12:21='forcontrol',<0>,76:25].[@-1,23:27='forct',<0>,76:36]
2023-08-29 10:57:09:519 action-translator LogManager.java:25 translate  $insint = $guardcontrol.guct
2023-08-29 10:57:09:519 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,77:17]
2023-08-29 10:57:09:519 action-translator LogManager.java:25 qattr [@-1,12:23='guardcontrol',<0>,77:27].[@-1,25:28='guct',<0>,77:40]
2023-08-29 10:57:09:519 action-translator LogManager.java:25 translate  $insint = $continuee.coct
2023-08-29 10:57:09:519 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,78:27]
2023-08-29 10:57:09:520 action-translator LogManager.java:25 qattr [@-1,12:20='continuee',<0>,78:37].[@-1,22:25='coct',<0>,78:47]
2023-08-29 10:57:09:520 action-translator LogManager.java:25 translate  $insint = $breakk.brkct
2023-08-29 10:57:09:520 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,79:24]
2023-08-29 10:57:09:520 action-translator LogManager.java:25 qattr [@-1,12:17='breakk',<0>,79:34].[@-1,19:23='brkct',<0>,79:41]
2023-08-29 10:57:09:520 action-translator LogManager.java:25 translate  $insint = $retornos.rect 
2023-08-29 10:57:09:520 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,80:26]
2023-08-29 10:57:09:520 action-translator LogManager.java:25 qattr [@-1,12:19='retornos',<0>,80:36].[@-1,21:24='rect',<0>,80:45]
2023-08-29 10:57:09:520 action-translator LogManager.java:25 translate  $insint = $vectorcontrol.vect 
2023-08-29 10:57:09:520 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,81:31]
2023-08-29 10:57:09:520 action-translator LogManager.java:25 qattr [@-1,12:24='vectorcontrol',<0>,81:41].[@-1,26:29='vect',<0>,81:55]
2023-08-29 10:57:09:521 action-translator LogManager.java:25 translate  $insint = $vectoragregar.veadct 
2023-08-29 10:57:09:521 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,82:32]
2023-08-29 10:57:09:521 action-translator LogManager.java:25 qattr [@-1,12:24='vectoragregar',<0>,82:42].[@-1,26:31='veadct',<0>,82:56]
2023-08-29 10:57:09:521 action-translator LogManager.java:25 translate  $insint = $vectorremover.vermct 
2023-08-29 10:57:09:522 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,83:31]
2023-08-29 10:57:09:522 action-translator LogManager.java:25 qattr [@-1,12:24='vectorremover',<0>,83:41].[@-1,26:31='vermct',<0>,83:55]
2023-08-29 10:57:09:522 action-translator LogManager.java:25 translate  $insint = $printstmt.prnt
2023-08-29 10:57:09:522 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,84:27]
2023-08-29 10:57:09:522 action-translator LogManager.java:25 qattr [@-1,12:20='printstmt',<0>,84:37].[@-1,22:25='prnt',<0>,84:47]
2023-08-29 10:57:09:523 action-translator LogManager.java:25 translate $decvbl = instructions.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)
2023-08-29 10:57:09:523 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,95:44]
2023-08-29 10:57:09:523 action-translator LogManager.java:25 qattr [@-1,47:49='VAR',<0>,95:90].[@-1,51:54='line',<0>,95:94]
2023-08-29 10:57:09:525 action-translator LogManager.java:25 qattr [@-1,58:60='VAR',<0>,95:101].[@-1,62:64='pos',<0>,95:105]
2023-08-29 10:57:09:525 action-translator LogManager.java:25 qattr [@-1,68:76='ID_VALIDO',<0>,95:111].[@-1,78:81='text',<0>,95:121]
2023-08-29 10:57:09:525 action-translator LogManager.java:25 qattr [@-1,85:92='tipodato',<0>,95:128].[@-1,94:97='tipo',<0>,95:137]
2023-08-29 10:57:09:525 action-translator LogManager.java:25 qattr [@-1,101:104='expr',<0>,95:144].[@-1,106:106='e',<0>,95:149]
2023-08-29 10:57:09:525 action-translator LogManager.java:25 translate $decvbl = instructions.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)
2023-08-29 10:57:09:525 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,96:25]
2023-08-29 10:57:09:525 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,96:78].[@-1,58:61='line',<0>,96:82]
2023-08-29 10:57:09:525 action-translator LogManager.java:25 qattr [@-1,65:67='VAR',<0>,96:89].[@-1,69:71='pos',<0>,96:93]
2023-08-29 10:57:09:525 action-translator LogManager.java:25 qattr [@-1,75:83='ID_VALIDO',<0>,96:99].[@-1,85:88='text',<0>,96:109]
2023-08-29 10:57:09:525 action-translator LogManager.java:25 qattr [@-1,92:95='expr',<0>,96:116].[@-1,97:97='e',<0>,96:121]
2023-08-29 10:57:09:525 action-translator LogManager.java:25 translate $decvbl = instructions.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)
2023-08-29 10:57:09:525 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,97:49]
2023-08-29 10:57:09:525 action-translator LogManager.java:25 qattr [@-1,53:55='VAR',<0>,97:101].[@-1,57:60='line',<0>,97:105]
2023-08-29 10:57:09:525 action-translator LogManager.java:25 qattr [@-1,64:66='VAR',<0>,97:112].[@-1,68:70='pos',<0>,97:116]
2023-08-29 10:57:09:525 action-translator LogManager.java:25 qattr [@-1,74:82='ID_VALIDO',<0>,97:122].[@-1,84:87='text',<0>,97:132]
2023-08-29 10:57:09:525 action-translator LogManager.java:25 qattr [@-1,91:98='tipodato',<0>,97:139].[@-1,100:103='tipo',<0>,97:148]
2023-08-29 10:57:09:526 action-translator LogManager.java:25 translate $deccon = instructions.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)
2023-08-29 10:57:09:526 action-translator LogManager.java:25 attr [@-1,1:6='deccon',<0>,101:45]
2023-08-29 10:57:09:526 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,101:92].[@-1,52:55='line',<0>,101:96]
2023-08-29 10:57:09:526 action-translator LogManager.java:25 qattr [@-1,59:61='LET',<0>,101:103].[@-1,63:65='pos',<0>,101:107]
2023-08-29 10:57:09:526 action-translator LogManager.java:25 qattr [@-1,69:77='ID_VALIDO',<0>,101:113].[@-1,79:82='text',<0>,101:123]
2023-08-29 10:57:09:526 action-translator LogManager.java:25 qattr [@-1,86:93='tipodato',<0>,101:130].[@-1,95:98='tipo',<0>,101:139]
2023-08-29 10:57:09:527 action-translator LogManager.java:25 qattr [@-1,102:105='expr',<0>,101:146].[@-1,107:107='e',<0>,101:151]
2023-08-29 10:57:09:527 action-translator LogManager.java:25 translate $deccon = instructions.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)
2023-08-29 10:57:09:527 action-translator LogManager.java:25 attr [@-1,1:6='deccon',<0>,102:25]
2023-08-29 10:57:09:527 action-translator LogManager.java:25 qattr [@-1,55:57='LET',<0>,102:79].[@-1,59:62='line',<0>,102:83]
2023-08-29 10:57:09:528 action-translator LogManager.java:25 qattr [@-1,66:68='LET',<0>,102:90].[@-1,70:72='pos',<0>,102:94]
2023-08-29 10:57:09:528 action-translator LogManager.java:25 qattr [@-1,76:84='ID_VALIDO',<0>,102:100].[@-1,86:89='text',<0>,102:110]
2023-08-29 10:57:09:528 action-translator LogManager.java:25 qattr [@-1,93:96='expr',<0>,102:117].[@-1,98:98='e',<0>,102:122]
2023-08-29 10:57:09:528 action-translator LogManager.java:25 translate  $asgvbl = instructions.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-08-29 10:57:09:528 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,106:22]
2023-08-29 10:57:09:528 action-translator LogManager.java:25 qattr [@-1,47:55='ID_VALIDO',<0>,106:67].[@-1,57:60='line',<0>,106:77]
2023-08-29 10:57:09:529 action-translator LogManager.java:25 qattr [@-1,64:72='ID_VALIDO',<0>,106:84].[@-1,74:76='pos',<0>,106:94]
2023-08-29 10:57:09:529 action-translator LogManager.java:25 qattr [@-1,80:88='ID_VALIDO',<0>,106:100].[@-1,90:93='text',<0>,106:110]
2023-08-29 10:57:09:529 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,106:117].[@-1,102:102='e',<0>,106:122]
2023-08-29 10:57:09:529 action-translator LogManager.java:25 translate  $asgvbl = instructions.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-08-29 10:57:09:529 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,107:24]
2023-08-29 10:57:09:529 action-translator LogManager.java:25 qattr [@-1,43:51='ID_VALIDO',<0>,107:65].[@-1,53:56='line',<0>,107:75]
2023-08-29 10:57:09:529 action-translator LogManager.java:25 qattr [@-1,60:68='ID_VALIDO',<0>,107:82].[@-1,70:72='pos',<0>,107:92]
2023-08-29 10:57:09:529 action-translator LogManager.java:25 qattr [@-1,76:84='ID_VALIDO',<0>,107:98].[@-1,86:89='text',<0>,107:108]
2023-08-29 10:57:09:529 action-translator LogManager.java:25 qattr [@-1,93:96='expr',<0>,107:115].[@-1,98:98='e',<0>,107:120]
2023-08-29 10:57:09:529 action-translator LogManager.java:25 translate  $asgvbl = instructions.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-08-29 10:57:09:529 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,108:25]
2023-08-29 10:57:09:529 action-translator LogManager.java:25 qattr [@-1,44:52='ID_VALIDO',<0>,108:67].[@-1,54:57='line',<0>,108:77]
2023-08-29 10:57:09:529 action-translator LogManager.java:25 qattr [@-1,61:69='ID_VALIDO',<0>,108:84].[@-1,71:73='pos',<0>,108:94]
2023-08-29 10:57:09:529 action-translator LogManager.java:25 qattr [@-1,77:85='ID_VALIDO',<0>,108:100].[@-1,87:90='text',<0>,108:110]
2023-08-29 10:57:09:530 action-translator LogManager.java:25 qattr [@-1,94:97='expr',<0>,108:117].[@-1,99:99='e',<0>,108:122]
2023-08-29 10:57:09:530 action-translator LogManager.java:25 translate  $tipo = environment.INTEGER 
2023-08-29 10:57:09:530 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,112:8]
2023-08-29 10:57:09:531 action-translator LogManager.java:25 translate  $tipo = environment.FLOAT 
2023-08-29 10:57:09:531 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,113:10]
2023-08-29 10:57:09:531 action-translator LogManager.java:25 translate  $tipo = environment.STRING 
2023-08-29 10:57:09:531 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,114:11]
2023-08-29 10:57:09:531 action-translator LogManager.java:25 translate  $tipo = environment.BOOLEAN 
2023-08-29 10:57:09:531 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,115:9]
2023-08-29 10:57:09:531 action-translator LogManager.java:25 translate  $tipo = environment.CHARACTER 
2023-08-29 10:57:09:531 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,116:12]
2023-08-29 10:57:09:533 action-translator LogManager.java:25 translate 
2023-08-29 10:57:09:533 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) 
2023-08-29 10:57:09:534 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:70]
2023-08-29 10:57:09:534 action-translator LogManager.java:25 qattr [@-1,32:36='right',<0>,2:100].[@-1,38:42='start',<0>,2:106]
2023-08-29 10:57:09:534 action-translator LogManager.java:25 qattr [@-1,56:60='right',<0>,2:124].[@-1,62:66='start',<0>,2:130]
2023-08-29 10:57:09:534 action-translator LogManager.java:25 qattr [@-1,82:86='right',<0>,2:150].[@-1,88:88='e',<0>,2:156]
2023-08-29 10:57:09:534 action-translator LogManager.java:25 qattr [@-1,92:93='op',<0>,2:160].[@-1,95:98='text',<0>,2:163]
2023-08-29 10:57:09:534 action-translator LogManager.java:25 qattr [@-1,102:106='right',<0>,2:170].[@-1,108:108='e',<0>,2:176]
2023-08-29 10:57:09:534 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-29 10:57:09:534 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:79]
2023-08-29 10:57:09:535 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,3:84].[@-1,12:12='e',<0>,3:89]
2023-08-29 10:57:09:535 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    
2023-08-29 10:57:09:535 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,6:30].[@-1,39:42='text',<0>,6:37]
2023-08-29 10:57:09:535 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,7:43].[@-1,102:105='text',<0>,7:50]
2023-08-29 10:57:09:535 action-translator LogManager.java:25 attr [@-1,377:377='e',<0>,16:13]
2023-08-29 10:57:09:535 action-translator LogManager.java:25 qattr [@-1,407:412='NUMBER',<0>,16:43].[@-1,414:417='line',<0>,16:50]
2023-08-29 10:57:09:535 action-translator LogManager.java:25 qattr [@-1,420:425='NUMBER',<0>,16:56].[@-1,427:429='pos',<0>,16:63]
2023-08-29 10:57:09:535 action-translator LogManager.java:25 qattr [@-1,510:515='NUMBER',<0>,18:37].[@-1,517:520='text',<0>,18:44]
2023-08-29 10:57:09:535 action-translator LogManager.java:25 attr [@-1,613:613='e',<0>,22:13]
2023-08-29 10:57:09:536 action-translator LogManager.java:25 qattr [@-1,643:648='NUMBER',<0>,22:43].[@-1,650:653='line',<0>,22:50]
2023-08-29 10:57:09:536 action-translator LogManager.java:25 qattr [@-1,656:661='NUMBER',<0>,22:56].[@-1,663:665='pos',<0>,22:63]
2023-08-29 10:57:09:536 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-29 10:57:09:536 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,27:30].[@-1,39:42='text',<0>,27:37]
2023-08-29 10:57:09:536 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,28:43].[@-1,102:105='text',<0>,28:50]
2023-08-29 10:57:09:536 action-translator LogManager.java:25 attr [@-1,374:374='e',<0>,37:10]
2023-08-29 10:57:09:536 action-translator LogManager.java:25 qattr [@-1,404:409='NUMBER',<0>,37:40].[@-1,411:414='line',<0>,37:47]
2023-08-29 10:57:09:536 action-translator LogManager.java:25 qattr [@-1,417:422='NUMBER',<0>,37:53].[@-1,424:426='pos',<0>,37:60]
2023-08-29 10:57:09:536 action-translator LogManager.java:25 qattr [@-1,506:511='NUMBER',<0>,39:37].[@-1,513:516='text',<0>,39:44]
2023-08-29 10:57:09:536 action-translator LogManager.java:25 attr [@-1,621:621='e',<0>,43:13]
2023-08-29 10:57:09:536 action-translator LogManager.java:25 qattr [@-1,651:656='NUMBER',<0>,43:43].[@-1,658:661='line',<0>,43:50]
2023-08-29 10:57:09:536 action-translator LogManager.java:25 qattr [@-1,664:669='NUMBER',<0>,43:56].[@-1,671:673='pos',<0>,43:63]
2023-08-29 10:57:09:536 action-translator LogManager.java:25 translate 
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-29 10:57:09:536 action-translator LogManager.java:25 qattr [@-1,18:23='CADENA',<0>,48:16].[@-1,25:28='text',<0>,48:23]
2023-08-29 10:57:09:536 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,49:9]
2023-08-29 10:57:09:536 action-translator LogManager.java:25 qattr [@-1,70:75='CADENA',<0>,49:39].[@-1,77:80='line',<0>,49:46]
2023-08-29 10:57:09:537 action-translator LogManager.java:25 qattr [@-1,84:89='CADENA',<0>,49:53].[@-1,91:93='pos',<0>,49:60]
2023-08-29 10:57:09:537 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-29 10:57:09:537 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,51:32]
2023-08-29 10:57:09:537 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,51:62].[@-1,36:39='line',<0>,51:66]
2023-08-29 10:57:09:537 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,51:73].[@-1,47:49='pos',<0>,51:77]
2023-08-29 10:57:09:537 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-29 10:57:09:537 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,52:32]
2023-08-29 10:57:09:537 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,52:62].[@-1,36:39='line',<0>,52:66]
2023-08-29 10:57:09:537 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,52:73].[@-1,47:49='pos',<0>,52:77]
2023-08-29 10:57:09:537 action-translator LogManager.java:25 translate  
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    
2023-08-29 10:57:09:537 action-translator LogManager.java:25 qattr [@-1,19:27='CHARACTER',<0>,55:16].[@-1,29:32='text',<0>,55:26]
2023-08-29 10:57:09:537 action-translator LogManager.java:25 attr [@-1,44:44='e',<0>,56:9]
2023-08-29 10:57:09:537 action-translator LogManager.java:25 qattr [@-1,74:82='CHARACTER',<0>,56:39].[@-1,84:87='line',<0>,56:49]
2023-08-29 10:57:09:538 action-translator LogManager.java:25 qattr [@-1,91:99='CHARACTER',<0>,56:56].[@-1,101:103='pos',<0>,56:66]
2023-08-29 10:57:09:538 action-translator LogManager.java:25 translate 
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    
2023-08-29 10:57:09:538 action-translator LogManager.java:25 qattr [@-1,17:25='ID_VALIDO',<0>,60:15].[@-1,27:30='text',<0>,60:25]
2023-08-29 10:57:09:538 action-translator LogManager.java:25 attr [@-1,42:42='e',<0>,61:9]
2023-08-29 10:57:09:538 action-translator LogManager.java:25 qattr [@-1,70:78='ID_VALIDO',<0>,61:37].[@-1,80:83='line',<0>,61:47]
2023-08-29 10:57:09:538 action-translator LogManager.java:25 qattr [@-1,86:94='ID_VALIDO',<0>,61:53].[@-1,96:98='pos',<0>,61:63]
2023-08-29 10:57:09:538 action-translator LogManager.java:25 translate $e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)
2023-08-29 10:57:09:538 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,63:32]
2023-08-29 10:57:09:538 action-translator LogManager.java:25 qattr [@-1,31:34='NULO',<0>,63:62].[@-1,36:39='line',<0>,63:67]
2023-08-29 10:57:09:538 action-translator LogManager.java:25 qattr [@-1,43:46='NULO',<0>,63:74].[@-1,48:50='pos',<0>,63:79]
2023-08-29 10:57:09:538 action-translator LogManager.java:25 qattr [@-1,54:57='NULO',<0>,63:85].[@-1,59:62='text',<0>,63:90]
2023-08-29 10:57:09:539 action-translator LogManager.java:25 translate  $e = $vectorvacio.veemct
2023-08-29 10:57:09:539 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,64:40]
2023-08-29 10:57:09:539 action-translator LogManager.java:25 qattr [@-1,7:17='vectorvacio',<0>,64:45].[@-1,19:24='veemct',<0>,64:57]
2023-08-29 10:57:09:539 action-translator LogManager.java:25 translate  $e = $vectorcount.vecnct
2023-08-29 10:57:09:539 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,65:40]
2023-08-29 10:57:09:539 action-translator LogManager.java:25 qattr [@-1,7:17='vectorcount',<0>,65:45].[@-1,19:24='vecnct',<0>,65:57]
2023-08-29 10:57:09:539 action-translator LogManager.java:25 translate  $e = $vectoraccess.vepposct
2023-08-29 10:57:09:539 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,66:41]
2023-08-29 10:57:09:539 action-translator LogManager.java:25 qattr [@-1,7:18='vectoraccess',<0>,66:46].[@-1,20:27='vepposct',<0>,66:59]
2023-08-29 10:57:09:539 action-translator LogManager.java:25 translate  $e = $intembebida.intemb
2023-08-29 10:57:09:539 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,67:40]
2023-08-29 10:57:09:539 action-translator LogManager.java:25 qattr [@-1,7:17='intembebida',<0>,67:45].[@-1,19:24='intemb',<0>,67:57]
2023-08-29 10:57:09:539 action-translator LogManager.java:25 translate  $e = $floatembebida.floemb
2023-08-29 10:57:09:539 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,68:42]
2023-08-29 10:57:09:540 action-translator LogManager.java:25 qattr [@-1,7:19='floatembebida',<0>,68:47].[@-1,21:26='floemb',<0>,68:61]
2023-08-29 10:57:09:540 action-translator LogManager.java:25 translate  $e = $stringembebida.stremb
2023-08-29 10:57:09:540 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,69:43]
2023-08-29 10:57:09:540 action-translator LogManager.java:25 qattr [@-1,7:20='stringembebida',<0>,69:48].[@-1,22:27='stremb',<0>,69:63]
2023-08-29 10:57:09:540 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-08-29 10:57:09:540 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 10:57:09:541 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,72:120]
2023-08-29 10:57:09:541 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,72:150].[@-1,37:41='start',<0>,72:155]
2023-08-29 10:57:09:541 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,72:173].[@-1,60:64='start',<0>,72:178]
2023-08-29 10:57:09:541 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,72:198].[@-1,85:85='e',<0>,72:203]
2023-08-29 10:57:09:541 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,72:207].[@-1,92:95='text',<0>,72:210]
2023-08-29 10:57:09:541 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,72:217].[@-1,105:105='e',<0>,72:223]
2023-08-29 10:57:09:541 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-08-29 10:57:09:541 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 10:57:09:541 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,73:149]
2023-08-29 10:57:09:541 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,73:179].[@-1,37:41='start',<0>,73:184]
2023-08-29 10:57:09:541 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,73:202].[@-1,60:64='start',<0>,73:207]
2023-08-29 10:57:09:541 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,73:227].[@-1,85:85='e',<0>,73:232]
2023-08-29 10:57:09:541 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,73:236].[@-1,92:95='text',<0>,73:239]
2023-08-29 10:57:09:541 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,73:246].[@-1,105:105='e',<0>,73:252]
2023-08-29 10:57:09:541 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-08-29 10:57:09:541 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 10:57:09:541 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,74:149]
2023-08-29 10:57:09:541 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,74:179].[@-1,37:41='start',<0>,74:184]
2023-08-29 10:57:09:541 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,74:202].[@-1,60:64='start',<0>,74:207]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,74:227].[@-1,85:85='e',<0>,74:232]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,74:236].[@-1,92:95='text',<0>,74:239]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,74:246].[@-1,105:105='e',<0>,74:252]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-08-29 10:57:09:542 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 10:57:09:542 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,75:154]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,75:184].[@-1,37:41='start',<0>,75:189]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,75:207].[@-1,60:64='start',<0>,75:212]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,75:232].[@-1,85:85='e',<0>,75:237]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,75:241].[@-1,92:95='text',<0>,75:244]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,75:251].[@-1,105:105='e',<0>,75:257]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-08-29 10:57:09:542 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 10:57:09:542 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,76:154]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,76:184].[@-1,37:41='start',<0>,76:189]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,76:207].[@-1,60:64='start',<0>,76:212]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,76:232].[@-1,85:85='e',<0>,76:237]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,76:241].[@-1,92:95='text',<0>,76:244]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,76:251].[@-1,105:105='e',<0>,76:257]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-08-29 10:57:09:542 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 10:57:09:542 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,77:151]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,77:181].[@-1,37:41='start',<0>,77:186]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,77:204].[@-1,60:64='start',<0>,77:209]
2023-08-29 10:57:09:542 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,77:229].[@-1,85:85='e',<0>,77:234]
2023-08-29 10:57:09:543 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,77:238].[@-1,92:95='text',<0>,77:241]
2023-08-29 10:57:09:543 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,77:248].[@-1,105:105='e',<0>,77:254]
2023-08-29 10:57:09:543 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-29 10:57:09:543 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 10:57:09:543 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,78:127]
2023-08-29 10:57:09:543 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,78:157].[@-1,37:41='start',<0>,78:162]
2023-08-29 10:57:09:543 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,78:180].[@-1,60:64='start',<0>,78:185]
2023-08-29 10:57:09:543 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,78:205].[@-1,85:85='e',<0>,78:210]
2023-08-29 10:57:09:543 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,78:214].[@-1,92:95='text',<0>,78:217]
2023-08-29 10:57:09:543 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,78:224].[@-1,105:105='e',<0>,78:230]
2023-08-29 10:57:09:543 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-29 10:57:09:543 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 10:57:09:543 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,79:126]
2023-08-29 10:57:09:543 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,79:156].[@-1,37:41='start',<0>,79:161]
2023-08-29 10:57:09:543 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,79:179].[@-1,60:64='start',<0>,79:184]
2023-08-29 10:57:09:543 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,79:204].[@-1,85:85='e',<0>,79:209]
2023-08-29 10:57:09:543 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,79:213].[@-1,92:95='text',<0>,79:216]
2023-08-29 10:57:09:544 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,79:223].[@-1,105:105='e',<0>,79:229]
2023-08-29 10:57:09:544 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-08-29 10:57:09:544 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-08-29 10:57:09:544 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-08-29 10:57:09:544 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-08-29 10:57:09:544 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-08-29 10:57:09:544 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-08-29 10:57:09:544 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-29 10:57:09:544 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-29 10:57:09:545 action-translator LogManager.java:25 translate  $myIfElse = instructions.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)
2023-08-29 10:57:09:546 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,200:43]
2023-08-29 10:57:09:546 action-translator LogManager.java:25 qattr [@-1,42:43='IF',<0>,200:83].[@-1,45:48='line',<0>,200:86]
2023-08-29 10:57:09:546 action-translator LogManager.java:25 qattr [@-1,52:53='IF',<0>,200:93].[@-1,55:57='pos',<0>,200:96]
2023-08-29 10:57:09:546 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,200:102].[@-1,66:66='e',<0>,200:107]
2023-08-29 10:57:09:546 action-translator LogManager.java:25 qattr [@-1,70:81='blockinterno',<0>,200:111].[@-1,83:88='blkint',<0>,200:124]
2023-08-29 10:57:09:546 action-translator LogManager.java:25 translate  $myIfElse = instructions.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)
2023-08-29 10:57:09:546 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,201:91]
2023-08-29 10:57:09:546 action-translator LogManager.java:25 qattr [@-1,46:47='IF',<0>,201:135].[@-1,49:52='line',<0>,201:138]
2023-08-29 10:57:09:546 action-translator LogManager.java:25 qattr [@-1,56:57='IF',<0>,201:145].[@-1,59:61='pos',<0>,201:148]
2023-08-29 10:57:09:546 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,201:154].[@-1,70:70='e',<0>,201:159]
2023-08-29 10:57:09:546 action-translator LogManager.java:25 qattr [@-1,74:77='ifop',<0>,201:163].[@-1,79:84='blkint',<0>,201:168]
2023-08-29 10:57:09:546 action-translator LogManager.java:25 qattr [@-1,89:94='elseop',<0>,201:178].[@-1,96:101='blkint',<0>,201:185]
2023-08-29 10:57:09:546 action-translator LogManager.java:25 translate  $myIfElse = instructions.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)
2023-08-29 10:57:09:547 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,202:64]
2023-08-29 10:57:09:547 action-translator LogManager.java:25 qattr [@-1,48:49='IF',<0>,202:110].[@-1,51:54='line',<0>,202:113]
2023-08-29 10:57:09:547 action-translator LogManager.java:25 qattr [@-1,58:59='IF',<0>,202:120].[@-1,61:63='pos',<0>,202:123]
2023-08-29 10:57:09:547 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,202:129].[@-1,72:72='e',<0>,202:134]
2023-08-29 10:57:09:547 action-translator LogManager.java:25 qattr [@-1,76:87='blockinterno',<0>,202:138].[@-1,89:94='blkint',<0>,202:151]
2023-08-29 10:57:09:547 action-translator LogManager.java:25 qattr [@-1,98:112='sentenciaifelse',<0>,202:160].[@-1,114:121='myIfElse',<0>,202:176]
2023-08-29 10:57:09:547 action-translator LogManager.java:25 translate 
    if ($DEFAULT != nil) {
        $mySwitch = instructions.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = instructions.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }

2023-08-29 10:57:09:547 action-translator LogManager.java:25 attr [@-1,11:17='DEFAULT',<0>,208:9]
2023-08-29 10:57:09:548 action-translator LogManager.java:25 attr [@-1,39:46='mySwitch',<0>,209:9]
2023-08-29 10:57:09:548 action-translator LogManager.java:25 qattr [@-1,90:95='SWITCH',<0>,209:60].[@-1,97:100='line',<0>,209:67]
2023-08-29 10:57:09:548 action-translator LogManager.java:25 qattr [@-1,104:109='SWITCH',<0>,209:74].[@-1,111:113='pos',<0>,209:81]
2023-08-29 10:57:09:548 action-translator LogManager.java:25 qattr [@-1,117:120='expr',<0>,209:87].[@-1,122:122='e',<0>,209:92]
2023-08-29 10:57:09:548 action-translator LogManager.java:25 qattr [@-1,126:134='blockcase',<0>,209:96].[@-1,136:142='blkcase',<0>,209:106]
2023-08-29 10:57:09:548 action-translator LogManager.java:25 qattr [@-1,146:157='blockinterno',<0>,209:116].[@-1,159:164='blkint',<0>,209:129]
2023-08-29 10:57:09:548 action-translator LogManager.java:25 attr [@-1,191:198='mySwitch',<0>,211:9]
2023-08-29 10:57:09:548 action-translator LogManager.java:25 qattr [@-1,235:240='SWITCH',<0>,211:53].[@-1,242:245='line',<0>,211:60]
2023-08-29 10:57:09:548 action-translator LogManager.java:25 qattr [@-1,249:254='SWITCH',<0>,211:67].[@-1,256:258='pos',<0>,211:74]
2023-08-29 10:57:09:548 action-translator LogManager.java:25 qattr [@-1,262:265='expr',<0>,211:80].[@-1,267:267='e',<0>,211:85]
2023-08-29 10:57:09:548 action-translator LogManager.java:25 qattr [@-1,271:279='blockcase',<0>,211:89].[@-1,281:287='blkcase',<0>,211:99]
2023-08-29 10:57:09:549 action-translator LogManager.java:25 translate 
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext

2023-08-29 10:57:09:549 action-translator LogManager.java:25 attr [@-1,7:13='blkcase',<0>,217:5]
2023-08-29 10:57:09:549 action-translator LogManager.java:25 translate 
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }

2023-08-29 10:57:09:549 action-translator LogManager.java:25 attr [@-1,100:106='blkcase',<0>,224:9]
2023-08-29 10:57:09:549 action-translator LogManager.java:25 attr [@-1,118:124='blkcase',<0>,224:27]
2023-08-29 10:57:09:549 action-translator LogManager.java:25 translate 
    $blocas=instructions.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)

2023-08-29 10:57:09:549 action-translator LogManager.java:25 attr [@-1,7:12='blocas',<0>,232:5]
2023-08-29 10:57:09:549 action-translator LogManager.java:25 qattr [@-1,51:54='CASE',<0>,232:49].[@-1,56:59='line',<0>,232:54]
2023-08-29 10:57:09:549 action-translator LogManager.java:25 qattr [@-1,63:66='CASE',<0>,232:61].[@-1,68:70='pos',<0>,232:66]
2023-08-29 10:57:09:549 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,232:72].[@-1,79:79='e',<0>,232:77]
2023-08-29 10:57:09:549 action-translator LogManager.java:25 qattr [@-1,83:94='blockinterno',<0>,232:81].[@-1,96:101='blkint',<0>,232:94]
2023-08-29 10:57:09:550 action-translator LogManager.java:25 translate  $whict = instructions.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)
2023-08-29 10:57:09:550 action-translator LogManager.java:25 attr [@-1,2:6='whict',<0>,237:46]
2023-08-29 10:57:09:550 action-translator LogManager.java:25 qattr [@-1,42:46='WHILE',<0>,237:86].[@-1,48:51='line',<0>,237:92]
2023-08-29 10:57:09:550 action-translator LogManager.java:25 qattr [@-1,55:59='WHILE',<0>,237:99].[@-1,61:63='pos',<0>,237:105]
2023-08-29 10:57:09:550 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,237:111].[@-1,72:72='e',<0>,237:116]
2023-08-29 10:57:09:550 action-translator LogManager.java:25 qattr [@-1,76:87='blockinterno',<0>,237:120].[@-1,89:94='blkint',<0>,237:133]
2023-08-29 10:57:09:551 action-translator LogManager.java:25 translate  $forct = instructions.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)
2023-08-29 10:57:09:551 action-translator LogManager.java:25 attr [@-1,2:6='forct',<0>,241:79]
2023-08-29 10:57:09:551 action-translator LogManager.java:25 qattr [@-1,45:47='FOR',<0>,241:122].[@-1,49:52='line',<0>,241:126]
2023-08-29 10:57:09:551 action-translator LogManager.java:25 qattr [@-1,56:58='FOR',<0>,241:133].[@-1,60:62='pos',<0>,241:137]
2023-08-29 10:57:09:551 action-translator LogManager.java:25 qattr [@-1,66:74='ID_VALIDO',<0>,241:143].[@-1,76:79='text',<0>,241:153]
2023-08-29 10:57:09:551 action-translator LogManager.java:25 qattr [@-1,83:86='left',<0>,241:160].[@-1,88:88='e',<0>,241:165]
2023-08-29 10:57:09:551 action-translator LogManager.java:25 qattr [@-1,92:96='right',<0>,241:169].[@-1,98:98='e',<0>,241:175]
2023-08-29 10:57:09:551 action-translator LogManager.java:25 qattr [@-1,101:112='blockinterno',<0>,241:178].[@-1,114:119='blkint',<0>,241:191]
2023-08-29 10:57:09:551 action-translator LogManager.java:25 translate  $forct = instructions.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)
2023-08-29 10:57:09:552 action-translator LogManager.java:25 attr [@-1,2:6='forct',<0>,242:57]
2023-08-29 10:57:09:552 action-translator LogManager.java:25 qattr [@-1,46:48='FOR',<0>,242:101].[@-1,50:53='line',<0>,242:105]
2023-08-29 10:57:09:552 action-translator LogManager.java:25 qattr [@-1,57:59='FOR',<0>,242:112].[@-1,61:63='pos',<0>,242:116]
2023-08-29 10:57:09:552 action-translator LogManager.java:25 qattr [@-1,67:75='ID_VALIDO',<0>,242:122].[@-1,77:80='text',<0>,242:132]
2023-08-29 10:57:09:552 action-translator LogManager.java:25 qattr [@-1,84:87='expr',<0>,242:139].[@-1,89:89='e',<0>,242:144]
2023-08-29 10:57:09:552 action-translator LogManager.java:25 qattr [@-1,93:104='blockinterno',<0>,242:148].[@-1,106:111='blkint',<0>,242:161]
2023-08-29 10:57:09:552 action-translator LogManager.java:25 translate  
    $guct = instructions.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)

2023-08-29 10:57:09:552 action-translator LogManager.java:25 attr [@-1,8:11='guct',<0>,248:5]
2023-08-29 10:57:09:552 action-translator LogManager.java:25 qattr [@-1,47:51='GUARD',<0>,248:44].[@-1,53:56='line',<0>,248:50]
2023-08-29 10:57:09:552 action-translator LogManager.java:25 qattr [@-1,60:64='GUARD',<0>,248:57].[@-1,66:68='pos',<0>,248:63]
2023-08-29 10:57:09:552 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,248:69].[@-1,77:77='e',<0>,248:74]
2023-08-29 10:57:09:552 action-translator LogManager.java:25 qattr [@-1,81:92='blockinterno',<0>,248:78].[@-1,94:99='blkint',<0>,248:91]
2023-08-29 10:57:09:553 action-translator LogManager.java:25 translate $coct = instructions.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)
2023-08-29 10:57:09:553 action-translator LogManager.java:25 attr [@-1,1:4='coct',<0>,253:12]
2023-08-29 10:57:09:553 action-translator LogManager.java:25 qattr [@-1,47:54='CONTINUE',<0>,253:58].[@-1,56:59='line',<0>,253:67]
2023-08-29 10:57:09:553 action-translator LogManager.java:25 qattr [@-1,63:70='CONTINUE',<0>,253:74].[@-1,72:74='pos',<0>,253:83]
2023-08-29 10:57:09:553 action-translator LogManager.java:25 translate  $brkct = instructions.NewTransferenciaBreak($BREAK.line, $BREAK.pos)
2023-08-29 10:57:09:553 action-translator LogManager.java:25 attr [@-1,2:6='brkct',<0>,257:10]
2023-08-29 10:57:09:553 action-translator LogManager.java:25 qattr [@-1,46:50='BREAK',<0>,257:54].[@-1,52:55='line',<0>,257:60]
2023-08-29 10:57:09:553 action-translator LogManager.java:25 qattr [@-1,59:63='BREAK',<0>,257:67].[@-1,65:67='pos',<0>,257:73]
2023-08-29 10:57:09:553 action-translator LogManager.java:25 translate 
    $rect = instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos);

2023-08-29 10:57:09:553 action-translator LogManager.java:25 setAttr [@-1,7:10='rect',<0>,263:5] [@-1,13:75=' instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos)',<0>,263:11]
2023-08-29 10:57:09:553 action-translator LogManager.java:25 translate  instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos)
2023-08-29 10:57:09:553 action-translator LogManager.java:25 qattr [@-1,38:43='RETURN',<0>,262:38].[@-1,45:48='line',<0>,262:45]
2023-08-29 10:57:09:553 action-translator LogManager.java:25 qattr [@-1,52:57='RETURN',<0>,262:52].[@-1,59:61='pos',<0>,262:59]
2023-08-29 10:57:09:554 action-translator LogManager.java:25 translate 
    $rect = instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);

2023-08-29 10:57:09:554 action-translator LogManager.java:25 setAttr [@-1,7:10='rect',<0>,267:5] [@-1,13:85=' instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e)',<0>,267:11]
2023-08-29 10:57:09:554 action-translator LogManager.java:25 translate  instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e)
2023-08-29 10:57:09:554 action-translator LogManager.java:25 qattr [@-1,41:46='RETURN',<0>,266:41].[@-1,48:51='line',<0>,266:48]
2023-08-29 10:57:09:554 action-translator LogManager.java:25 qattr [@-1,55:60='RETURN',<0>,266:55].[@-1,62:64='pos',<0>,266:62]
2023-08-29 10:57:09:554 action-translator LogManager.java:25 qattr [@-1,68:69='op',<0>,266:68].[@-1,71:71='e',<0>,266:71]
2023-08-29 10:57:09:554 action-translator LogManager.java:25 translate  $vect = instructions.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)
2023-08-29 10:57:09:554 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,273:89]
2023-08-29 10:57:09:554 action-translator LogManager.java:25 qattr [@-1,50:52='VAR',<0>,273:137].[@-1,54:57='line',<0>,273:141]
2023-08-29 10:57:09:554 action-translator LogManager.java:25 qattr [@-1,61:63='VAR',<0>,273:148].[@-1,65:67='pos',<0>,273:152]
2023-08-29 10:57:09:554 action-translator LogManager.java:25 qattr [@-1,71:79='ID_VALIDO',<0>,273:158].[@-1,81:84='text',<0>,273:168]
2023-08-29 10:57:09:555 action-translator LogManager.java:25 qattr [@-1,89:96='tipodato',<0>,273:176].[@-1,98:101='tipo',<0>,273:185]
2023-08-29 10:57:09:555 action-translator LogManager.java:25 qattr [@-1,105:115='blockparams',<0>,273:192].[@-1,117:122='blkpar',<0>,273:204]
2023-08-29 10:57:09:555 action-translator LogManager.java:25 translate  $vect = instructions.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)
2023-08-29 10:57:09:555 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,274:77]
2023-08-29 10:57:09:555 action-translator LogManager.java:25 qattr [@-1,53:55='VAR',<0>,274:128].[@-1,57:60='line',<0>,274:132]
2023-08-29 10:57:09:555 action-translator LogManager.java:25 qattr [@-1,64:66='VAR',<0>,274:139].[@-1,68:70='pos',<0>,274:143]
2023-08-29 10:57:09:555 action-translator LogManager.java:25 qattr [@-1,74:82='ID_VALIDO',<0>,274:149].[@-1,84:87='text',<0>,274:159]
2023-08-29 10:57:09:555 action-translator LogManager.java:25 qattr [@-1,92:99='tipodato',<0>,274:167].[@-1,101:104='tipo',<0>,274:176]
2023-08-29 10:57:09:555 action-translator LogManager.java:25 translate  $vect = instructions.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)
2023-08-29 10:57:09:555 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,275:79]
2023-08-29 10:57:09:555 action-translator LogManager.java:25 qattr [@-1,47:49='VAR',<0>,275:124].[@-1,51:54='line',<0>,275:128]
2023-08-29 10:57:09:555 action-translator LogManager.java:25 qattr [@-1,58:60='VAR',<0>,275:135].[@-1,62:64='pos',<0>,275:139]
2023-08-29 10:57:09:555 action-translator LogManager.java:25 qattr [@-1,68:71='prin',<0>,275:145].[@-1,73:76='text',<0>,275:150]
2023-08-29 10:57:09:555 action-translator LogManager.java:25 qattr [@-1,81:88='tipodato',<0>,275:158].[@-1,90:93='tipo',<0>,275:167]
2023-08-29 10:57:09:555 action-translator LogManager.java:25 qattr [@-1,97:100='secu',<0>,275:174].[@-1,102:105='text',<0>,275:179]
2023-08-29 10:57:09:555 action-translator LogManager.java:25 translate 
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext

2023-08-29 10:57:09:555 action-translator LogManager.java:25 attr [@-1,7:12='blkpar',<0>,279:5]
2023-08-29 10:57:09:555 action-translator LogManager.java:25 translate 
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }

2023-08-29 10:57:09:556 action-translator LogManager.java:25 attr [@-1,102:107='blkpar',<0>,286:9]
2023-08-29 10:57:09:556 action-translator LogManager.java:25 attr [@-1,119:124='blkpar',<0>,286:26]
2023-08-29 10:57:09:556 action-translator LogManager.java:25 translate 
    $blopas = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)

2023-08-29 10:57:09:556 action-translator LogManager.java:25 attr [@-1,7:12='blopas',<0>,294:5]
2023-08-29 10:57:09:556 action-translator LogManager.java:25 qattr [@-1,51:54='COMA',<0>,294:49].[@-1,56:59='line',<0>,294:54]
2023-08-29 10:57:09:556 action-translator LogManager.java:25 qattr [@-1,63:66='COMA',<0>,294:61].[@-1,68:70='pos',<0>,294:66]
2023-08-29 10:57:09:556 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,294:72].[@-1,79:79='e',<0>,294:77]
2023-08-29 10:57:09:556 action-translator LogManager.java:25 translate 
    $blopas = instructions.NewArregloParametro($expr.e)

2023-08-29 10:57:09:557 action-translator LogManager.java:25 attr [@-1,7:12='blopas',<0>,298:5]
2023-08-29 10:57:09:557 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,298:48].[@-1,55:55='e',<0>,298:53]
2023-08-29 10:57:09:557 action-translator LogManager.java:25 translate  $veadct = instructions.NewArregloAppend($ID_VALIDO.text , $expr.e)
2023-08-29 10:57:09:557 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,302:46]
2023-08-29 10:57:09:557 action-translator LogManager.java:25 qattr [@-1,42:50='ID_VALIDO',<0>,302:86].[@-1,52:55='text',<0>,302:96]
2023-08-29 10:57:09:557 action-translator LogManager.java:25 qattr [@-1,60:63='expr',<0>,302:104].[@-1,65:65='e',<0>,302:109]
2023-08-29 10:57:09:557 action-translator LogManager.java:25 translate  $veadct = instructions.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)
2023-08-29 10:57:09:557 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,303:91]
2023-08-29 10:57:09:557 action-translator LogManager.java:25 qattr [@-1,49:52='prin',<0>,303:138].[@-1,54:57='text',<0>,303:143]
2023-08-29 10:57:09:557 action-translator LogManager.java:25 qattr [@-1,62:64='pop',<0>,303:151].[@-1,66:66='e',<0>,303:155]
2023-08-29 10:57:09:557 action-translator LogManager.java:25 qattr [@-1,70:73='secu',<0>,303:159].[@-1,75:78='text',<0>,303:164]
2023-08-29 10:57:09:557 action-translator LogManager.java:25 qattr [@-1,82:84='sop',<0>,303:171].[@-1,86:86='e',<0>,303:175]
2023-08-29 10:57:09:557 action-translator LogManager.java:25 translate  $veadct = instructions.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)
2023-08-29 10:57:09:557 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,304:53]
2023-08-29 10:57:09:558 action-translator LogManager.java:25 qattr [@-1,45:53='ID_VALIDO',<0>,304:96].[@-1,55:58='text',<0>,304:106]
2023-08-29 10:57:09:558 action-translator LogManager.java:25 qattr [@-1,63:65='pop',<0>,304:114].[@-1,67:67='e',<0>,304:118]
2023-08-29 10:57:09:558 action-translator LogManager.java:25 qattr [@-1,71:73='sop',<0>,304:122].[@-1,75:75='e',<0>,304:126]
2023-08-29 10:57:09:558 action-translator LogManager.java:25 translate  $vermct = instructions.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-08-29 10:57:09:558 action-translator LogManager.java:25 attr [@-1,2:7='vermct',<0>,307:46]
2023-08-29 10:57:09:558 action-translator LogManager.java:25 qattr [@-1,46:50='PUNTO',<0>,307:90].[@-1,52:55='line',<0>,307:96]
2023-08-29 10:57:09:558 action-translator LogManager.java:25 qattr [@-1,59:63='PUNTO',<0>,307:103].[@-1,65:67='pos',<0>,307:109]
2023-08-29 10:57:09:558 action-translator LogManager.java:25 qattr [@-1,71:79='ID_VALIDO',<0>,307:115].[@-1,81:84='text',<0>,307:125]
2023-08-29 10:57:09:558 action-translator LogManager.java:25 translate  $vermct = instructions.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)
2023-08-29 10:57:09:558 action-translator LogManager.java:25 attr [@-1,2:7='vermct',<0>,308:60]
2023-08-29 10:57:09:558 action-translator LogManager.java:25 qattr [@-1,45:49='PUNTO',<0>,308:103].[@-1,51:54='line',<0>,308:109]
2023-08-29 10:57:09:559 action-translator LogManager.java:25 qattr [@-1,58:62='PUNTO',<0>,308:116].[@-1,64:66='pos',<0>,308:122]
2023-08-29 10:57:09:559 action-translator LogManager.java:25 qattr [@-1,70:78='ID_VALIDO',<0>,308:128].[@-1,80:83='text',<0>,308:138]
2023-08-29 10:57:09:559 action-translator LogManager.java:25 qattr [@-1,87:90='expr',<0>,308:145].[@-1,92:92='e',<0>,308:150]
2023-08-29 10:57:09:559 action-translator LogManager.java:25 translate  $veemct = instructions.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-08-29 10:57:09:559 action-translator LogManager.java:25 attr [@-1,2:7='veemct',<0>,311:28]
2023-08-29 10:57:09:559 action-translator LogManager.java:25 qattr [@-1,43:47='PUNTO',<0>,311:69].[@-1,49:52='line',<0>,311:75]
2023-08-29 10:57:09:559 action-translator LogManager.java:25 qattr [@-1,56:60='PUNTO',<0>,311:82].[@-1,62:64='pos',<0>,311:88]
2023-08-29 10:57:09:559 action-translator LogManager.java:25 qattr [@-1,68:76='ID_VALIDO',<0>,311:94].[@-1,78:81='text',<0>,311:104]
2023-08-29 10:57:09:561 action-translator LogManager.java:25 translate  $vecnct = instructions.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-08-29 10:57:09:561 action-translator LogManager.java:25 attr [@-1,2:7='vecnct',<0>,314:26]
2023-08-29 10:57:09:561 action-translator LogManager.java:25 qattr [@-1,41:45='PUNTO',<0>,314:65].[@-1,47:50='line',<0>,314:71]
2023-08-29 10:57:09:561 action-translator LogManager.java:25 qattr [@-1,54:58='PUNTO',<0>,314:78].[@-1,60:62='pos',<0>,314:84]
2023-08-29 10:57:09:561 action-translator LogManager.java:25 qattr [@-1,66:74='ID_VALIDO',<0>,314:90].[@-1,76:79='text',<0>,314:100]
2023-08-29 10:57:09:561 action-translator LogManager.java:25 translate  $vepposct = instructions.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)
2023-08-29 10:57:09:561 action-translator LogManager.java:25 attr [@-1,2:9='vepposct',<0>,317:37]
2023-08-29 10:57:09:561 action-translator LogManager.java:25 qattr [@-1,44:51='CORCHDER',<0>,317:79].[@-1,53:56='line',<0>,317:88]
2023-08-29 10:57:09:561 action-translator LogManager.java:25 qattr [@-1,60:67='CORCHDER',<0>,317:95].[@-1,69:71='pos',<0>,317:104]
2023-08-29 10:57:09:561 action-translator LogManager.java:25 qattr [@-1,75:83='ID_VALIDO',<0>,317:110].[@-1,85:88='text',<0>,317:120]
2023-08-29 10:57:09:561 action-translator LogManager.java:25 qattr [@-1,92:95='expr',<0>,317:127].[@-1,97:97='e',<0>,317:132]
2023-08-29 10:57:09:561 action-translator LogManager.java:25 translate 
2023-08-29 10:57:09:561 action-translator LogManager.java:25 translate 
2023-08-29 10:57:09:561 action-translator LogManager.java:25 translate 
2023-08-29 10:57:09:561 action-translator LogManager.java:25 translate 
2023-08-29 10:57:09:561 action-translator LogManager.java:25 translate 
2023-08-29 10:57:09:561 action-translator LogManager.java:25 translate 
2023-08-29 10:57:09:561 action-translator LogManager.java:25 translate 
2023-08-29 10:57:09:563 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-29 10:57:09:563 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,341:29]
2023-08-29 10:57:09:563 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,341:59].[@-1,38:41='line',<0>,341:65]
2023-08-29 10:57:09:563 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,341:71].[@-1,50:52='pos',<0>,341:77]
2023-08-29 10:57:09:563 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,341:82].[@-1,60:60='e',<0>,341:87]
2023-08-29 10:57:09:563 action-translator LogManager.java:25 translate  $intemb = instructions.NewFuncionIntEmbebida($expr.e)
2023-08-29 10:57:09:563 action-translator LogManager.java:25 attr [@-1,2:7='intemb',<0>,344:27]
2023-08-29 10:57:09:563 action-translator LogManager.java:25 qattr [@-1,47:50='expr',<0>,344:72].[@-1,52:52='e',<0>,344:77]
2023-08-29 10:57:09:563 action-translator LogManager.java:25 translate  $floemb = instructions.NewFuncionFloatEmbebida($expr.e)
2023-08-29 10:57:09:563 action-translator LogManager.java:25 attr [@-1,2:7='floemb',<0>,347:29]
2023-08-29 10:57:09:563 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,347:76].[@-1,54:54='e',<0>,347:81]
2023-08-29 10:57:09:563 action-translator LogManager.java:25 translate  $stremb = instructions.NewFuncionStringEmbebida($expr.e)
2023-08-29 10:57:09:563 action-translator LogManager.java:25 attr [@-1,2:7='stremb',<0>,350:30]
2023-08-29 10:57:09:563 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,350:78].[@-1,55:55='e',<0>,350:83]
2023-08-29 10:57:09:888 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-08-29 10:57:09:889 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-08-29 10:57:09:987 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-08-29 10:57:09:988 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

